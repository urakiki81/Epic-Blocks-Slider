import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';
import 'reakit-system/createComponent';
import 'reakit-system/createHook';
import 'reakit-utils/shallowEqual';
import '../Box/Box.js';
import { useContext, useEffect } from 'react';
import 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import 'reakit-warning';
import 'reakit-utils/useLiveRef';
import 'reakit-utils/isSelfTarget';
import 'reakit-utils/useIsomorphicEffect';
import 'reakit-utils/hasFocusWithin';
import 'reakit-utils/isPortalEvent';
import 'reakit-utils/getActiveElement';
import 'reakit-utils/tabbable';
import '../Tabbable/Tabbable.js';
import '../Clickable/Clickable.js';
import { useSealedState } from 'reakit-utils/useSealedState';
import 'reakit-system/useCreateElement';
import 'reakit-utils/createOnKeyDown';
import 'reakit-utils/getDocument';
import 'reakit-utils/fireEvent';
import 'reakit-utils/fireKeyboardEvent';
import 'reakit-utils/applyState';
import '../Id/IdProvider.js';
import '../Id/IdState.js';
import '../CompositeState-3a25dcee.js';
import '../Composite/Composite.js';
import '../Group/Group.js';
import '../Id/Id.js';
import '../Composite/CompositeGroup.js';
import 'reakit-utils/isTextField';
import '../setTextFieldValue-78ab5d56.js';
import '../Composite/CompositeItem.js';
import '../Composite/CompositeItemWidget.js';
import '../Disclosure/DisclosureState.js';
import 'reakit-utils/removeItemFromArray';
import { M as MenuContext } from '../MenuContext-eb1aa1c9.js';
import '../Dialog/DialogState.js';
import '@popperjs/core';
import { usePopoverState } from '../Popover/PopoverState.js';
import { useMenuBarState } from './MenuBarState.js';

function useMenuState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      _useSealedState$orien = _useSealedState.orientation,
      orientation = _useSealedState$orien === void 0 ? "vertical" : _useSealedState$orien,
      _useSealedState$gutte = _useSealedState.gutter,
      gutter = _useSealedState$gutte === void 0 ? 0 : _useSealedState$gutte,
      sealed = _objectWithoutPropertiesLoose(_useSealedState, ["orientation", "gutter"]);

  var parent = useContext(MenuContext);
  var placement = sealed.placement || (parent && parent.orientation === "vertical" ? "right-start" : "bottom-start");
  var menuBar = useMenuBarState(_objectSpread2(_objectSpread2({}, sealed), {}, {
    orientation: orientation
  }));
  var popover = usePopoverState(_objectSpread2(_objectSpread2({}, sealed), {}, {
    placement: placement,
    gutter: gutter
  }));
  useEffect(function () {
    if (!popover.visible) {
      menuBar.reset();
    }
  }, [popover.visible, menuBar.reset]);
  return _objectSpread2(_objectSpread2({}, menuBar), popover);
}
var keys = [].concat(useMenuBarState.__keys, usePopoverState.__keys);
useMenuState.__keys = keys;

export { useMenuState };
