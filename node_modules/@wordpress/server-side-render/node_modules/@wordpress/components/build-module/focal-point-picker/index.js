import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { createElement } from "@wordpress/element";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * External dependencies
 */
import { noop } from 'lodash';
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { __ } from '@wordpress/i18n';
import { Component, createRef } from '@wordpress/element';
import { withInstanceId, compose } from '@wordpress/compose';
import { UP, DOWN, LEFT, RIGHT } from '@wordpress/keycodes';
/**
 * Internal dependencies
 */

import withFocusOutside from '../higher-order/with-focus-outside';
import BaseControl from '../base-control';
import Controls from './controls';
import FocalPoint from './focal-point';
import Grid from './grid';
import Media from './media';
import { MediaWrapper, MediaContainer } from './styles/focal-point-picker-style';
import { roundClamp } from '../utils/math';
import { INITIAL_BOUNDS } from './utils';
export var FocalPointPicker = /*#__PURE__*/function (_Component) {
  _inherits(FocalPointPicker, _Component);

  var _super = _createSuper(FocalPointPicker);

  function FocalPointPicker(props) {
    var _this;

    _classCallCheck(this, FocalPointPicker);

    _this = _super.apply(this, arguments);
    _this.state = {
      isDragging: false,
      bounds: INITIAL_BOUNDS,
      percentages: props.value
    };
    _this.containerRef = createRef();
    _this.mediaRef = createRef();
    _this.handleOnClick = _this.handleOnClick.bind(_assertThisInitialized(_this));
    _this.handleOnMouseUp = _this.handleOnMouseUp.bind(_assertThisInitialized(_this));
    _this.handleOnKeyDown = _this.handleOnKeyDown.bind(_assertThisInitialized(_this));
    _this.onMouseMove = _this.onMouseMove.bind(_assertThisInitialized(_this));
    _this.updateBounds = _this.updateBounds.bind(_assertThisInitialized(_this));
    _this.updateValue = _this.updateValue.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(FocalPointPicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('mouseup', this.handleOnMouseUp);
      window.addEventListener('resize', this.updateBounds);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.url !== this.props.url) {
        this.setState({
          isDragging: false
        });
      }
      /**
       * Handles cases where the incoming value changes.
       * An example is the values resetting based on an UNDO action.
       */


      if (this.props.value.x !== this.state.percentages.x || this.props.value.y !== this.state.percentages.y) {
        this.setState({
          percentages: this.props.value
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('mouseup', this.handleOnMouseUp);
      window.removeEventListener('resize', this.updateBounds);
    }
  }, {
    key: "calculateBounds",
    value: function calculateBounds() {
      var bounds = INITIAL_BOUNDS;

      if (!this.mediaRef.current) {
        return bounds;
      }

      var dimensions = {
        width: this.mediaRef.current.clientWidth,
        height: this.mediaRef.current.clientHeight
      };
      var pickerDimensions = this.pickerDimensions();
      var widthRatio = pickerDimensions.width / dimensions.width;
      var heightRatio = pickerDimensions.height / dimensions.height;

      if (heightRatio >= widthRatio) {
        bounds.width = bounds.right = pickerDimensions.width;
        bounds.height = dimensions.height * widthRatio;
        bounds.top = (pickerDimensions.height - bounds.height) / 2;
        bounds.bottom = bounds.top + bounds.height;
      } else {
        bounds.height = bounds.bottom = pickerDimensions.height;
        bounds.width = dimensions.width * heightRatio;
        bounds.left = (pickerDimensions.width - bounds.width) / 2;
        bounds.right = bounds.left + bounds.width;
      }

      return bounds;
    }
  }, {
    key: "updateValue",
    value: function updateValue() {
      var nextValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var onChange = this.props.onChange;
      var x = nextValue.x,
          y = nextValue.y;
      var nextPercentage = {
        x: parseFloat(x).toFixed(2),
        y: parseFloat(y).toFixed(2)
      };
      this.setState({
        percentages: nextPercentage
      }, function () {
        onChange(nextPercentage);
      });
    }
  }, {
    key: "updateBounds",
    value: function updateBounds() {
      this.setState({
        bounds: this.calculateBounds()
      });
    }
  }, {
    key: "handleOnClick",
    value: function handleOnClick(event) {
      var _this2 = this;

      event.persist();
      this.setState({
        isDragging: true
      }, function () {
        _this2.onMouseMove(event);
      });
    }
  }, {
    key: "handleOnMouseUp",
    value: function handleOnMouseUp() {
      this.setState({
        isDragging: false
      });
    }
  }, {
    key: "handleOnKeyDown",
    value: function handleOnKeyDown(event) {
      var keyCode = event.keyCode,
          shiftKey = event.shiftKey;
      if (![UP, DOWN, LEFT, RIGHT].includes(keyCode)) return;
      var _this$state$percentag = this.state.percentages,
          x = _this$state$percentag.x,
          y = _this$state$percentag.y;
      event.preventDefault(); // Normalizing values for incrementing/decrementing based on arrow keys

      var nextX = parseFloat(x);
      var nextY = parseFloat(y);
      var step = shiftKey ? 0.1 : 0.01;

      switch (event.keyCode) {
        case UP:
          nextY = nextY - step;
          break;

        case DOWN:
          nextY = nextY + step;
          break;

        case LEFT:
          nextX = nextX - step;
          break;

        case RIGHT:
          nextX = nextX + step;
          break;
      }

      nextX = roundClamp(nextX, 0, 1, step);
      nextY = roundClamp(nextY, 0, 1, step);
      var percentages = {
        x: nextX,
        y: nextY
      };
      this.updateValue(percentages);
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      var _this$state = this.state,
          isDragging = _this$state.isDragging,
          bounds = _this$state.bounds;
      if (!isDragging) return;
      var shiftKey = event.shiftKey;
      var pickerDimensions = this.pickerDimensions();
      var cursorPosition = {
        left: event.pageX - pickerDimensions.left,
        top: event.pageY - pickerDimensions.top
      };
      var left = Math.max(bounds.left, Math.min(cursorPosition.left, bounds.right));
      var top = Math.max(bounds.top, Math.min(cursorPosition.top, bounds.bottom));
      var nextX = (left - bounds.left) / (pickerDimensions.width - bounds.left * 2);
      var nextY = (top - bounds.top) / (pickerDimensions.height - bounds.top * 2); // Enables holding shift to jump values by 10%

      var step = shiftKey ? 0.1 : 0.01;
      nextX = roundClamp(nextX, 0, 1, step);
      nextY = roundClamp(nextY, 0, 1, step);
      var nextPercentage = {
        x: nextX,
        y: nextY
      };
      this.updateValue(nextPercentage);
    }
  }, {
    key: "pickerDimensions",
    value: function pickerDimensions() {
      var containerNode = this.containerRef.current;

      if (!containerNode) {
        return {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        };
      }

      var clientHeight = containerNode.clientHeight,
          clientWidth = containerNode.clientWidth;

      var _containerNode$getBou = containerNode.getBoundingClientRect(),
          top = _containerNode$getBou.top,
          left = _containerNode$getBou.left;

      return {
        width: clientWidth,
        height: clientHeight,
        top: top + document.body.scrollTop,
        left: left
      };
    }
  }, {
    key: "iconCoordinates",
    value: function iconCoordinates() {
      var value = this.props.value;
      var bounds = this.state.bounds;

      if (bounds.left === undefined || bounds.top === undefined) {
        return {
          left: '50%',
          top: '50%'
        };
      }

      var pickerDimensions = this.pickerDimensions();
      var iconCoordinates = {
        left: value.x * (pickerDimensions.width - bounds.left * 2) + bounds.left,
        top: value.y * (pickerDimensions.height - bounds.top * 2) + bounds.top
      };
      return iconCoordinates;
    } // Callback method for the withFocusOutside higher-order component

  }, {
    key: "handleFocusOutside",
    value: function handleFocusOutside() {
      this.setState({
        isDragging: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          autoPlay = _this$props.autoPlay,
          className = _this$props.className,
          help = _this$props.help,
          instanceId = _this$props.instanceId,
          label = _this$props.label,
          _onDragStart = _this$props.onDragStart,
          onDragEnd = _this$props.onDragEnd,
          url = _this$props.url;
      var _this$state2 = this.state,
          bounds = _this$state2.bounds,
          isDragging = _this$state2.isDragging,
          percentages = _this$state2.percentages;
      var iconCoordinates = this.iconCoordinates();
      var classes = classnames('components-focal-point-picker-control', className);
      var id = "inspector-focal-point-picker-control-".concat(instanceId);
      return createElement(BaseControl, {
        label: label,
        id: id,
        help: help,
        className: classes
      }, createElement(MediaWrapper, {
        className: "components-focal-point-picker-wrapper"
      }, createElement(MediaContainer, {
        className: "components-focal-point-picker",
        onDragStart: function onDragStart(event) {
          _this3.setState({
            isDragging: true
          });

          _onDragStart(event);
        },
        onDrop: function onDrop(event) {
          _this3.setState({
            isDragging: false
          });

          onDragEnd(event);
        },
        onKeyDown: this.handleOnKeyDown,
        onMouseDown: this.handleOnClick,
        onMouseMove: this.onMouseMove,
        onMouseUp: this.handleOnMouseUp,
        ref: this.containerRef,
        role: "button",
        tabIndex: "-1"
      }, createElement(Grid, {
        bounds: bounds,
        value: percentages.x + percentages.y
      }), createElement(Media, {
        alt: __('Media preview'),
        autoPlay: autoPlay,
        mediaRef: this.mediaRef,
        onLoad: this.updateBounds,
        src: url
      }), createElement(FocalPoint, {
        coordinates: iconCoordinates,
        isDragging: isDragging
      }))), createElement(Controls, {
        percentages: percentages,
        onChange: this.updateValue
      }));
    }
  }]);

  return FocalPointPicker;
}(Component);
FocalPointPicker.defaultProps = {
  autoPlay: true,
  onDragStart: noop,
  onDragEnd: noop,
  onChange: noop,
  value: {
    x: 0.5,
    y: 0.5
  },
  url: null
};
export default compose([withInstanceId, withFocusOutside])(FocalPointPicker);
//# sourceMappingURL=index.js.map