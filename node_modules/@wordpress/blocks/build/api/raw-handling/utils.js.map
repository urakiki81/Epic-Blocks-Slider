{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/utils.js"],"names":["getBlockContentSchema","transforms","phrasingContentSchema","isPaste","schemas","map","isMatch","blockName","schema","hasAnchorSupport","value","attributes","undefined","mergeWith","objValue","srcValue","key","isPlain","HTML","test","deepFilterNodeList","nodeList","filters","doc","Array","from","forEach","node","childNodes","item","contains","deepFilterHTML","document","implementation","createHTMLDocument","body","innerHTML","getSibling","which","sibling","parentNode"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { mapValues, mergeWith, isFunction } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { isPhrasingContent } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { hasBlockSupport } from '..';\n\n/**\n * Given raw transforms from blocks, merges all schemas into one.\n *\n * @param {Array}  transforms            Block transforms, of the `raw` type.\n * @param {Object} phrasingContentSchema The phrasing content schema.\n * @param {Object} isPaste               Whether the context is pasting or not.\n *\n * @return {Object} A complete block content schema.\n */\nexport function getBlockContentSchema(\n\ttransforms,\n\tphrasingContentSchema,\n\tisPaste\n) {\n\tconst schemas = transforms.map( ( { isMatch, blockName, schema } ) => {\n\t\tconst hasAnchorSupport = hasBlockSupport( blockName, 'anchor' );\n\n\t\tschema = isFunction( schema )\n\t\t\t? schema( { phrasingContentSchema, isPaste } )\n\t\t\t: schema;\n\n\t\t// If the block does not has anchor support and the transform does not\n\t\t// provides an isMatch we can return the schema right away.\n\t\tif ( ! hasAnchorSupport && ! isMatch ) {\n\t\t\treturn schema;\n\t\t}\n\n\t\treturn mapValues( schema, ( value ) => {\n\t\t\tlet attributes = value.attributes || [];\n\t\t\t// If the block supports the \"anchor\" functionality, it needs to keep its ID attribute.\n\t\t\tif ( hasAnchorSupport ) {\n\t\t\t\tattributes = [ ...attributes, 'id' ];\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...value,\n\t\t\t\tattributes,\n\t\t\t\tisMatch: isMatch ? isMatch : undefined,\n\t\t\t};\n\t\t} );\n\t} );\n\n\treturn mergeWith( {}, ...schemas, ( objValue, srcValue, key ) => {\n\t\tswitch ( key ) {\n\t\t\tcase 'children': {\n\t\t\t\tif ( objValue === '*' || srcValue === '*' ) {\n\t\t\t\t\treturn '*';\n\t\t\t\t}\n\n\t\t\t\treturn { ...objValue, ...srcValue };\n\t\t\t}\n\t\t\tcase 'attributes':\n\t\t\tcase 'require': {\n\t\t\t\treturn [ ...( objValue || [] ), ...( srcValue || [] ) ];\n\t\t\t}\n\t\t\tcase 'isMatch': {\n\t\t\t\t// If one of the values being merge is undefined (matches everything),\n\t\t\t\t// the result of the merge will be undefined.\n\t\t\t\tif ( ! objValue || ! srcValue ) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\t// When merging two isMatch functions, the result is a new function\n\t\t\t\t// that returns if one of the source functions returns true.\n\t\t\t\treturn ( ...args ) => {\n\t\t\t\t\treturn objValue( ...args ) || srcValue( ...args );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} );\n}\n\n/**\n * Checks wether HTML can be considered plain text. That is, it does not contain\n * any elements that are not line breaks.\n *\n * @param {string} HTML The HTML to check.\n *\n * @return {boolean} Wether the HTML can be considered plain text.\n */\nexport function isPlain( HTML ) {\n\treturn ! /<(?!br[ />])/i.test( HTML );\n}\n\n/**\n * Given node filters, deeply filters and mutates a NodeList.\n *\n * @param {NodeList} nodeList The nodeList to filter.\n * @param {Array}    filters  An array of functions that can mutate with the provided node.\n * @param {Document} doc      The document of the nodeList.\n * @param {Object}   schema   The schema to use.\n */\nexport function deepFilterNodeList( nodeList, filters, doc, schema ) {\n\tArray.from( nodeList ).forEach( ( node ) => {\n\t\tdeepFilterNodeList( node.childNodes, filters, doc, schema );\n\n\t\tfilters.forEach( ( item ) => {\n\t\t\t// Make sure the node is still attached to the document.\n\t\t\tif ( ! doc.contains( node ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\titem( node, doc, schema );\n\t\t} );\n\t} );\n}\n\n/**\n * Given node filters, deeply filters HTML tags.\n * Filters from the deepest nodes to the top.\n *\n * @param {string} HTML    The HTML to filter.\n * @param {Array}  filters An array of functions that can mutate with the provided node.\n * @param {Object} schema  The schema to use.\n *\n * @return {string} The filtered HTML.\n */\nexport function deepFilterHTML( HTML, filters = [], schema ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = HTML;\n\n\tdeepFilterNodeList( doc.body.childNodes, filters, doc, schema );\n\n\treturn doc.body.innerHTML;\n}\n\n/**\n * Gets a sibling within text-level context.\n *\n * @param {Element} node  The subject node.\n * @param {string}  which \"next\" or \"previous\".\n */\nexport function getSibling( node, which ) {\n\tconst sibling = node[ `${ which }Sibling` ];\n\n\tif ( sibling && isPhrasingContent( sibling ) ) {\n\t\treturn sibling;\n\t}\n\n\tconst { parentNode } = node;\n\n\tif ( ! parentNode || ! isPhrasingContent( parentNode ) ) {\n\t\treturn;\n\t}\n\n\treturn getSibling( parentNode, which );\n}\n"]}