{"version":3,"sources":["@wordpress/data-controls/src/index.js"],"names":["apiFetch","request","type","select","storeKey","selectorName","args","__unstableSyncSelect","dispatch","actionName","controls","API_FETCH","SELECT","registry","hasResolver","SYNC_SELECT","DISPATCH"],"mappings":";;;;;;;;;;;;;;AAGA;;AACA;;AAJA;;;;AAMA;;;;;;;;;;;;;;;;;;;AAmBO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAEC,OAAF,EAAe;AACtC,SAAO;AACNC,IAAAA,IAAI,EAAE,WADA;AAEND,IAAAA,OAAO,EAAPA;AAFM,GAAP;AAIA,CALM;AAOP;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,SAASE,MAAT,CAAiBC,QAAjB,EAA2BC,YAA3B,EAAmD;AAAA,oCAAPC,IAAO;AAAPA,IAAAA,IAAO;AAAA;;AACzD,SAAO;AACNJ,IAAAA,IAAI,EAAE,QADA;AAENE,IAAAA,QAAQ,EAARA,QAFM;AAGNC,IAAAA,YAAY,EAAZA,YAHM;AAINC,IAAAA,IAAI,EAAJA;AAJM,GAAP;AAMA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAuBO,SAASC,oBAAT,CAA+BH,QAA/B,EAAyCC,YAAzC,EAAiE;AAAA,qCAAPC,IAAO;AAAPA,IAAAA,IAAO;AAAA;;AACvE,SAAO;AACNJ,IAAAA,IAAI,EAAE,aADA;AAENE,IAAAA,QAAQ,EAARA,QAFM;AAGNC,IAAAA,YAAY,EAAZA,YAHM;AAINC,IAAAA,IAAI,EAAJA;AAJM,GAAP;AAMA;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBO,SAASE,QAAT,CAAmBJ,QAAnB,EAA6BK,UAA7B,EAAmD;AAAA,qCAAPH,IAAO;AAAPA,IAAAA,IAAO;AAAA;;AACzD,SAAO;AACNJ,IAAAA,IAAI,EAAE,UADA;AAENE,IAAAA,QAAQ,EAARA,QAFM;AAGNK,IAAAA,UAAU,EAAVA,UAHM;AAINH,IAAAA,IAAI,EAAJA;AAJM,GAAP;AAMA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BO,IAAMI,QAAQ,GAAG;AACvBC,EAAAA,SADuB,2BACE;AAAA,QAAZV,OAAY,QAAZA,OAAY;AACxB,WAAO,uBAAcA,OAAd,CAAP;AACA,GAHsB;AAIvBW,EAAAA,MAAM,EAAE,iCACP,UAAEC,QAAF;AAAA,WAAgB,iBAAwC;AAAA;;AAAA,UAApCT,QAAoC,SAApCA,QAAoC;AAAA,UAA1BC,YAA0B,SAA1BA,YAA0B;AAAA,UAAZC,IAAY,SAAZA,IAAY;AACvD,aAAO,aAAAO,QAAQ,CACdA,QAAQ,CAACV,MAAT,CAAiBC,QAAjB,EAA6BC,YAA7B,EAA4CS,WAA5C,GACG,6BADH,GAEG,QAHW,CAAR,CAIJV,QAJI,GAIQC,YAJR,oDAI2BC,IAJ3B,EAAP;AAKA,KAND;AAAA,GADO,CAJe;AAavBS,EAAAA,WAAW,EAAE,iCACZ,UAAEF,QAAF;AAAA,WAAgB,iBAAwC;AAAA;;AAAA,UAApCT,QAAoC,SAApCA,QAAoC;AAAA,UAA1BC,YAA0B,SAA1BA,YAA0B;AAAA,UAAZC,IAAY,SAAZA,IAAY;AACvD,aAAO,oBAAAO,QAAQ,CAACV,MAAT,CAAiBC,QAAjB,GAA6BC,YAA7B,2DAAgDC,IAAhD,EAAP;AACA,KAFD;AAAA,GADY,CAbU;AAkBvBU,EAAAA,QAAQ,EAAE,iCACT,UAAEH,QAAF;AAAA,WAAgB,iBAAsC;AAAA;;AAAA,UAAlCT,QAAkC,SAAlCA,QAAkC;AAAA,UAAxBK,UAAwB,SAAxBA,UAAwB;AAAA,UAAZH,IAAY,SAAZA,IAAY;AACrD,aAAO,sBAAAO,QAAQ,CAACL,QAAT,CAAmBJ,QAAnB,GAA+BK,UAA/B,6DAAgDH,IAAhD,EAAP;AACA,KAFD;AAAA,GADS;AAlBa,CAAjB","sourcesContent":["/**\n * WordPress dependencies\n */\nimport triggerFetch from '@wordpress/api-fetch';\nimport { createRegistryControl } from '@wordpress/data';\n\n/**\n * Dispatches a control action for triggering an api fetch call.\n *\n * @param {Object} request Arguments for the fetch request.\n *\n * @example\n * ```js\n * import { apiFetch } from '@wordpress/data-controls';\n *\n * // Action generator using apiFetch\n * export function* myAction() {\n * \tconst path = '/v2/my-api/items';\n * \tconst items = yield apiFetch( { path } );\n * \t// do something with the items.\n * }\n * ```\n *\n * @return {Object} The control descriptor.\n */\nexport const apiFetch = ( request ) => {\n\treturn {\n\t\ttype: 'API_FETCH',\n\t\trequest,\n\t};\n};\n\n/**\n * Dispatches a control action for triggering a registry select.\n *\n * Note: when this control action is handled, it automatically considers\n * selectors that may have a resolver. It will await and return the resolved\n * value when the selector has not been resolved yet.\n *\n * @param {string} storeKey      The key for the store the selector belongs to\n * @param {string} selectorName  The name of the selector\n * @param {Array}  args          Arguments for the select.\n *\n * @example\n * ```js\n * import { select } from '@wordpress/data-controls';\n *\n * // Action generator using select\n * export function* myAction() {\n * \tconst isSidebarOpened = yield select( 'core/edit-post', 'isEditorSideBarOpened' );\n * \t// do stuff with the result from the select.\n * }\n * ```\n *\n * @return {Object} The control descriptor.\n */\nexport function select( storeKey, selectorName, ...args ) {\n\treturn {\n\t\ttype: 'SELECT',\n\t\tstoreKey,\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\n/**\n * Dispatches a control action for triggering a registry select.\n *\n * Note: This functions like the `select` control, but does not wait\n * for resolvers.\n *\n * @param {string} storeKey     The key for the store the selector belongs to.\n * @param {string} selectorName The name of the selector.\n * @param {Array}  args         Arguments for the select.\n *\n * @example\n * ```js\n * import { __unstableSyncSelect } from '@wordpress/data-controls';\n *\n * // Action generator using `__unstableSyncSelect`.\n * export function* myAction() {\n * \tconst isEditorSideBarOpened = yield __unstableSyncSelect( 'core/edit-post', 'isEditorSideBarOpened' );\n * \t// Do stuff with the result from the `__unstableSyncSelect`.\n * }\n * ```\n *\n * @return {Object} The control descriptor.\n */\nexport function __unstableSyncSelect( storeKey, selectorName, ...args ) {\n\treturn {\n\t\ttype: 'SYNC_SELECT',\n\t\tstoreKey,\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\n/**\n * Dispatches a control action for triggering a registry dispatch.\n *\n * @param {string} storeKey    The key for the store the action belongs to\n * @param {string} actionName  The name of the action to dispatch\n * @param {Array}  args        Arguments for the dispatch action.\n *\n * @example\n * ```js\n * import { dispatch } from '@wordpress/data-controls';\n *\n * // Action generator using dispatch\n * export function* myAction() {\n * \tyield dispatch( 'core/edit-post', 'togglePublishSidebar' );\n * \t// do some other things.\n * }\n * ```\n *\n * @return {Object}  The control descriptor.\n */\nexport function dispatch( storeKey, actionName, ...args ) {\n\treturn {\n\t\ttype: 'DISPATCH',\n\t\tstoreKey,\n\t\tactionName,\n\t\targs,\n\t};\n}\n\n/**\n * The default export is what you use to register the controls with your custom\n * store.\n *\n * @example\n * ```js\n * // WordPress dependencies\n * import { controls } from '@wordpress/data-controls';\n * import { registerStore } from '@wordpress/data';\n *\n * // Internal dependencies\n * import reducer from './reducer';\n * import * as selectors from './selectors';\n * import * as actions from './actions';\n * import * as resolvers from './resolvers';\n *\n * registerStore( 'my-custom-store', {\n * \treducer,\n * \tcontrols,\n * \tactions,\n * \tselectors,\n * \tresolvers,\n * } );\n * ```\n *\n * @return {Object} An object for registering the default controls with the\n *                  store.\n */\nexport const controls = {\n\tAPI_FETCH( { request } ) {\n\t\treturn triggerFetch( request );\n\t},\n\tSELECT: createRegistryControl(\n\t\t( registry ) => ( { storeKey, selectorName, args } ) => {\n\t\t\treturn registry[\n\t\t\t\tregistry.select( storeKey )[ selectorName ].hasResolver\n\t\t\t\t\t? '__experimentalResolveSelect'\n\t\t\t\t\t: 'select'\n\t\t\t]( storeKey )[ selectorName ]( ...args );\n\t\t}\n\t),\n\tSYNC_SELECT: createRegistryControl(\n\t\t( registry ) => ( { storeKey, selectorName, args } ) => {\n\t\t\treturn registry.select( storeKey )[ selectorName ]( ...args );\n\t\t}\n\t),\n\tDISPATCH: createRegistryControl(\n\t\t( registry ) => ( { storeKey, actionName, args } ) => {\n\t\t\treturn registry.dispatch( storeKey )[ actionName ]( ...args );\n\t\t}\n\t),\n};\n"]}