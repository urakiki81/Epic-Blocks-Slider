{"version":3,"sources":["@wordpress/editor/src/store/reducer.js"],"names":["getPostRawValue","value","raw","hasSameKeys","a","b","isUpdatingSamePostProperty","action","previousAction","type","edits","shouldOverwriteState","shouldCreateUndoLevel","postId","state","post","id","postType","template","isValid","preferences","PREFERENCES_DEFAULTS","isPublishSidebarEnabled","saving","pending","options","postLock","isLocked","lock","postSavingLock","lockName","postAutosavingLock","reusableBlocks","data","results","changes","updatedId","isFetching","isSaving","isReady","editorSettings","EDITOR_SETTINGS_DEFAULTS","settings"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport optimist from 'redux-optimist';\nimport { omit, keys, isEqual, keyBy } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS, EDITOR_SETTINGS_DEFAULTS } from './defaults';\n\n/**\n * Returns a post attribute value, flattening nested rendered content using its\n * raw value in place of its original object form.\n *\n * @param {*} value Original value.\n *\n * @return {*} Raw value.\n */\nexport function getPostRawValue( value ) {\n\tif ( value && 'object' === typeof value && 'raw' in value ) {\n\t\treturn value.raw;\n\t}\n\n\treturn value;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( keys( a ), keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are editing the same post property, or\n * false otherwise.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same post property.\n */\nexport function isUpdatingSamePostProperty( action, previousAction ) {\n\treturn (\n\t\taction.type === 'EDIT_POST' &&\n\t\thasSameKeys( action.edits, previousAction.edits )\n\t);\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are modifying the same property such that\n * undo history should be batched.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether to overwrite present state.\n */\nexport function shouldOverwriteState( action, previousAction ) {\n\tif ( action.type === 'RESET_EDITOR_BLOCKS' ) {\n\t\treturn ! action.shouldCreateUndoLevel;\n\t}\n\n\tif ( ! previousAction || action.type !== previousAction.type ) {\n\t\treturn false;\n\t}\n\n\treturn isUpdatingSamePostProperty( action, previousAction );\n}\n\nexport function postId( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SETUP_EDITOR_STATE':\n\t\tcase 'RESET_POST':\n\t\tcase 'UPDATE_POST':\n\t\t\treturn action.post.id;\n\t}\n\n\treturn state;\n}\n\nexport function postType( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SETUP_EDITOR_STATE':\n\t\tcase 'RESET_POST':\n\t\tcase 'UPDATE_POST':\n\t\t\treturn action.post.type;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object}  state                 Current state.\n * @param {Object}  action                Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENABLE_PUBLISH_SIDEBAR':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisPublishSidebarEnabled: true,\n\t\t\t};\n\n\t\tcase 'DISABLE_PUBLISH_SIDEBAR':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisPublishSidebarEnabled: false,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning current network request state (whether a request to\n * the WP REST API is in progress, successful, or failed).\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function saving( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'REQUEST_POST_UPDATE_START':\n\t\tcase 'REQUEST_POST_UPDATE_FINISH':\n\t\t\treturn {\n\t\t\t\tpending: action.type === 'REQUEST_POST_UPDATE_START',\n\t\t\t\toptions: action.options || {},\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Post Lock State.\n *\n * @typedef {Object} PostLockState\n *\n * @property {boolean} isLocked       Whether the post is locked.\n * @property {?boolean} isTakeover     Whether the post editing has been taken over.\n * @property {?boolean} activePostLock Active post lock value.\n * @property {?Object}  user           User that took over the post.\n */\n\n/**\n * Reducer returning the post lock status.\n *\n * @param {PostLockState} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {PostLockState} Updated state.\n */\nexport function postLock( state = { isLocked: false }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_POST_LOCK':\n\t\t\treturn action.lock;\n\t}\n\n\treturn state;\n}\n\n/**\n * Post saving lock.\n *\n * When post saving is locked, the post cannot be published or updated.\n *\n * @param {PostLockState} state  Current state.\n * @param {Object}        action Dispatched action.\n *\n * @return {PostLockState} Updated state.\n */\nexport function postSavingLock( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'LOCK_POST_SAVING':\n\t\t\treturn { ...state, [ action.lockName ]: true };\n\n\t\tcase 'UNLOCK_POST_SAVING':\n\t\t\treturn omit( state, action.lockName );\n\t}\n\treturn state;\n}\n\n/**\n * Post autosaving lock.\n *\n * When post autosaving is locked, the post will not autosave.\n *\n * @param {PostLockState} state  Current state.\n * @param {Object}        action Dispatched action.\n *\n * @return {PostLockState} Updated state.\n */\nexport function postAutosavingLock( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'LOCK_POST_AUTOSAVING':\n\t\t\treturn { ...state, [ action.lockName ]: true };\n\n\t\tcase 'UNLOCK_POST_AUTOSAVING':\n\t\t\treturn omit( state, action.lockName );\n\t}\n\treturn state;\n}\n\nexport const reusableBlocks = combineReducers( {\n\tdata( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_REUSABLE_BLOCKS': {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...keyBy( action.results, 'id' ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'UPDATE_REUSABLE_BLOCK': {\n\t\t\t\tconst { id, changes } = action;\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t...state[ id ],\n\t\t\t\t\t\t...changes,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\tconst { id, updatedId } = action;\n\n\t\t\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\t\t\tif ( id === updatedId ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst value = state[ id ];\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, id ),\n\t\t\t\t\t[ updatedId ]: {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\tid: updatedId,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REMOVE_REUSABLE_BLOCK': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tisFetching( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS': {\n\t\t\t\tconst { id } = action;\n\t\t\t\tif ( ! id ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ id ]: true,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS_SUCCESS':\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS_FAILURE': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tisSaving( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'SAVE_REUSABLE_BLOCK':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.id ]: true,\n\t\t\t\t};\n\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS':\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_FAILURE': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning whether the editor is ready to be rendered.\n * The editor is considered ready to be rendered once\n * the post object is loaded properly and the initial blocks parsed.\n *\n * @param {boolean} state\n * @param {Object} action\n *\n * @return {boolean} Updated state.\n */\nexport function isReady( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SETUP_EDITOR_STATE':\n\t\t\treturn true;\n\n\t\tcase 'TEAR_DOWN_EDITOR':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the post editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function editorSettings( state = EDITOR_SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_EDITOR_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport default optimist(\n\tcombineReducers( {\n\t\tpostId,\n\t\tpostType,\n\t\tpreferences,\n\t\tsaving,\n\t\tpostLock,\n\t\treusableBlocks,\n\t\ttemplate,\n\t\tpostSavingLock,\n\t\tisReady,\n\t\teditorSettings,\n\t\tpostAutosavingLock,\n\t} )\n);\n"]}