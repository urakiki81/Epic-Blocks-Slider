{"version":3,"sources":["@wordpress/editor/src/store/utils/serialize-blocks.js"],"names":["serializeBlocks","blocksForSerialization","length","content","name","maxSize"],"mappings":";;;;;;;;;AAGA;;AAKA;;AAKA;;AAbA;;;;AAKA;;;;AAUA;;;;;;;AAOA,IAAMA,eAAe,GAAG,qBACvB,UAAEC,sBAAF,EAA8B;AAC7B;AACA;AACA,MACCA,sBAAsB,CAACC,MAAvB,KAAkC,CAAlC,IACA,sCAA0BD,sBAAsB,CAAE,CAAF,CAAhD,CAFD,EAGE;AACDA,IAAAA,sBAAsB,GAAG,EAAzB;AACA;;AAED,MAAIE,OAAO,GAAG,uBAAWF,sBAAX,CAAd,CAV6B,CAY7B;AACA;AACA;;AACA,MACCA,sBAAsB,CAACC,MAAvB,KAAkC,CAAlC,IACAD,sBAAsB,CAAE,CAAF,CAAtB,CAA4BG,IAA5B,KAAqC,4CAFtC,EAGE;AACDD,IAAAA,OAAO,GAAG,oBAASA,OAAT,CAAV;AACA;;AAED,SAAOA,OAAP;AACA,CAxBsB,EAyBvB;AAAEE,EAAAA,OAAO,EAAE;AAAX,CAzBuB,CAAxB;eA4BeL,e","sourcesContent":["/**\n * External dependencies\n */\nimport memoize from 'memize';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tisUnmodifiedDefaultBlock,\n\tserialize,\n\tgetFreeformContentHandlerName,\n} from '@wordpress/blocks';\nimport { removep } from '@wordpress/autop';\n\n/**\n * Serializes blocks following backwards compatibility conventions.\n *\n * @param {Array} blocksForSerialization The blocks to serialize.\n *\n * @return {string} The blocks serialization.\n */\nconst serializeBlocks = memoize(\n\t( blocksForSerialization ) => {\n\t\t// A single unmodified default block is assumed to\n\t\t// be equivalent to an empty post.\n\t\tif (\n\t\t\tblocksForSerialization.length === 1 &&\n\t\t\tisUnmodifiedDefaultBlock( blocksForSerialization[ 0 ] )\n\t\t) {\n\t\t\tblocksForSerialization = [];\n\t\t}\n\n\t\tlet content = serialize( blocksForSerialization );\n\n\t\t// For compatibility, treat a post consisting of a\n\t\t// single freeform block as legacy content and apply\n\t\t// pre-block-editor removep'd content formatting.\n\t\tif (\n\t\t\tblocksForSerialization.length === 1 &&\n\t\t\tblocksForSerialization[ 0 ].name === getFreeformContentHandlerName()\n\t\t) {\n\t\t\tcontent = removep( content );\n\t\t}\n\n\t\treturn content;\n\t},\n\t{ maxSize: 1 }\n);\n\nexport default serializeBlocks;\n"]}