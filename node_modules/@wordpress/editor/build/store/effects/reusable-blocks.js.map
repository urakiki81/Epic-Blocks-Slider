{"version":3,"sources":["@wordpress/editor/src/store/effects/reusable-blocks.js"],"names":["REUSABLE_BLOCK_NOTICE_ID","fetchReusableBlocks","action","store","id","dispatch","path","postType","rest_base","posts","results","post","status","content","protected","raw","title","length","type","error","saveReusableBlocks","state","getState","isTemporary","data","method","updatedReusableBlock","updatedId","message","createSuccessNotice","__unstableSaveReusableBlock","createErrorNotice","deleteReusableBlocks","reusableBlock","allBlocks","getBlocks","associatedBlocks","filter","block","attributes","ref","associatedBlockClientIds","map","clientId","transactionId","optimist","BEGIN","removeBlocks","COMMIT","REVERT","convertBlockToStatic","oldBlock","getBlock","newBlocks","replaceBlocks","convertBlockToReusable","getBlocksByClientId","clientIds"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { compact, map, uniqueId } from 'lodash';\nimport { BEGIN, COMMIT, REVERT } from 'redux-optimist';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport {\n\tparse,\n\tserialize,\n\tcreateBlock,\n\tisReusableBlock,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n// TODO: Ideally this would be the only dispatch in scope. This requires either\n// refactoring editor actions to yielded controls, or replacing direct dispatch\n// on the editor store with action creators (e.g. `REMOVE_REUSABLE_BLOCK`).\nimport { dispatch as dataDispatch, select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\t__experimentalReceiveReusableBlocks as receiveReusableBlocksAction,\n\t__experimentalSaveReusableBlock as saveReusableBlock,\n} from '../actions';\nimport { __experimentalGetReusableBlock as getReusableBlock } from '../selectors';\n\n/**\n * Module Constants\n */\nconst REUSABLE_BLOCK_NOTICE_ID = 'REUSABLE_BLOCK_NOTICE_ID';\n\n/**\n * Fetch Reusable blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const fetchReusableBlocks = async ( action, store ) => {\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tlet posts;\n\n\t\tif ( id ) {\n\t\t\tposts = [\n\t\t\t\tawait apiFetch( {\n\t\t\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ id }`,\n\t\t\t\t} ),\n\t\t\t];\n\t\t} else {\n\t\t\tposts = await apiFetch( {\n\t\t\t\tpath: `/wp/v2/${ postType.rest_base }?per_page=-1`,\n\t\t\t} );\n\t\t}\n\n\t\tconst results = compact(\n\t\t\tmap( posts, ( post ) => {\n\t\t\t\tif ( post.status !== 'publish' || post.content.protected ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...post,\n\t\t\t\t\tcontent: post.content.raw,\n\t\t\t\t\ttitle: post.title.raw,\n\t\t\t\t};\n\t\t\t} )\n\t\t);\n\n\t\tif ( results.length ) {\n\t\t\tdispatch( receiveReusableBlocksAction( results ) );\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_SUCCESS',\n\t\t\tid,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_FAILURE',\n\t\t\tid,\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Save Reusable blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const saveReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\tconst state = store.getState();\n\tconst { title, content, isTemporary } = getReusableBlock( state, id );\n\n\tconst data = isTemporary\n\t\t? { title, content, status: 'publish' }\n\t\t: { id, title, content, status: 'publish' };\n\tconst path = isTemporary\n\t\t? `/wp/v2/${ postType.rest_base }`\n\t\t: `/wp/v2/${ postType.rest_base }/${ id }`;\n\tconst method = isTemporary ? 'POST' : 'PUT';\n\n\ttry {\n\t\tconst updatedReusableBlock = await apiFetch( { path, data, method } );\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tupdatedId: updatedReusableBlock.id,\n\t\t\tid,\n\t\t} );\n\t\tconst message = isTemporary\n\t\t\t? __( 'Block created.' )\n\t\t\t: __( 'Block updated.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t\ttype: 'snackbar',\n\t\t} );\n\n\t\tdataDispatch( 'core/block-editor' ).__unstableSaveReusableBlock(\n\t\t\tid,\n\t\t\tupdatedReusableBlock.id\n\t\t);\n\t} catch ( error ) {\n\t\tdispatch( { type: 'SAVE_REUSABLE_BLOCK_FAILURE', id } );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Delete Reusable blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const deleteReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { getState, dispatch } = store;\n\n\t// Don't allow a reusable block with a temporary ID to be deleted\n\tconst reusableBlock = getReusableBlock( getState(), id );\n\tif ( ! reusableBlock || reusableBlock.isTemporary ) {\n\t\treturn;\n\t}\n\t// Remove any other blocks that reference this reusable block\n\tconst allBlocks = select( 'core/block-editor' ).getBlocks();\n\tconst associatedBlocks = allBlocks.filter(\n\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t);\n\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t( block ) => block.clientId\n\t);\n\n\tconst transactionId = uniqueId();\n\n\tdispatch( {\n\t\ttype: 'REMOVE_REUSABLE_BLOCK',\n\t\tid,\n\t\toptimist: { type: BEGIN, id: transactionId },\n\t} );\n\n\t// Remove the parsed block.\n\tif ( associatedBlockClientIds.length ) {\n\t\tdataDispatch( 'core/block-editor' ).removeBlocks(\n\t\t\tassociatedBlockClientIds\n\t\t);\n\t}\n\n\ttry {\n\t\tawait apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tid,\n\t\t\toptimist: { type: COMMIT, id: transactionId },\n\t\t} );\n\t\tconst message = __( 'Block deleted.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t\ttype: 'snackbar',\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_FAILURE',\n\t\t\tid,\n\t\t\toptimist: { type: REVERT, id: transactionId },\n\t\t} );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToStatic = ( action, store ) => {\n\tconst state = store.getState();\n\tconst oldBlock = select( 'core/block-editor' ).getBlock( action.clientId );\n\tconst reusableBlock = getReusableBlock( state, oldBlock.attributes.ref );\n\tconst newBlocks = parse( reusableBlock.content );\n\tdataDispatch( 'core/block-editor' ).replaceBlocks(\n\t\toldBlock.clientId,\n\t\tnewBlocks\n\t);\n};\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToReusable = ( action, store ) => {\n\tconst { dispatch } = store;\n\tconst reusableBlock = {\n\t\tid: uniqueId( 'reusable' ),\n\t\ttitle: __( 'Untitled Reusable Block' ),\n\t\tcontent: serialize(\n\t\t\tselect( 'core/block-editor' ).getBlocksByClientId(\n\t\t\t\taction.clientIds\n\t\t\t)\n\t\t),\n\t};\n\n\tdispatch( receiveReusableBlocksAction( [ reusableBlock ] ) );\n\tdispatch( saveReusableBlock( reusableBlock.id ) );\n\n\tdataDispatch( 'core/block-editor' ).replaceBlocks(\n\t\taction.clientIds,\n\t\tcreateBlock( 'core/block', {\n\t\t\tref: reusableBlock.id,\n\t\t} )\n\t);\n};\n"]}