{"version":3,"sources":["@wordpress/editor/src/store/actions.js"],"names":["setupEditor","resetAutosave","editPost","savePost","refreshPost","trashPost","autosave","__experimentalLocalAutosave","redo","undo","resetEditorBlocks","post","edits","template","content","raw","blocks","isNewPost","status","resetPost","type","__unstableShouldCreateUndoLevel","setupEditorState","Object","keys","some","key","__experimentalTearDownEditor","newAutosave","alternative","plugin","STORE_KEY","postId","__experimentalRequestPostUpdateStart","options","__experimentalRequestPostUpdateFinish","updatePost","id","__experimentalOptimisticUpdatePost","optimist","POST_UPDATE_TRANSACTION_ID","isAutosave","undoIgnore","previousRecord","error","args","length","dispatch","updatedRecord","getNotificationArgumentsForSaveSuccess","previousPost","postType","postTypeSlug","path","rest_base","Date","now","newPost","TRASH_POST_NOTICE_ID","method","isPostNew","title","excerpt","createUndoLevel","updatePostLock","lock","__experimentalFetchReusableBlocks","__experimentalReceiveReusableBlocks","results","__experimentalSaveReusableBlock","__experimentalDeleteReusableBlock","__experimentalUpdateReusableBlock","changes","__experimentalConvertBlockToStatic","clientId","__experimentalConvertBlockToReusable","clientIds","enablePublishSidebar","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","lockPostAutosaving","unlockPostAutosaving","selectionStart","selectionEnd","noChange","blocksForSerialization","updateEditorSettings","settings","getBlockEditorAction","name","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","clearSelectedBlock","toggleSelection","replaceBlocks","replaceBlock","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { has, castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport {\n\tdispatch,\n\tselect,\n\t__unstableSyncSelect,\n\tapiFetch,\n} from '@wordpress/data-controls';\nimport { parse, synchronizeBlocksWithTemplate } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport {\n\tSTORE_KEY,\n\tPOST_UPDATE_TRANSACTION_ID,\n\tTRASH_POST_NOTICE_ID,\n} from './constants';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\nimport serializeBlocks from './utils/serialize-blocks';\n\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post      Post object.\n * @param {Object} edits     Initial edited attributes object.\n * @param {Array?} template  Block Template.\n */\nexport function* setupEditor( post, edits, template ) {\n\t// In order to ensure maximum of a single parse during setup, edits are\n\t// included as part of editor setup action. Assume edited content as\n\t// canonical if provided, falling back to post.\n\tlet content;\n\tif ( has( edits, [ 'content' ] ) ) {\n\t\tcontent = edits.content;\n\t} else {\n\t\tcontent = post.content.raw;\n\t}\n\n\tlet blocks = parse( content );\n\n\t// Apply a template for new posts only, if exists.\n\tconst isNewPost = post.status === 'auto-draft';\n\tif ( isNewPost && template ) {\n\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t}\n\n\tyield resetPost( post );\n\tyield {\n\t\ttype: 'SETUP_EDITOR',\n\t\tpost,\n\t\tedits,\n\t\ttemplate,\n\t};\n\tyield resetEditorBlocks( blocks, {\n\t\t__unstableShouldCreateUndoLevel: false,\n\t} );\n\tyield setupEditorState( post );\n\tif (\n\t\tedits &&\n\t\tObject.keys( edits ).some(\n\t\t\t( key ) =>\n\t\t\t\tedits[ key ] !==\n\t\t\t\t( has( post, [ key, 'raw' ] ) ? post[ key ].raw : post[ key ] )\n\t\t)\n\t) {\n\t\tyield editPost( edits );\n\t}\n}\n\n/**\n * Returns an action object signalling that the editor is being destroyed and\n * that any necessary state or side-effect cleanup should occur.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalTearDownEditor() {\n\treturn { type: 'TEAR_DOWN_EDITOR' };\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function resetPost( post ) {\n\treturn {\n\t\ttype: 'RESET_POST',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the latest autosave of the\n * post has been received, by initialization or autosave.\n *\n * @deprecated since 5.6. Callers should use the `receiveAutosaves( postId, autosave )`\n * \t\t\t   selector from the '@wordpress/core-data' package.\n *\n * @param {Object} newAutosave Autosave post object.\n *\n * @return {Object} Action object.\n */\nexport function* resetAutosave( newAutosave ) {\n\tdeprecated( 'resetAutosave action (`core/editor` store)', {\n\t\talternative: 'receiveAutosaves action (`core` store)',\n\t\tplugin: 'Gutenberg',\n\t} );\n\n\tconst postId = yield select( STORE_KEY, 'getCurrentPostId' );\n\tyield dispatch( 'core', 'receiveAutosaves', postId, newAutosave );\n\n\treturn { type: '__INERT__' };\n}\n\n/**\n * Action for dispatching that a post update request has started.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateStart( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_START',\n\t\toptions,\n\t};\n}\n\n/**\n * Action for dispatching that a post update request has finished.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateFinish( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_FINISH',\n\t\toptions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @param {Object} edits Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function updatePost( edits ) {\n\treturn {\n\t\ttype: 'UPDATE_POST',\n\t\tedits,\n\t};\n}\n\n/**\n * Returns an action object used to setup the editor state when first opening\n * an editor.\n *\n * @param {Object} post   Post object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditorState( post ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR_STATE',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits   Post attributes to edit.\n * @param {Object} options Options for the edit.\n *\n * @yield {Object} Action object or control.\n */\nexport function* editPost( edits, options ) {\n\tconst { id, type } = yield select( STORE_KEY, 'getCurrentPost' );\n\tyield dispatch(\n\t\t'core',\n\t\t'editEntityRecord',\n\t\t'postType',\n\t\ttype,\n\t\tid,\n\t\tedits,\n\t\toptions\n\t);\n}\n\n/**\n * Returns action object produced by the updatePost creator augmented by\n * an optimist option that signals optimistically applying updates.\n *\n * @param {Object} edits  Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalOptimisticUpdatePost( edits ) {\n\treturn {\n\t\t...updatePost( edits ),\n\t\toptimist: { id: POST_UPDATE_TRANSACTION_ID },\n\t};\n}\n\n/**\n * Action generator for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport function* savePost( options = {} ) {\n\tif ( ! ( yield select( STORE_KEY, 'isEditedPostSaveable' ) ) ) {\n\t\treturn;\n\t}\n\tlet edits = {\n\t\tcontent: yield select( STORE_KEY, 'getEditedPostContent' ),\n\t};\n\tif ( ! options.isAutosave ) {\n\t\tyield dispatch( STORE_KEY, 'editPost', edits, { undoIgnore: true } );\n\t}\n\n\tyield __experimentalRequestPostUpdateStart( options );\n\tconst previousRecord = yield select( STORE_KEY, 'getCurrentPost' );\n\tedits = {\n\t\tid: previousRecord.id,\n\t\t...( yield select(\n\t\t\t'core',\n\t\t\t'getEntityRecordNonTransientEdits',\n\t\t\t'postType',\n\t\t\tpreviousRecord.type,\n\t\t\tpreviousRecord.id\n\t\t) ),\n\t\t...edits,\n\t};\n\tyield dispatch(\n\t\t'core',\n\t\t'saveEntityRecord',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tedits,\n\t\toptions\n\t);\n\tyield __experimentalRequestPostUpdateFinish( options );\n\n\tconst error = yield select(\n\t\t'core',\n\t\t'getLastEntitySaveError',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tpreviousRecord.id\n\t);\n\tif ( error ) {\n\t\tconst args = getNotificationArgumentsForSaveFail( {\n\t\t\tpost: previousRecord,\n\t\t\tedits,\n\t\t\terror,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield dispatch( 'core/notices', 'createErrorNotice', ...args );\n\t\t}\n\t} else {\n\t\tconst updatedRecord = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tconst args = getNotificationArgumentsForSaveSuccess( {\n\t\t\tpreviousPost: previousRecord,\n\t\t\tpost: updatedRecord,\n\t\t\tpostType: yield select( 'core', 'getPostType', updatedRecord.type ),\n\t\t\toptions,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield dispatch( 'core/notices', 'createSuccessNotice', ...args );\n\t\t}\n\t\t// Make sure that any edits after saving create an undo level and are\n\t\t// considered for change detection.\n\t\tif ( ! options.isAutosave ) {\n\t\t\tyield dispatch(\n\t\t\t\t'core/block-editor',\n\t\t\t\t'__unstableMarkLastChangeAsPersistent'\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * Action generator for handling refreshing the current post.\n */\nexport function* refreshPost() {\n\tconst post = yield select( STORE_KEY, 'getCurrentPost' );\n\tconst postTypeSlug = yield select( STORE_KEY, 'getCurrentPostType' );\n\tconst postType = yield select( 'core', 'getPostType', postTypeSlug );\n\tconst newPost = yield apiFetch( {\n\t\t// Timestamp arg allows caller to bypass browser caching, which is\n\t\t// expected for this specific function.\n\t\tpath:\n\t\t\t`/wp/v2/${ postType.rest_base }/${ post.id }` +\n\t\t\t`?context=edit&_timestamp=${ Date.now() }`,\n\t} );\n\tyield dispatch( STORE_KEY, 'resetPost', newPost );\n}\n\n/**\n * Action generator for trashing the current post in the editor.\n */\nexport function* trashPost() {\n\tconst postTypeSlug = yield select( STORE_KEY, 'getCurrentPostType' );\n\tconst postType = yield select( 'core', 'getPostType', postTypeSlug );\n\tyield dispatch( 'core/notices', 'removeNotice', TRASH_POST_NOTICE_ID );\n\ttry {\n\t\tconst post = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tyield apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\n\t\tyield dispatch( STORE_KEY, 'savePost' );\n\t} catch ( error ) {\n\t\tyield dispatch(\n\t\t\t'core/notices',\n\t\t\t'createErrorNotice',\n\t\t\t...getNotificationArgumentsForTrashFail( { error } )\n\t\t);\n\t}\n}\n\n/**\n * Action generator used in signalling that the post should autosave.\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport function* autosave( options ) {\n\tyield dispatch( STORE_KEY, 'savePost', { isAutosave: true, ...options } );\n}\n\nexport function* __experimentalLocalAutosave() {\n\tconst post = yield select( STORE_KEY, 'getCurrentPost' );\n\tconst isPostNew = yield select( STORE_KEY, 'isEditedPostNew' );\n\tconst title = yield select( STORE_KEY, 'getEditedPostAttribute', 'title' );\n\tconst content = yield select(\n\t\tSTORE_KEY,\n\t\t'getEditedPostAttribute',\n\t\t'content'\n\t);\n\tconst excerpt = yield select(\n\t\tSTORE_KEY,\n\t\t'getEditedPostAttribute',\n\t\t'excerpt'\n\t);\n\tyield {\n\t\ttype: 'LOCAL_AUTOSAVE_SET',\n\t\tpostId: post.id,\n\t\tisPostNew,\n\t\ttitle,\n\t\tcontent,\n\t\texcerpt,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that undo history should\n * restore last popped state.\n *\n * @yield {Object} Action object.\n */\nexport function* redo() {\n\tyield dispatch( 'core', 'redo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history should pop.\n *\n * @yield {Object} Action object.\n */\nexport function* undo() {\n\tyield dispatch( 'core', 'undo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history record should\n * be created.\n *\n * @return {Object} Action object.\n */\nexport function createUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Returns an action object used to lock the editor.\n *\n * @param {Object}  lock Details about the post lock status, user, and nonce.\n *\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Returns an action object used to fetch a single reusable block or all\n * reusable blocks from the REST API into the store.\n *\n * @param {?string} id If given, only a single reusable block with this ID will\n *                     be fetched.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalFetchReusableBlocks( id ) {\n\treturn {\n\t\ttype: 'FETCH_REUSABLE_BLOCKS',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that reusable blocks have been\n * received. `results` is an array of objects containing:\n *  - `reusableBlock` - Details about how the reusable block is persisted.\n *  - `parsedBlock` - The original block.\n *\n * @param {Object[]} results Reusable blocks received.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveReusableBlocks( results ) {\n\treturn {\n\t\ttype: 'RECEIVE_REUSABLE_BLOCKS',\n\t\tresults,\n\t};\n}\n\n/**\n * Returns an action object used to save a reusable block that's in the store to\n * the REST API.\n *\n * @param {Object} id The ID of the reusable block to save.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalSaveReusableBlock( id ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used to delete a reusable block via the REST API.\n *\n * @param {number} id The ID of the reusable block to delete.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalDeleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a reusable block is\n * to be updated.\n *\n * @param {number} id      The ID of the reusable block to update.\n * @param {Object} changes The changes to apply.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalUpdateReusableBlock( id, changes ) {\n\treturn {\n\t\ttype: 'UPDATE_REUSABLE_BLOCK',\n\t\tid,\n\t\tchanges,\n\t};\n}\n\n/**\n * Returns an action object used to convert a reusable block into a static\n * block.\n *\n * @param {string} clientId The client ID of the block to attach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used to convert a static block into a reusable\n * block.\n *\n * @param {string} clientIds The client IDs of the block to detach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToReusable( clientIds ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_REUSABLE',\n\t\tclientIds: castArray( clientIds ),\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has enabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function enablePublishSidebar() {\n\treturn {\n\t\ttype: 'ENABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has disabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function disablePublishSidebar() {\n\treturn {\n\t\ttype: 'DISABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * const { subscribe } = wp.data;\n *\n * const initialPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n *\n * // Only allow publishing posts that are set to a future date.\n * if ( 'publish' !== initialPostStatus ) {\n *\n * \t// Track locking.\n * \tlet locked = false;\n *\n * \t// Watch for the publish event.\n * \tlet unssubscribe = subscribe( () => {\n * \t\tconst currentPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n * \t\tif ( 'publish' !== currentPostStatus ) {\n *\n * \t\t\t// Compare the post date to the current date, lock the post if the date isn't in the future.\n * \t\t\tconst postDate = new Date( wp.data.select( 'core/editor' ).getEditedPostAttribute( 'date' ) );\n * \t\t\tconst currentDate = new Date();\n * \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n * \t\t\t\tif ( ! locked ) {\n * \t\t\t\t\tlocked = true;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).lockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t} else {\n * \t\t\t\tif ( locked ) {\n * \t\t\t\t\tlocked = false;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).unlockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t}\n * \t\t}\n * \t} );\n * }\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post autosaving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Lock post autosaving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).lockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post autosaving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n *\n * @yield {Object} Action object\n */\nexport function* resetEditorBlocks( blocks, options = {} ) {\n\tconst {\n\t\t__unstableShouldCreateUndoLevel,\n\t\tselectionStart,\n\t\tselectionEnd,\n\t} = options;\n\tconst edits = { blocks, selectionStart, selectionEnd };\n\n\tif ( __unstableShouldCreateUndoLevel !== false ) {\n\t\tconst { id, type } = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tconst noChange =\n\t\t\t( yield __unstableSyncSelect(\n\t\t\t\t'core',\n\t\t\t\t'getEditedEntityRecord',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t) ).blocks === edits.blocks;\n\t\tif ( noChange ) {\n\t\t\treturn yield dispatch(\n\t\t\t\t'core',\n\t\t\t\t'__unstableCreateUndoLevel',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t);\n\t\t}\n\n\t\t// We create a new function here on every persistent edit\n\t\t// to make sure the edit makes the post dirty and creates\n\t\t// a new undo level.\n\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\tserializeBlocks( blocksForSerialization );\n\t}\n\tyield* editPost( edits );\n}\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction = ( name ) =>\n\tfunction* ( ...args ) {\n\t\tdeprecated( \"`wp.data.dispatch( 'core/editor' ).\" + name + '`', {\n\t\t\talternative:\n\t\t\t\t\"`wp.data.dispatch( 'core/block-editor' ).\" + name + '`',\n\t\t} );\n\t\tyield dispatch( 'core/block-editor', name, ...args );\n\t};\n\n/**\n * @see resetBlocks in core/block-editor store.\n */\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\n\n/**\n * @see receiveBlocks in core/block-editor store.\n */\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\n\n/**\n * @see updateBlock in core/block-editor store.\n */\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\n\n/**\n * @see updateBlockAttributes in core/block-editor store.\n */\nexport const updateBlockAttributes = getBlockEditorAction(\n\t'updateBlockAttributes'\n);\n\n/**\n * @see selectBlock in core/block-editor store.\n */\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\n\n/**\n * @see startMultiSelect in core/block-editor store.\n */\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\n\n/**\n * @see stopMultiSelect in core/block-editor store.\n */\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\n\n/**\n * @see multiSelect in core/block-editor store.\n */\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\n\n/**\n * @see clearSelectedBlock in core/block-editor store.\n */\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\n\n/**\n * @see toggleSelection in core/block-editor store.\n */\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\n\n/**\n * @see replaceBlocks in core/block-editor store.\n */\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\n\n/**\n * @see replaceBlock in core/block-editor store.\n */\nexport const replaceBlock = getBlockEditorAction( 'replaceBlock' );\n\n/**\n * @see moveBlocksDown in core/block-editor store.\n */\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\n\n/**\n * @see moveBlocksUp in core/block-editor store.\n */\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\n\n/**\n * @see moveBlockToPosition in core/block-editor store.\n */\nexport const moveBlockToPosition = getBlockEditorAction(\n\t'moveBlockToPosition'\n);\n\n/**\n * @see insertBlock in core/block-editor store.\n */\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\n\n/**\n * @see insertBlocks in core/block-editor store.\n */\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\n\n/**\n * @see showInsertionPoint in core/block-editor store.\n */\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\n\n/**\n * @see hideInsertionPoint in core/block-editor store.\n */\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\n\n/**\n * @see setTemplateValidity in core/block-editor store.\n */\nexport const setTemplateValidity = getBlockEditorAction(\n\t'setTemplateValidity'\n);\n\n/**\n * @see synchronizeTemplate in core/block-editor store.\n */\nexport const synchronizeTemplate = getBlockEditorAction(\n\t'synchronizeTemplate'\n);\n\n/**\n * @see mergeBlocks in core/block-editor store.\n */\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\n\n/**\n * @see removeBlocks in core/block-editor store.\n */\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\n\n/**\n * @see removeBlock in core/block-editor store.\n */\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\n\n/**\n * @see toggleBlockMode in core/block-editor store.\n */\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\n\n/**\n * @see startTyping in core/block-editor store.\n */\nexport const startTyping = getBlockEditorAction( 'startTyping' );\n\n/**\n * @see stopTyping in core/block-editor store.\n */\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\n\n/**\n * @see enterFormattedText in core/block-editor store.\n */\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\n\n/**\n * @see exitFormattedText in core/block-editor store.\n */\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\n\n/**\n * @see insertDefaultBlock in core/block-editor store.\n */\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\n\n/**\n * @see updateBlockListSettings in core/block-editor store.\n */\nexport const updateBlockListSettings = getBlockEditorAction(\n\t'updateBlockListSettings'\n);\n"]}