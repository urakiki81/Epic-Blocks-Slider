{"version":3,"sources":["@wordpress/editor/src/components/post-publish-button/index.js"],"names":["PostPublishButton","props","buttonNode","createOnClick","bind","closeEntitiesSavedStates","state","entitiesSavedStatesCallback","focusOnMount","current","focus","callback","args","hasNonPostEntityChanges","setState","setEntitiesSavedStatesCallback","noop","savedEntities","postType","postId","elt","kind","name","key","forceIsDirty","forceIsSaving","hasPublishAction","isBeingScheduled","isOpen","isPostSavingLocked","isPublishable","isPublished","isSaveable","isSaving","isToggle","onSave","onStatusChange","onSubmit","onToggle","visibility","isButtonDisabled","isToggleDisabled","publishStatus","onClickButton","onClickToggle","buttonProps","className","isBusy","isPrimary","onClick","toggleProps","toggleChildren","buttonChildren","componentProps","componentChildren","Component","select","isSavingPost","isEditedPostBeingScheduled","getEditedPostVisibility","isCurrentPostPublished","isEditedPostSaveable","isEditedPostPublishable","getCurrentPost","getCurrentPostType","getCurrentPostId","dispatch","editPost","savePost","status","undoIgnore"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { noop, get, some } from 'lodash';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { Button } from '@wordpress/components';\nimport { Component, createRef } from '@wordpress/element';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport PublishButtonLabel from './label';\n\nexport class PostPublishButton extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.buttonNode = createRef();\n\n\t\tthis.createOnClick = this.createOnClick.bind( this );\n\t\tthis.closeEntitiesSavedStates = this.closeEntitiesSavedStates.bind(\n\t\t\tthis\n\t\t);\n\n\t\tthis.state = {\n\t\t\tentitiesSavedStatesCallback: false,\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tif ( this.props.focusOnMount ) {\n\t\t\tthis.buttonNode.current.focus();\n\t\t}\n\t}\n\n\tcreateOnClick( callback ) {\n\t\treturn ( ...args ) => {\n\t\t\tconst { hasNonPostEntityChanges } = this.props;\n\t\t\tif ( hasNonPostEntityChanges ) {\n\t\t\t\t// The modal for multiple entity saving will open,\n\t\t\t\t// hold the callback for saving/publishing the post\n\t\t\t\t// so that we can call it if the post entity is checked.\n\t\t\t\tthis.setState( {\n\t\t\t\t\tentitiesSavedStatesCallback: () => callback( ...args ),\n\t\t\t\t} );\n\t\t\t\t// Open the save panel by setting its callback.\n\t\t\t\t// To set a function on the useState hook, we must set it\n\t\t\t\t// with another function (() => myFunction). Passing the\n\t\t\t\t// function on its own will cause an error when called.\n\t\t\t\tthis.props.setEntitiesSavedStatesCallback(\n\t\t\t\t\t() => this.closeEntitiesSavedStates\n\t\t\t\t);\n\t\t\t\treturn noop;\n\t\t\t}\n\n\t\t\treturn callback( ...args );\n\t\t};\n\t}\n\n\tcloseEntitiesSavedStates( savedEntities ) {\n\t\tconst { postType, postId } = this.props;\n\t\tconst { entitiesSavedStatesCallback } = this.state;\n\t\tthis.setState( { entitiesSavedStatesCallback: false }, () => {\n\t\t\tif (\n\t\t\t\tsavedEntities &&\n\t\t\t\tsome(\n\t\t\t\t\tsavedEntities,\n\t\t\t\t\t( elt ) =>\n\t\t\t\t\t\telt.kind === 'postType' &&\n\t\t\t\t\t\telt.name === postType &&\n\t\t\t\t\t\telt.key === postId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// The post entity was checked, call the held callback from `createOnClick`.\n\t\t\t\tentitiesSavedStatesCallback();\n\t\t\t}\n\t\t} );\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tforceIsDirty,\n\t\t\tforceIsSaving,\n\t\t\thasPublishAction,\n\t\t\tisBeingScheduled,\n\t\t\tisOpen,\n\t\t\tisPostSavingLocked,\n\t\t\tisPublishable,\n\t\t\tisPublished,\n\t\t\tisSaveable,\n\t\t\tisSaving,\n\t\t\tisToggle,\n\t\t\tonSave,\n\t\t\tonStatusChange,\n\t\t\tonSubmit = noop,\n\t\t\tonToggle,\n\t\t\tvisibility,\n\t\t\thasNonPostEntityChanges,\n\t\t} = this.props;\n\n\t\tconst isButtonDisabled =\n\t\t\tisSaving ||\n\t\t\tforceIsSaving ||\n\t\t\t! isSaveable ||\n\t\t\tisPostSavingLocked ||\n\t\t\t( ! isPublishable && ! forceIsDirty );\n\n\t\tconst isToggleDisabled =\n\t\t\tisPublished ||\n\t\t\tisSaving ||\n\t\t\tforceIsSaving ||\n\t\t\t! isSaveable ||\n\t\t\t( ! isPublishable && ! forceIsDirty );\n\n\t\tlet publishStatus;\n\t\tif ( ! hasPublishAction ) {\n\t\t\tpublishStatus = 'pending';\n\t\t} else if ( visibility === 'private' ) {\n\t\t\tpublishStatus = 'private';\n\t\t} else if ( isBeingScheduled ) {\n\t\t\tpublishStatus = 'future';\n\t\t} else {\n\t\t\tpublishStatus = 'publish';\n\t\t}\n\n\t\tconst onClickButton = () => {\n\t\t\tif ( isButtonDisabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tonSubmit();\n\t\t\tonStatusChange( publishStatus );\n\t\t\tonSave();\n\t\t};\n\n\t\tconst onClickToggle = () => {\n\t\t\tif ( isToggleDisabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tonToggle();\n\t\t};\n\n\t\tconst buttonProps = {\n\t\t\t'aria-disabled': isButtonDisabled && ! hasNonPostEntityChanges,\n\t\t\tclassName: 'editor-post-publish-button',\n\t\t\tisBusy: isSaving && isPublished,\n\t\t\tisPrimary: true,\n\t\t\tonClick: this.createOnClick( onClickButton ),\n\t\t};\n\n\t\tconst toggleProps = {\n\t\t\t'aria-disabled': isToggleDisabled && ! hasNonPostEntityChanges,\n\t\t\t'aria-expanded': isOpen,\n\t\t\tclassName: 'editor-post-publish-panel__toggle',\n\t\t\tisBusy: isSaving && isPublished,\n\t\t\tisPrimary: true,\n\t\t\tonClick: this.createOnClick( onClickToggle ),\n\t\t};\n\n\t\tconst toggleChildren = isBeingScheduled\n\t\t\t? __( 'Schedule…' )\n\t\t\t: __( 'Publish' );\n\t\tconst buttonChildren = (\n\t\t\t<PublishButtonLabel\n\t\t\t\tforceIsSaving={ forceIsSaving }\n\t\t\t\thasNonPostEntityChanges={ hasNonPostEntityChanges }\n\t\t\t/>\n\t\t);\n\n\t\tconst componentProps = isToggle ? toggleProps : buttonProps;\n\t\tconst componentChildren = isToggle ? toggleChildren : buttonChildren;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Button\n\t\t\t\t\tref={ this.buttonNode }\n\t\t\t\t\t{ ...componentProps }\n\t\t\t\t\tclassName={ classnames(\n\t\t\t\t\t\tcomponentProps.className,\n\t\t\t\t\t\t'editor-post-publish-button__button',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'has-changes-dot': hasNonPostEntityChanges,\n\t\t\t\t\t\t}\n\t\t\t\t\t) }\n\t\t\t\t>\n\t\t\t\t\t{ componentChildren }\n\t\t\t\t</Button>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default compose( [\n\twithSelect( ( select ) => {\n\t\tconst {\n\t\t\tisSavingPost,\n\t\t\tisEditedPostBeingScheduled,\n\t\t\tgetEditedPostVisibility,\n\t\t\tisCurrentPostPublished,\n\t\t\tisEditedPostSaveable,\n\t\t\tisEditedPostPublishable,\n\t\t\tisPostSavingLocked,\n\t\t\tgetCurrentPost,\n\t\t\tgetCurrentPostType,\n\t\t\tgetCurrentPostId,\n\t\t\thasNonPostEntityChanges,\n\t\t} = select( 'core/editor' );\n\t\treturn {\n\t\t\tisSaving: isSavingPost(),\n\t\t\tisBeingScheduled: isEditedPostBeingScheduled(),\n\t\t\tvisibility: getEditedPostVisibility(),\n\t\t\tisSaveable: isEditedPostSaveable(),\n\t\t\tisPostSavingLocked: isPostSavingLocked(),\n\t\t\tisPublishable: isEditedPostPublishable(),\n\t\t\tisPublished: isCurrentPostPublished(),\n\t\t\thasPublishAction: get(\n\t\t\t\tgetCurrentPost(),\n\t\t\t\t[ '_links', 'wp:action-publish' ],\n\t\t\t\tfalse\n\t\t\t),\n\t\t\tpostType: getCurrentPostType(),\n\t\t\tpostId: getCurrentPostId(),\n\t\t\thasNonPostEntityChanges: hasNonPostEntityChanges(),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { editPost, savePost } = dispatch( 'core/editor' );\n\t\treturn {\n\t\t\tonStatusChange: ( status ) =>\n\t\t\t\teditPost( { status }, { undoIgnore: true } ),\n\t\t\tonSave: savePost,\n\t\t};\n\t} ),\n] )( PostPublishButton );\n"]}