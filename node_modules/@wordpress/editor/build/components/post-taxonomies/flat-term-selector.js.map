{"version":3,"sources":["@wordpress/editor/src/components/post-taxonomies/flat-term-selector.js"],"names":["MAX_TERMS_SUGGESTIONS","DEFAULT_QUERY","per_page","orderby","order","_fields","unescapeString","arg","replace","isSameTermName","termA","termB","toLowerCase","unescapeTerm","term","name","unescapeTerms","terms","FlatTermSelector","arguments","onChange","bind","searchTerms","findOrCreateTerm","state","loading","props","availableTerms","selectedTerms","initRequest","fetchTerms","include","join","then","setState","xhr","statusText","searchRequest","prevProps","updateSelectedTerms","params","taxonomy","query","request","path","rest_base","concat","filter","availableTerm","id","reduce","accumulator","termId","termObject","push","termName","termNameEscaped","method","data","catch","error","errorCode","code","addRequest","search","searchResult","result","Promise","reject","termNames","uniqueTerms","newTermNames","termNamesToIds","names","map","length","onUpdateTerms","all","newTerms","newAvailableTerms","slug","hasAssignAction","newTermLabel","singularName","termAddedLabel","termRemovedLabel","removeTermLabel","added","removed","remove","Component","select","getCurrentPost","getTaxonomy","hasCreateAction","getEditedPostAttribute","dispatch","restBase","editPost"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tescape as escapeString,\n\tfind,\n\tget,\n\tinvoke,\n\tisEmpty,\n\tmap,\n\tthrottle,\n\tunescape as lodashUnescapeString,\n\tuniqBy,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __, _x, sprintf } from '@wordpress/i18n';\nimport { Component } from '@wordpress/element';\nimport { FormTokenField, withFilters } from '@wordpress/components';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Module constants\n */\nconst MAX_TERMS_SUGGESTIONS = 20;\nconst DEFAULT_QUERY = {\n\tper_page: MAX_TERMS_SUGGESTIONS,\n\torderby: 'count',\n\torder: 'desc',\n\t_fields: 'id,name',\n};\n\n// Lodash unescape function handles &#39; but not &#039; which may be return in some API requests.\nconst unescapeString = ( arg ) => {\n\treturn lodashUnescapeString( arg.replace( '&#039;', \"'\" ) );\n};\nconst isSameTermName = ( termA, termB ) =>\n\tunescapeString( termA ).toLowerCase() ===\n\tunescapeString( termB ).toLowerCase();\n\n/**\n * Returns a term object with name unescaped.\n * The unescape of the name property is done using lodash unescape function.\n *\n * @param {Object} term The term object to unescape.\n *\n * @return {Object} Term object with name property unescaped.\n */\nconst unescapeTerm = ( term ) => {\n\treturn {\n\t\t...term,\n\t\tname: unescapeString( term.name ),\n\t};\n};\n\n/**\n * Returns an array of term objects with names unescaped.\n * The unescape of each term is performed using the unescapeTerm function.\n *\n * @param {Object[]} terms Array of term objects to unescape.\n *\n * @return {Object[]} Array of term objects unescaped.\n */\nconst unescapeTerms = ( terms ) => {\n\treturn map( terms, unescapeTerm );\n};\n\nclass FlatTermSelector extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\t\tthis.onChange = this.onChange.bind( this );\n\t\tthis.searchTerms = throttle( this.searchTerms.bind( this ), 500 );\n\t\tthis.findOrCreateTerm = this.findOrCreateTerm.bind( this );\n\t\tthis.state = {\n\t\t\tloading: ! isEmpty( this.props.terms ),\n\t\t\tavailableTerms: [],\n\t\t\tselectedTerms: [],\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tif ( ! isEmpty( this.props.terms ) ) {\n\t\t\tthis.initRequest = this.fetchTerms( {\n\t\t\t\tinclude: this.props.terms.join( ',' ),\n\t\t\t\tper_page: -1,\n\t\t\t} );\n\t\t\tthis.initRequest.then(\n\t\t\t\t() => {\n\t\t\t\t\tthis.setState( { loading: false } );\n\t\t\t\t},\n\t\t\t\t( xhr ) => {\n\t\t\t\t\tif ( xhr.statusText === 'abort' ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.setState( {\n\t\t\t\t\t\tloading: false,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tinvoke( this.initRequest, [ 'abort' ] );\n\t\tinvoke( this.searchRequest, [ 'abort' ] );\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tif ( prevProps.terms !== this.props.terms ) {\n\t\t\tthis.updateSelectedTerms( this.props.terms );\n\t\t}\n\t}\n\n\tfetchTerms( params = {} ) {\n\t\tconst { taxonomy } = this.props;\n\t\tconst query = { ...DEFAULT_QUERY, ...params };\n\t\tconst request = apiFetch( {\n\t\t\tpath: addQueryArgs( `/wp/v2/${ taxonomy.rest_base }`, query ),\n\t\t} );\n\t\trequest.then( unescapeTerms ).then( ( terms ) => {\n\t\t\tthis.setState( ( state ) => ( {\n\t\t\t\tavailableTerms: state.availableTerms.concat(\n\t\t\t\t\tterms.filter(\n\t\t\t\t\t\t( term ) =>\n\t\t\t\t\t\t\t! find(\n\t\t\t\t\t\t\t\tstate.availableTerms,\n\t\t\t\t\t\t\t\t( availableTerm ) =>\n\t\t\t\t\t\t\t\t\tavailableTerm.id === term.id\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t} ) );\n\t\t\tthis.updateSelectedTerms( this.props.terms );\n\t\t} );\n\n\t\treturn request;\n\t}\n\n\tupdateSelectedTerms( terms = [] ) {\n\t\tconst selectedTerms = terms.reduce( ( accumulator, termId ) => {\n\t\t\tconst termObject = find(\n\t\t\t\tthis.state.availableTerms,\n\t\t\t\t( term ) => term.id === termId\n\t\t\t);\n\t\t\tif ( termObject ) {\n\t\t\t\taccumulator.push( termObject.name );\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\tthis.setState( {\n\t\t\tselectedTerms,\n\t\t} );\n\t}\n\n\tfindOrCreateTerm( termName ) {\n\t\tconst { taxonomy } = this.props;\n\t\tconst termNameEscaped = escapeString( termName );\n\t\t// Tries to create a term or fetch it if it already exists.\n\t\treturn apiFetch( {\n\t\t\tpath: `/wp/v2/${ taxonomy.rest_base }`,\n\t\t\tmethod: 'POST',\n\t\t\tdata: { name: termNameEscaped },\n\t\t} )\n\t\t\t.catch( ( error ) => {\n\t\t\t\tconst errorCode = error.code;\n\t\t\t\tif ( errorCode === 'term_exists' ) {\n\t\t\t\t\t// If the terms exist, fetch it instead of creating a new one.\n\t\t\t\t\tthis.addRequest = apiFetch( {\n\t\t\t\t\t\tpath: addQueryArgs( `/wp/v2/${ taxonomy.rest_base }`, {\n\t\t\t\t\t\t\t...DEFAULT_QUERY,\n\t\t\t\t\t\t\tsearch: termNameEscaped,\n\t\t\t\t\t\t} ),\n\t\t\t\t\t} ).then( unescapeTerms );\n\t\t\t\t\treturn this.addRequest.then( ( searchResult ) => {\n\t\t\t\t\t\treturn find( searchResult, ( result ) =>\n\t\t\t\t\t\t\tisSameTermName( result.name, termName )\n\t\t\t\t\t\t);\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\treturn Promise.reject( error );\n\t\t\t} )\n\t\t\t.then( unescapeTerm );\n\t}\n\n\tonChange( termNames ) {\n\t\tconst uniqueTerms = uniqBy( termNames, ( term ) => term.toLowerCase() );\n\t\tthis.setState( { selectedTerms: uniqueTerms } );\n\t\tconst newTermNames = uniqueTerms.filter(\n\t\t\t( termName ) =>\n\t\t\t\t! find( this.state.availableTerms, ( term ) =>\n\t\t\t\t\tisSameTermName( term.name, termName )\n\t\t\t\t)\n\t\t);\n\t\tconst termNamesToIds = ( names, availableTerms ) => {\n\t\t\treturn names.map(\n\t\t\t\t( termName ) =>\n\t\t\t\t\tfind( availableTerms, ( term ) =>\n\t\t\t\t\t\tisSameTermName( term.name, termName )\n\t\t\t\t\t).id\n\t\t\t);\n\t\t};\n\n\t\tif ( newTermNames.length === 0 ) {\n\t\t\treturn this.props.onUpdateTerms(\n\t\t\t\ttermNamesToIds( uniqueTerms, this.state.availableTerms ),\n\t\t\t\tthis.props.taxonomy.rest_base\n\t\t\t);\n\t\t}\n\t\tPromise.all( newTermNames.map( this.findOrCreateTerm ) ).then(\n\t\t\t( newTerms ) => {\n\t\t\t\tconst newAvailableTerms = this.state.availableTerms.concat(\n\t\t\t\t\tnewTerms\n\t\t\t\t);\n\t\t\t\tthis.setState( { availableTerms: newAvailableTerms } );\n\t\t\t\treturn this.props.onUpdateTerms(\n\t\t\t\t\ttermNamesToIds( uniqueTerms, newAvailableTerms ),\n\t\t\t\t\tthis.props.taxonomy.rest_base\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\tsearchTerms( search = '' ) {\n\t\tinvoke( this.searchRequest, [ 'abort' ] );\n\t\tif ( search.length >= 3 ) {\n\t\t\tthis.searchRequest = this.fetchTerms( { search } );\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { slug, taxonomy, hasAssignAction } = this.props;\n\n\t\tif ( ! hasAssignAction ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst { loading, availableTerms, selectedTerms } = this.state;\n\t\tconst termNames = availableTerms.map( ( term ) => term.name );\n\t\tconst newTermLabel = get(\n\t\t\ttaxonomy,\n\t\t\t[ 'labels', 'add_new_item' ],\n\t\t\tslug === 'post_tag' ? __( 'Add new tag' ) : __( 'Add new Term' )\n\t\t);\n\t\tconst singularName = get(\n\t\t\ttaxonomy,\n\t\t\t[ 'labels', 'singular_name' ],\n\t\t\tslug === 'post_tag' ? __( 'Tag' ) : __( 'Term' )\n\t\t);\n\t\tconst termAddedLabel = sprintf(\n\t\t\t/* translators: %s: term name. */\n\t\t\t_x( '%s added', 'term' ),\n\t\t\tsingularName\n\t\t);\n\t\tconst termRemovedLabel = sprintf(\n\t\t\t/* translators: %s: term name. */\n\t\t\t_x( '%s removed', 'term' ),\n\t\t\tsingularName\n\t\t);\n\t\tconst removeTermLabel = sprintf(\n\t\t\t/* translators: %s: term name. */\n\t\t\t_x( 'Remove %s', 'term' ),\n\t\t\tsingularName\n\t\t);\n\n\t\treturn (\n\t\t\t<FormTokenField\n\t\t\t\tvalue={ selectedTerms }\n\t\t\t\tsuggestions={ termNames }\n\t\t\t\tonChange={ this.onChange }\n\t\t\t\tonInputChange={ this.searchTerms }\n\t\t\t\tmaxSuggestions={ MAX_TERMS_SUGGESTIONS }\n\t\t\t\tdisabled={ loading }\n\t\t\t\tlabel={ newTermLabel }\n\t\t\t\tmessages={ {\n\t\t\t\t\tadded: termAddedLabel,\n\t\t\t\t\tremoved: termRemovedLabel,\n\t\t\t\t\tremove: removeTermLabel,\n\t\t\t\t} }\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default compose(\n\twithSelect( ( select, { slug } ) => {\n\t\tconst { getCurrentPost } = select( 'core/editor' );\n\t\tconst { getTaxonomy } = select( 'core' );\n\t\tconst taxonomy = getTaxonomy( slug );\n\t\treturn {\n\t\t\thasCreateAction: taxonomy\n\t\t\t\t? get(\n\t\t\t\t\t\tgetCurrentPost(),\n\t\t\t\t\t\t[ '_links', 'wp:action-create-' + taxonomy.rest_base ],\n\t\t\t\t\t\tfalse\n\t\t\t\t  )\n\t\t\t\t: false,\n\t\t\thasAssignAction: taxonomy\n\t\t\t\t? get(\n\t\t\t\t\t\tgetCurrentPost(),\n\t\t\t\t\t\t[ '_links', 'wp:action-assign-' + taxonomy.rest_base ],\n\t\t\t\t\t\tfalse\n\t\t\t\t  )\n\t\t\t\t: false,\n\t\t\tterms: taxonomy\n\t\t\t\t? select( 'core/editor' ).getEditedPostAttribute(\n\t\t\t\t\t\ttaxonomy.rest_base\n\t\t\t\t  )\n\t\t\t\t: [],\n\t\t\ttaxonomy,\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\treturn {\n\t\t\tonUpdateTerms( terms, restBase ) {\n\t\t\t\tdispatch( 'core/editor' ).editPost( { [ restBase ]: terms } );\n\t\t\t},\n\t\t};\n\t} ),\n\twithFilters( 'editor.PostTaxonomyType' )\n)( FlatTermSelector );\n"]}