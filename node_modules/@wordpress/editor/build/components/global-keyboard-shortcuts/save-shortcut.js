"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keyboardShortcuts = require("@wordpress/keyboard-shortcuts");

var _data = require("@wordpress/data");

var _blocks = require("@wordpress/blocks");

/**
 * WordPress dependencies
 */
function SaveShortcut(_ref) {
  var resetBlocksOnSave = _ref.resetBlocksOnSave;

  var _useDispatch = (0, _data.useDispatch)('core/editor'),
      resetEditorBlocks = _useDispatch.resetEditorBlocks,
      savePost = _useDispatch.savePost;

  var _useSelect = (0, _data.useSelect)(function (select) {
    var _select = select('core/editor'),
        _isEditedPostDirty = _select.isEditedPostDirty,
        _getPostEdits = _select.getPostEdits;

    return {
      isEditedPostDirty: _isEditedPostDirty,
      getPostEdits: _getPostEdits
    };
  }, []),
      isEditedPostDirty = _useSelect.isEditedPostDirty,
      getPostEdits = _useSelect.getPostEdits;

  (0, _keyboardShortcuts.useShortcut)('core/editor/save', function (event) {
    event.preventDefault(); // TODO: This should be handled in the `savePost` effect in
    // considering `isSaveable`. See note on `isEditedPostSaveable`
    // selector about dirtiness and meta-boxes.
    //
    // See: `isEditedPostSaveable`

    if (!isEditedPostDirty()) {
      return;
    } // The text editor requires that editor blocks are updated for a
    // save to work correctly. Usually this happens when the textarea
    // for the code editors blurs, but the shortcut can be used without
    // blurring the textarea.


    if (resetBlocksOnSave) {
      var postEdits = getPostEdits();

      if (postEdits.content && typeof postEdits.content === 'string') {
        var blocks = (0, _blocks.parse)(postEdits.content);
        resetEditorBlocks(blocks);
      }
    }

    savePost();
  }, {
    bindGlobal: true
  });
  return null;
}

var _default = SaveShortcut;
exports.default = _default;
//# sourceMappingURL=save-shortcut.js.map