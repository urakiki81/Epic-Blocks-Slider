{"version":3,"sources":["@wordpress/editor/src/components/local-autosave-monitor/index.js"],"names":["requestIdleCallback","window","requestAnimationFrame","hasSessionStorageSupport","sessionStorage","setItem","removeItem","error","useAutosaveNotice","select","postId","getCurrentPostId","isEditedPostNew","getEditedPostAttribute","hasRemoteAutosave","getEditorSettings","autosave","createWarningNotice","removeNotice","editPost","resetEditorBlocks","localAutosave","JSON","parse","title","post_title","content","excerpt","edits","hasDifference","Object","keys","some","key","noticeId","id","actions","label","onClick","useAutosavePurge","isDirty","isEditedPostDirty","isAutosaving","isAutosavingPost","didError","didPostSaveRequestFail","lastIsDirty","lastIsAutosaving","current","wasEditedPostNew","prevPostId","LocalAutosaveMonitor","__experimentalLocalAutosave","localAutosaveInterval","__experimentalLocalAutosaveInterval"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { once, uniqueId, omit } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useCallback, useEffect, useRef } from '@wordpress/element';\nimport { ifCondition, usePrevious } from '@wordpress/compose';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { parse } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport AutosaveMonitor from '../autosave-monitor';\nimport { localAutosaveGet, localAutosaveClear } from '../../store/controls';\n\nconst requestIdleCallback = window.requestIdleCallback\n\t? window.requestIdleCallback\n\t: window.requestAnimationFrame;\n\n/**\n * Function which returns true if the current environment supports browser\n * sessionStorage, or false otherwise. The result of this function is cached and\n * reused in subsequent invocations.\n */\nconst hasSessionStorageSupport = once( () => {\n\ttry {\n\t\t// Private Browsing in Safari 10 and earlier will throw an error when\n\t\t// attempting to set into sessionStorage. The test here is intentional in\n\t\t// causing a thrown error as condition bailing from local autosave.\n\t\twindow.sessionStorage.setItem( '__wpEditorTestSessionStorage', '' );\n\t\twindow.sessionStorage.removeItem( '__wpEditorTestSessionStorage' );\n\t\treturn true;\n\t} catch ( error ) {\n\t\treturn false;\n\t}\n} );\n\n/**\n * Custom hook which manages the creation of a notice prompting the user to\n * restore a local autosave, if one exists.\n */\nfunction useAutosaveNotice() {\n\tconst {\n\t\tpostId,\n\t\tisEditedPostNew,\n\t\tgetEditedPostAttribute,\n\t\thasRemoteAutosave,\n\t} = useSelect(\n\t\t( select ) => ( {\n\t\t\tpostId: select( 'core/editor' ).getCurrentPostId(),\n\t\t\tisEditedPostNew: select( 'core/editor' ).isEditedPostNew(),\n\t\t\tgetEditedPostAttribute: select( 'core/editor' )\n\t\t\t\t.getEditedPostAttribute,\n\t\t\thasRemoteAutosave: !! select( 'core/editor' ).getEditorSettings()\n\t\t\t\t.autosave,\n\t\t} ),\n\t\t[]\n\t);\n\n\tconst { createWarningNotice, removeNotice } = useDispatch( 'core/notices' );\n\tconst { editPost, resetEditorBlocks } = useDispatch( 'core/editor' );\n\n\tuseEffect( () => {\n\t\tlet localAutosave = localAutosaveGet( postId, isEditedPostNew );\n\t\tif ( ! localAutosave ) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tlocalAutosave = JSON.parse( localAutosave );\n\t\t} catch ( error ) {\n\t\t\t// Not usable if it can't be parsed.\n\t\t\treturn;\n\t\t}\n\n\t\tconst { post_title: title, content, excerpt } = localAutosave;\n\t\tconst edits = { title, content, excerpt };\n\n\t\t{\n\t\t\t// Only display a notice if there is a difference between what has been\n\t\t\t// saved and that which is stored in sessionStorage.\n\t\t\tconst hasDifference = Object.keys( edits ).some( ( key ) => {\n\t\t\t\treturn edits[ key ] !== getEditedPostAttribute( key );\n\t\t\t} );\n\n\t\t\tif ( ! hasDifference ) {\n\t\t\t\t// If there is no difference, it can be safely ejected from storage.\n\t\t\t\tlocalAutosaveClear( postId, isEditedPostNew );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif ( hasRemoteAutosave ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst noticeId = uniqueId( 'wpEditorAutosaveRestore' );\n\t\tcreateWarningNotice(\n\t\t\t__(\n\t\t\t\t'The backup of this post in your browser is different from the version below.'\n\t\t\t),\n\t\t\t{\n\t\t\t\tid: noticeId,\n\t\t\t\tactions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: __( 'Restore the backup' ),\n\t\t\t\t\t\tonClick() {\n\t\t\t\t\t\t\teditPost( omit( edits, [ 'content' ] ) );\n\t\t\t\t\t\t\tresetEditorBlocks( parse( edits.content ) );\n\t\t\t\t\t\t\tremoveNotice( noticeId );\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}\n\t\t);\n\t}, [ isEditedPostNew, postId ] );\n}\n\n/**\n * Custom hook which ejects a local autosave after a successful save occurs.\n */\nfunction useAutosavePurge() {\n\tconst {\n\t\tpostId,\n\t\tisEditedPostNew,\n\t\tisDirty,\n\t\tisAutosaving,\n\t\tdidError,\n\t} = useSelect(\n\t\t( select ) => ( {\n\t\t\tpostId: select( 'core/editor' ).getCurrentPostId(),\n\t\t\tisEditedPostNew: select( 'core/editor' ).isEditedPostNew(),\n\t\t\tisDirty: select( 'core/editor' ).isEditedPostDirty(),\n\t\t\tisAutosaving: select( 'core/editor' ).isAutosavingPost(),\n\t\t\tdidError: select( 'core/editor' ).didPostSaveRequestFail(),\n\t\t} ),\n\t\t[]\n\t);\n\n\tconst lastIsDirty = useRef( isDirty );\n\tconst lastIsAutosaving = useRef( isAutosaving );\n\n\tuseEffect( () => {\n\t\tif (\n\t\t\t! didError &&\n\t\t\t( ( lastIsAutosaving.current && ! isAutosaving ) ||\n\t\t\t\t( lastIsDirty.current && ! isDirty ) )\n\t\t) {\n\t\t\tlocalAutosaveClear( postId, isEditedPostNew );\n\t\t}\n\n\t\tlastIsDirty.current = isDirty;\n\t\tlastIsAutosaving.current = isAutosaving;\n\t}, [ isDirty, isAutosaving, didError ] );\n\n\t// Once the isEditedPostNew changes from true to false, let's clear the auto-draft autosave.\n\tconst wasEditedPostNew = usePrevious( isEditedPostNew );\n\tconst prevPostId = usePrevious( postId );\n\tuseEffect( () => {\n\t\tif ( prevPostId === postId && wasEditedPostNew && ! isEditedPostNew ) {\n\t\t\tlocalAutosaveClear( postId, true );\n\t\t}\n\t}, [ isEditedPostNew, postId ] );\n}\n\nfunction LocalAutosaveMonitor() {\n\tconst { __experimentalLocalAutosave } = useDispatch( 'core/editor' );\n\tconst autosave = useCallback( () => {\n\t\trequestIdleCallback( __experimentalLocalAutosave );\n\t}, [] );\n\tuseAutosaveNotice();\n\tuseAutosavePurge();\n\n\tconst { localAutosaveInterval } = useSelect(\n\t\t( select ) => ( {\n\t\t\tlocalAutosaveInterval: select( 'core/editor' ).getEditorSettings()\n\t\t\t\t.__experimentalLocalAutosaveInterval,\n\t\t} ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<AutosaveMonitor\n\t\t\tinterval={ localAutosaveInterval }\n\t\t\tautosave={ autosave }\n\t\t/>\n\t);\n}\n\nexport default ifCondition( hasSessionStorageSupport )( LocalAutosaveMonitor );\n"]}