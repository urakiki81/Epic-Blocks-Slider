{"version":3,"sources":["@wordpress/editor/src/hooks/custom-sources-backwards-compatibility.js"],"names":["createWithMetaAttributeSource","metaAttributes","BlockEdit","attributes","setAttributes","props","postType","select","getCurrentPostType","meta","setMeta","mergedAttributes","metaKey","nextAttributes","nextMeta","value","key","attributeKey","shimAttributeSource","settings","source","edit","getBlockTypes","map","name","getBlockType","forEach"],"mappings":";;;;AAUA;;;;;;;;;;AAPA;;AAKA;;AACA;;AAEA;;AACA;;;;;;AAEA;;AACA;;AAEA;;;;;;;;;AASA;;;;;;;;;;AAUA,IAAMA,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAEC,cAAF;AAAA,SACrC,yCACC,UAAEC,SAAF;AAAA,WAAiB,gBAA+C;AAAA,UAA3CC,UAA2C,QAA3CA,UAA2C;AAAA,UAA/BC,cAA+B,QAA/BA,aAA+B;AAAA,UAAbC,KAAa;AAC/D,UAAMC,QAAQ,GAAG,qBAChB,UAAEC,MAAF;AAAA,eAAcA,MAAM,CAAE,aAAF,CAAN,CAAwBC,kBAAxB,EAAd;AAAA,OADgB,EAEhB,EAFgB,CAAjB;;AAD+D,2BAKrC,6BACzB,UADyB,EAEzBF,QAFyB,EAGzB,MAHyB,CALqC;AAAA;AAAA,UAKvDG,IALuD;AAAA,UAKjDC,OALiD;;AAW/D,UAAMC,gBAAgB,GAAG,sBACxB;AAAA,iCACIR,UADJ,MAEI,uBACFF,cADE,EAEF,UAAEW,OAAF;AAAA,iBAAeH,IAAI,CAAEG,OAAF,CAAnB;AAAA,SAFE,CAFJ;AAAA,OADwB,EAQxB,CAAET,UAAF,EAAcM,IAAd,CARwB,CAAzB;AAWA,aACC,4BAAC,SAAD;AACC,QAAA,UAAU,EAAGE,gBADd;AAEC,QAAA,aAAa,EAAG,uBAAEE,cAAF,EAAsB;AACrC,cAAMC,QAAQ,GAAG,sBAChB;AACA;AACA,8BACCD,cADD,EAEC,UAAEE,KAAF,EAASC,GAAT;AAAA,mBAAkBf,cAAc,CAAEe,GAAF,CAAhC;AAAA,WAFD,CAHgB,EAQhB;AACA,oBAAED,KAAF,EAASE,YAAT;AAAA,mBACChB,cAAc,CAAEgB,YAAF,CADf;AAAA,WATgB,CAAjB;;AAaA,cAAK,CAAE,qBAASH,QAAT,CAAP,EAA6B;AAC5BJ,YAAAA,OAAO,CAAEI,QAAF,CAAP;AACA;;AAEDV,UAAAA,cAAa,CAAES,cAAF,CAAb;AACA;AArBF,SAsBMR,KAtBN,EADD;AA0BA,KAhDD;AAAA,GADD,EAkDC,yBAlDD,CADqC;AAAA,CAAtC;AAsDA;;;;;;;;;;AAQA,SAASa,mBAAT,CAA8BC,QAA9B,EAAyC;AACxC;AACA,MAAMlB,cAAc,GAAG,uBACtB,oBAAQkB,QAAQ,CAAChB,UAAjB,EAA6B;AAAEiB,IAAAA,MAAM,EAAE;AAAV,GAA7B,CADsB,EAEtB,MAFsB,CAAvB;;AAIA,MAAK,CAAE,qBAASnB,cAAT,CAAP,EAAmC;AAClCkB,IAAAA,QAAQ,CAACE,IAAT,GAAgBrB,6BAA6B,CAAEC,cAAF,CAA7B,CACfkB,QAAQ,CAACE,IADM,CAAhB;AAGA;;AAED,SAAOF,QAAP;AACA;;AAED,sBACC,0BADD,EAEC,0EAFD,EAGCD,mBAHD,E,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,kBAAc,aAAd,EACEI,aADF,GAEEC,GAFF,CAEO;AAAA,MAAIC,IAAJ,SAAIA,IAAJ;AAAA,SAAgB,kBAAc,aAAd,EAA8BC,YAA9B,CAA4CD,IAA5C,CAAhB;AAAA,CAFP,EAGEE,OAHF,CAGWR,mBAHX","sourcesContent":["/**\n * External dependencies\n */\nimport { pickBy, mapValues, isEmpty, mapKeys } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { select as globalSelect, useSelect } from '@wordpress/data';\nimport { useEntityProp } from '@wordpress/core-data';\nimport { useMemo } from '@wordpress/element';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { addFilter } from '@wordpress/hooks';\n\n/** @typedef {import('@wordpress/compose').WPHigherOrderComponent} WPHigherOrderComponent */\n/** @typedef {import('@wordpress/blocks').WPBlockSettings} WPBlockSettings */\n\n/**\n * Object whose keys are the names of block attributes, where each value\n * represents the meta key to which the block attribute is intended to save.\n *\n * @see https://developer.wordpress.org/reference/functions/register_meta/\n *\n * @typedef {Object<string,string>} WPMetaAttributeMapping\n */\n\n/**\n * Given a mapping of attribute names (meta source attributes) to their\n * associated meta key, returns a higher order component that overrides its\n * `attributes` and `setAttributes` props to sync any changes with the edited\n * post's meta keys.\n *\n * @param {WPMetaAttributeMapping} metaAttributes Meta attribute mapping.\n *\n * @return {WPHigherOrderComponent} Higher-order component.\n */\nconst createWithMetaAttributeSource = ( metaAttributes ) =>\n\tcreateHigherOrderComponent(\n\t\t( BlockEdit ) => ( { attributes, setAttributes, ...props } ) => {\n\t\t\tconst postType = useSelect(\n\t\t\t\t( select ) => select( 'core/editor' ).getCurrentPostType(),\n\t\t\t\t[]\n\t\t\t);\n\t\t\tconst [ meta, setMeta ] = useEntityProp(\n\t\t\t\t'postType',\n\t\t\t\tpostType,\n\t\t\t\t'meta'\n\t\t\t);\n\n\t\t\tconst mergedAttributes = useMemo(\n\t\t\t\t() => ( {\n\t\t\t\t\t...attributes,\n\t\t\t\t\t...mapValues(\n\t\t\t\t\t\tmetaAttributes,\n\t\t\t\t\t\t( metaKey ) => meta[ metaKey ]\n\t\t\t\t\t),\n\t\t\t\t} ),\n\t\t\t\t[ attributes, meta ]\n\t\t\t);\n\n\t\t\treturn (\n\t\t\t\t<BlockEdit\n\t\t\t\t\tattributes={ mergedAttributes }\n\t\t\t\t\tsetAttributes={ ( nextAttributes ) => {\n\t\t\t\t\t\tconst nextMeta = mapKeys(\n\t\t\t\t\t\t\t// Filter to intersection of keys between the updated\n\t\t\t\t\t\t\t// attributes and those with an associated meta key.\n\t\t\t\t\t\t\tpickBy(\n\t\t\t\t\t\t\t\tnextAttributes,\n\t\t\t\t\t\t\t\t( value, key ) => metaAttributes[ key ]\n\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t// Rename the keys to the expected meta key name.\n\t\t\t\t\t\t\t( value, attributeKey ) =>\n\t\t\t\t\t\t\t\tmetaAttributes[ attributeKey ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( ! isEmpty( nextMeta ) ) {\n\t\t\t\t\t\t\tsetMeta( nextMeta );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetAttributes( nextAttributes );\n\t\t\t\t\t} }\n\t\t\t\t\t{ ...props }\n\t\t\t\t/>\n\t\t\t);\n\t\t},\n\t\t'withMetaAttributeSource'\n\t);\n\n/**\n * Filters a registered block's settings to enhance a block's `edit` component\n * to upgrade meta-sourced attributes to use the post's meta entity property.\n *\n * @param {WPBlockSettings} settings Registered block settings.\n *\n * @return {WPBlockSettings} Filtered block settings.\n */\nfunction shimAttributeSource( settings ) {\n\t/** @type {WPMetaAttributeMapping} */\n\tconst metaAttributes = mapValues(\n\t\tpickBy( settings.attributes, { source: 'meta' } ),\n\t\t'meta'\n\t);\n\tif ( ! isEmpty( metaAttributes ) ) {\n\t\tsettings.edit = createWithMetaAttributeSource( metaAttributes )(\n\t\t\tsettings.edit\n\t\t);\n\t}\n\n\treturn settings;\n}\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/editor/custom-sources-backwards-compatibility/shim-attribute-source',\n\tshimAttributeSource\n);\n\n// The above filter will only capture blocks registered after the filter was\n// added. There may already be blocks registered by this point, and those must\n// be updated to apply the shim.\n//\n// The following implementation achieves this, albeit with a couple caveats:\n// - Only blocks registered on the global store will be modified.\n// - The block settings are directly mutated, since there is currently no\n//   mechanism to update an existing block registration. This is the reason for\n//   `getBlockType` separate from `getBlockTypes`, since the latter returns a\n//   _copy_ of the block registration (i.e. the mutation would not affect the\n//   actual registered block settings).\n//\n// `getBlockTypes` or `getBlockType` implementation could change in the future\n// in regards to creating settings clones, but the corresponding end-to-end\n// tests for meta blocks should cover against any potential regressions.\n//\n// In the future, we could support updating block settings, at which point this\n// implementation could use that mechanism instead.\nglobalSelect( 'core/blocks' )\n\t.getBlockTypes()\n\t.map( ( { name } ) => globalSelect( 'core/blocks' ).getBlockType( name ) )\n\t.forEach( shimAttributeSource );\n"]}