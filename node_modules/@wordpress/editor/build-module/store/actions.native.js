import _regeneratorRuntime from "@babel/runtime/regenerator";

var _marked = /*#__PURE__*/_regeneratorRuntime.mark(autosave);

/**
 * External dependencies
 */
import { v4 as uuid } from 'uuid';
/**
 * WordPress dependencies
 */

import RNReactNativeGutenbergBridge from '@wordpress/react-native-bridge';
export * from './actions.js';
/**
 * Returns an action object that enables or disables post title selection.
 *
 * @param {boolean} [isSelected=true] Whether post title is currently selected.
 *
 * @return {Object} Action object.
 */

export function togglePostTitleSelection() {
  var isSelected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return {
    type: 'TOGGLE_POST_TITLE_SELECTION',
    isSelected: isSelected
  };
}
/**
 * Action generator used in signalling that the post should autosave.
 */

export function autosave() {
  return _regeneratorRuntime.wrap(function autosave$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          RNReactNativeGutenbergBridge.editorDidAutosave();

        case 1:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}
/**
 * Returns an action object to set the clipboard data.
 *
 * @param {Object} clipboard Stored clipboard data.
 *
 * @return {Object} Action object.
 */

export function updateClipboard(clipboard) {
  return {
    type: 'UPDATE_CLIPBOARD',
    clipboard: clipboard
  };
}
/**
 * Returns an action object to create an info notice.
 *
 * @param {Object} message The displayed message of the notice.
 *
 * @return {Object} Action object.
 */

export function createInfoNotice(message) {
  var notice = {
    status: 'info',
    content: message,
    id: uuid()
  };
  return {
    type: 'CREATE_NOTICE',
    notice: notice
  };
}
/**
 * Returns an action object to remove all notices.
 *
 * @return {Object} Action object.
 */

export function removeAllNotices() {
  return {
    type: 'REMOVE_ALL_NOTICES'
  };
}
/**
 * Returns an action object to remove a notice by id.
 *
 * @param {Object} id The id of the notice to remove.
 *
 * @return {Object} Action object.
 */

export function removeNotice(id) {
  return {
    type: 'REMOVE_NOTICE',
    id: id
  };
}
//# sourceMappingURL=actions.native.js.map