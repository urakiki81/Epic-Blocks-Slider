{"version":3,"sources":["@wordpress/editor/src/store/controls.js"],"names":["createRegistryControl","awaitNextStateChange","type","getRegistry","postKey","postId","isPostNew","localAutosaveGet","window","sessionStorage","getItem","localAutosaveSet","title","content","excerpt","setItem","JSON","stringify","post_title","localAutosaveClear","removeItem","controls","AWAIT_NEXT_STATE_CHANGE","registry","Promise","resolve","unsubscribe","subscribe","GET_REGISTRY","LOCAL_AUTOSAVE_SET"],"mappings":"AAAA;;;AAGA,SAASA,qBAAT,QAAsC,iBAAtC;AAEA;;;;;;;AAMA,OAAO,SAASC,oBAAT,GAAgC;AACtC,SAAO;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAP;AACA;AAED;;;;;;;AAMA,OAAO,SAASC,WAAT,GAAuB;AAC7B,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAR,GAAP;AACA;AAED;;;;;;;;;;;;;;AAaA,SAASE,OAAT,CAAkBC,MAAlB,EAA0BC,SAA1B,EAAsC;AACrC,iDACCA,SAAS,GAAG,YAAH,GAAkBD,MAD5B;AAGA;;AAED,OAAO,SAASE,gBAAT,CAA2BF,MAA3B,EAAmCC,SAAnC,EAA+C;AACrD,SAAOE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA+BN,OAAO,CAAEC,MAAF,EAAUC,SAAV,CAAtC,CAAP;AACA;AAED,OAAO,SAASK,gBAAT,CAA2BN,MAA3B,EAAmCC,SAAnC,EAA8CM,KAA9C,EAAqDC,OAArD,EAA8DC,OAA9D,EAAwE;AAC9EN,EAAAA,MAAM,CAACC,cAAP,CAAsBM,OAAtB,CACCX,OAAO,CAAEC,MAAF,EAAUC,SAAV,CADR,EAECU,IAAI,CAACC,SAAL,CAAgB;AACfC,IAAAA,UAAU,EAAEN,KADG;AAEfC,IAAAA,OAAO,EAAPA,OAFe;AAGfC,IAAAA,OAAO,EAAPA;AAHe,GAAhB,CAFD;AAQA;AAED,OAAO,SAASK,kBAAT,CAA6Bd,MAA7B,EAAqCC,SAArC,EAAiD;AACvDE,EAAAA,MAAM,CAACC,cAAP,CAAsBW,UAAtB,CAAkChB,OAAO,CAAEC,MAAF,EAAUC,SAAV,CAAzC;AACA;AAED,IAAMe,QAAQ,GAAG;AAChBC,EAAAA,uBAAuB,EAAEtB,qBAAqB,CAAE,UAAEuB,QAAF;AAAA,WAAgB;AAAA,aAC/D,IAAIC,OAAJ,CAAa,UAAEC,OAAF,EAAe;AAC3B,YAAMC,WAAW,GAAGH,QAAQ,CAACI,SAAT,CAAoB,YAAM;AAC7CD,UAAAA,WAAW;AACXD,UAAAA,OAAO;AACP,SAHmB,CAApB;AAIA,OALD,CAD+D;AAAA,KAAhB;AAAA,GAAF,CAD9B;AAShBG,EAAAA,YAAY,EAAE5B,qBAAqB,CAAE,UAAEuB,QAAF;AAAA,WAAgB;AAAA,aAAMA,QAAN;AAAA,KAAhB;AAAA,GAAF,CATnB;AAUhBM,EAAAA,kBAVgB,oCAUqD;AAAA,QAA/CxB,MAA+C,QAA/CA,MAA+C;AAAA,QAAvCC,SAAuC,QAAvCA,SAAuC;AAAA,QAA5BM,KAA4B,QAA5BA,KAA4B;AAAA,QAArBC,OAAqB,QAArBA,OAAqB;AAAA,QAAZC,OAAY,QAAZA,OAAY;AACpEH,IAAAA,gBAAgB,CAAEN,MAAF,EAAUC,SAAV,EAAqBM,KAArB,EAA4BC,OAA5B,EAAqCC,OAArC,CAAhB;AACA;AAZe,CAAjB;AAeA,eAAeO,QAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createRegistryControl } from '@wordpress/data';\n\n/**\n * Returns a control descriptor signalling to subscribe to the registry and\n * resolve the control promise only when the next state change occurs.\n *\n * @return {Object} Control descriptor.\n */\nexport function awaitNextStateChange() {\n\treturn { type: 'AWAIT_NEXT_STATE_CHANGE' };\n}\n\n/**\n * Returns a control descriptor signalling to resolve with the current data\n * registry.\n *\n * @return {Object} Control descriptor.\n */\nexport function getRegistry() {\n\treturn { type: 'GET_REGISTRY' };\n}\n\n/**\n * Function returning a sessionStorage key to set or retrieve a given post's\n * automatic session backup.\n *\n * Keys are crucially prefixed with 'wp-autosave-' so that wp-login.php's\n * `loggedout` handler can clear sessionStorage of any user-private content.\n *\n * @see https://github.com/WordPress/wordpress-develop/blob/6dad32d2aed47e6c0cf2aee8410645f6d7aba6bd/src/wp-login.php#L103\n *\n * @param {string}  postId     Post ID.\n * @param {boolean} isPostNew  Whether post new.\n * @return {string}            sessionStorage key\n */\nfunction postKey( postId, isPostNew ) {\n\treturn `wp-autosave-block-editor-post-${\n\t\tisPostNew ? 'auto-draft' : postId\n\t}`;\n}\n\nexport function localAutosaveGet( postId, isPostNew ) {\n\treturn window.sessionStorage.getItem( postKey( postId, isPostNew ) );\n}\n\nexport function localAutosaveSet( postId, isPostNew, title, content, excerpt ) {\n\twindow.sessionStorage.setItem(\n\t\tpostKey( postId, isPostNew ),\n\t\tJSON.stringify( {\n\t\t\tpost_title: title,\n\t\t\tcontent,\n\t\t\texcerpt,\n\t\t} )\n\t);\n}\n\nexport function localAutosaveClear( postId, isPostNew ) {\n\twindow.sessionStorage.removeItem( postKey( postId, isPostNew ) );\n}\n\nconst controls = {\n\tAWAIT_NEXT_STATE_CHANGE: createRegistryControl( ( registry ) => () =>\n\t\tnew Promise( ( resolve ) => {\n\t\t\tconst unsubscribe = registry.subscribe( () => {\n\t\t\t\tunsubscribe();\n\t\t\t\tresolve();\n\t\t\t} );\n\t\t} )\n\t),\n\tGET_REGISTRY: createRegistryControl( ( registry ) => () => registry ),\n\tLOCAL_AUTOSAVE_SET( { postId, isPostNew, title, content, excerpt } ) {\n\t\tlocalAutosaveSet( postId, isPostNew, title, content, excerpt );\n\t},\n};\n\nexport default controls;\n"]}