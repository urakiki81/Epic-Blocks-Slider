{"version":3,"sources":["@wordpress/editor/src/store/effects/reusable-blocks.js"],"names":["compact","map","uniqueId","BEGIN","COMMIT","REVERT","apiFetch","parse","serialize","createBlock","isReusableBlock","__","dispatch","dataDispatch","select","__experimentalReceiveReusableBlocks","receiveReusableBlocksAction","__experimentalSaveReusableBlock","saveReusableBlock","__experimentalGetReusableBlock","getReusableBlock","REUSABLE_BLOCK_NOTICE_ID","fetchReusableBlocks","action","store","id","path","postType","rest_base","posts","results","post","status","content","protected","raw","title","length","type","error","saveReusableBlocks","state","getState","isTemporary","data","method","updatedReusableBlock","updatedId","message","createSuccessNotice","__unstableSaveReusableBlock","createErrorNotice","deleteReusableBlocks","reusableBlock","allBlocks","getBlocks","associatedBlocks","filter","block","attributes","ref","associatedBlockClientIds","clientId","transactionId","optimist","removeBlocks","convertBlockToStatic","oldBlock","getBlock","newBlocks","replaceBlocks","convertBlockToReusable","getBlocksByClientId","clientIds"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { compact, map, uniqueId } from 'lodash';\nimport { BEGIN, COMMIT, REVERT } from 'redux-optimist';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport {\n\tparse,\n\tserialize,\n\tcreateBlock,\n\tisReusableBlock,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n// TODO: Ideally this would be the only dispatch in scope. This requires either\n// refactoring editor actions to yielded controls, or replacing direct dispatch\n// on the editor store with action creators (e.g. `REMOVE_REUSABLE_BLOCK`).\nimport { dispatch as dataDispatch, select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\t__experimentalReceiveReusableBlocks as receiveReusableBlocksAction,\n\t__experimentalSaveReusableBlock as saveReusableBlock,\n} from '../actions';\nimport { __experimentalGetReusableBlock as getReusableBlock } from '../selectors';\n\n/**\n * Module Constants\n */\nconst REUSABLE_BLOCK_NOTICE_ID = 'REUSABLE_BLOCK_NOTICE_ID';\n\n/**\n * Fetch Reusable blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const fetchReusableBlocks = async ( action, store ) => {\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tlet posts;\n\n\t\tif ( id ) {\n\t\t\tposts = [\n\t\t\t\tawait apiFetch( {\n\t\t\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ id }`,\n\t\t\t\t} ),\n\t\t\t];\n\t\t} else {\n\t\t\tposts = await apiFetch( {\n\t\t\t\tpath: `/wp/v2/${ postType.rest_base }?per_page=-1`,\n\t\t\t} );\n\t\t}\n\n\t\tconst results = compact(\n\t\t\tmap( posts, ( post ) => {\n\t\t\t\tif ( post.status !== 'publish' || post.content.protected ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...post,\n\t\t\t\t\tcontent: post.content.raw,\n\t\t\t\t\ttitle: post.title.raw,\n\t\t\t\t};\n\t\t\t} )\n\t\t);\n\n\t\tif ( results.length ) {\n\t\t\tdispatch( receiveReusableBlocksAction( results ) );\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_SUCCESS',\n\t\t\tid,\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'FETCH_REUSABLE_BLOCKS_FAILURE',\n\t\t\tid,\n\t\t\terror,\n\t\t} );\n\t}\n};\n\n/**\n * Save Reusable blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const saveReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { dispatch } = store;\n\tconst state = store.getState();\n\tconst { title, content, isTemporary } = getReusableBlock( state, id );\n\n\tconst data = isTemporary\n\t\t? { title, content, status: 'publish' }\n\t\t: { id, title, content, status: 'publish' };\n\tconst path = isTemporary\n\t\t? `/wp/v2/${ postType.rest_base }`\n\t\t: `/wp/v2/${ postType.rest_base }/${ id }`;\n\tconst method = isTemporary ? 'POST' : 'PUT';\n\n\ttry {\n\t\tconst updatedReusableBlock = await apiFetch( { path, data, method } );\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tupdatedId: updatedReusableBlock.id,\n\t\t\tid,\n\t\t} );\n\t\tconst message = isTemporary\n\t\t\t? __( 'Block created.' )\n\t\t\t: __( 'Block updated.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t\ttype: 'snackbar',\n\t\t} );\n\n\t\tdataDispatch( 'core/block-editor' ).__unstableSaveReusableBlock(\n\t\t\tid,\n\t\t\tupdatedReusableBlock.id\n\t\t);\n\t} catch ( error ) {\n\t\tdispatch( { type: 'SAVE_REUSABLE_BLOCK_FAILURE', id } );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Delete Reusable blocks Effect Handler.\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const deleteReusableBlocks = async ( action, store ) => {\n\t// TODO: these are potentially undefined, this fix is in place\n\t// until there is a filter to not use reusable blocks if undefined\n\tconst postType = await apiFetch( { path: '/wp/v2/types/wp_block' } );\n\tif ( ! postType ) {\n\t\treturn;\n\t}\n\n\tconst { id } = action;\n\tconst { getState, dispatch } = store;\n\n\t// Don't allow a reusable block with a temporary ID to be deleted\n\tconst reusableBlock = getReusableBlock( getState(), id );\n\tif ( ! reusableBlock || reusableBlock.isTemporary ) {\n\t\treturn;\n\t}\n\t// Remove any other blocks that reference this reusable block\n\tconst allBlocks = select( 'core/block-editor' ).getBlocks();\n\tconst associatedBlocks = allBlocks.filter(\n\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t);\n\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t( block ) => block.clientId\n\t);\n\n\tconst transactionId = uniqueId();\n\n\tdispatch( {\n\t\ttype: 'REMOVE_REUSABLE_BLOCK',\n\t\tid,\n\t\toptimist: { type: BEGIN, id: transactionId },\n\t} );\n\n\t// Remove the parsed block.\n\tif ( associatedBlockClientIds.length ) {\n\t\tdataDispatch( 'core/block-editor' ).removeBlocks(\n\t\t\tassociatedBlockClientIds\n\t\t);\n\t}\n\n\ttry {\n\t\tawait apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_SUCCESS',\n\t\t\tid,\n\t\t\toptimist: { type: COMMIT, id: transactionId },\n\t\t} );\n\t\tconst message = __( 'Block deleted.' );\n\t\tdataDispatch( 'core/notices' ).createSuccessNotice( message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t\ttype: 'snackbar',\n\t\t} );\n\t} catch ( error ) {\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_REUSABLE_BLOCK_FAILURE',\n\t\t\tid,\n\t\t\toptimist: { type: REVERT, id: transactionId },\n\t\t} );\n\t\tdataDispatch( 'core/notices' ).createErrorNotice( error.message, {\n\t\t\tid: REUSABLE_BLOCK_NOTICE_ID,\n\t\t} );\n\t}\n};\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToStatic = ( action, store ) => {\n\tconst state = store.getState();\n\tconst oldBlock = select( 'core/block-editor' ).getBlock( action.clientId );\n\tconst reusableBlock = getReusableBlock( state, oldBlock.attributes.ref );\n\tconst newBlocks = parse( reusableBlock.content );\n\tdataDispatch( 'core/block-editor' ).replaceBlocks(\n\t\toldBlock.clientId,\n\t\tnewBlocks\n\t);\n};\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Object} action  action object.\n * @param {Object} store   Redux Store.\n */\nexport const convertBlockToReusable = ( action, store ) => {\n\tconst { dispatch } = store;\n\tconst reusableBlock = {\n\t\tid: uniqueId( 'reusable' ),\n\t\ttitle: __( 'Untitled Reusable Block' ),\n\t\tcontent: serialize(\n\t\t\tselect( 'core/block-editor' ).getBlocksByClientId(\n\t\t\t\taction.clientIds\n\t\t\t)\n\t\t),\n\t};\n\n\tdispatch( receiveReusableBlocksAction( [ reusableBlock ] ) );\n\tdispatch( saveReusableBlock( reusableBlock.id ) );\n\n\tdataDispatch( 'core/block-editor' ).replaceBlocks(\n\t\taction.clientIds,\n\t\tcreateBlock( 'core/block', {\n\t\t\tref: reusableBlock.id,\n\t\t} )\n\t);\n};\n"]}