{"version":3,"sources":["@wordpress/editor/src/store/actions.js"],"names":["setupEditor","resetAutosave","editPost","savePost","refreshPost","trashPost","autosave","__experimentalLocalAutosave","redo","undo","resetEditorBlocks","has","castArray","deprecated","dispatch","select","__unstableSyncSelect","apiFetch","parse","synchronizeBlocksWithTemplate","STORE_KEY","POST_UPDATE_TRANSACTION_ID","TRASH_POST_NOTICE_ID","getNotificationArgumentsForSaveSuccess","getNotificationArgumentsForSaveFail","getNotificationArgumentsForTrashFail","serializeBlocks","post","edits","template","content","raw","blocks","isNewPost","status","resetPost","type","__unstableShouldCreateUndoLevel","setupEditorState","Object","keys","some","key","__experimentalTearDownEditor","newAutosave","alternative","plugin","postId","__experimentalRequestPostUpdateStart","options","__experimentalRequestPostUpdateFinish","updatePost","id","__experimentalOptimisticUpdatePost","optimist","isAutosave","undoIgnore","previousRecord","error","args","length","updatedRecord","previousPost","postType","postTypeSlug","path","rest_base","Date","now","newPost","method","isPostNew","title","excerpt","createUndoLevel","updatePostLock","lock","__experimentalFetchReusableBlocks","__experimentalReceiveReusableBlocks","results","__experimentalSaveReusableBlock","__experimentalDeleteReusableBlock","__experimentalUpdateReusableBlock","changes","__experimentalConvertBlockToStatic","clientId","__experimentalConvertBlockToReusable","clientIds","enablePublishSidebar","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","lockPostAutosaving","unlockPostAutosaving","selectionStart","selectionEnd","noChange","blocksForSerialization","updateEditorSettings","settings","getBlockEditorAction","name","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","clearSelectedBlock","toggleSelection","replaceBlocks","replaceBlock","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { has, castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport {\n\tdispatch,\n\tselect,\n\t__unstableSyncSelect,\n\tapiFetch,\n} from '@wordpress/data-controls';\nimport { parse, synchronizeBlocksWithTemplate } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport {\n\tSTORE_KEY,\n\tPOST_UPDATE_TRANSACTION_ID,\n\tTRASH_POST_NOTICE_ID,\n} from './constants';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\nimport serializeBlocks from './utils/serialize-blocks';\n\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post      Post object.\n * @param {Object} edits     Initial edited attributes object.\n * @param {Array?} template  Block Template.\n */\nexport function* setupEditor( post, edits, template ) {\n\t// In order to ensure maximum of a single parse during setup, edits are\n\t// included as part of editor setup action. Assume edited content as\n\t// canonical if provided, falling back to post.\n\tlet content;\n\tif ( has( edits, [ 'content' ] ) ) {\n\t\tcontent = edits.content;\n\t} else {\n\t\tcontent = post.content.raw;\n\t}\n\n\tlet blocks = parse( content );\n\n\t// Apply a template for new posts only, if exists.\n\tconst isNewPost = post.status === 'auto-draft';\n\tif ( isNewPost && template ) {\n\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t}\n\n\tyield resetPost( post );\n\tyield {\n\t\ttype: 'SETUP_EDITOR',\n\t\tpost,\n\t\tedits,\n\t\ttemplate,\n\t};\n\tyield resetEditorBlocks( blocks, {\n\t\t__unstableShouldCreateUndoLevel: false,\n\t} );\n\tyield setupEditorState( post );\n\tif (\n\t\tedits &&\n\t\tObject.keys( edits ).some(\n\t\t\t( key ) =>\n\t\t\t\tedits[ key ] !==\n\t\t\t\t( has( post, [ key, 'raw' ] ) ? post[ key ].raw : post[ key ] )\n\t\t)\n\t) {\n\t\tyield editPost( edits );\n\t}\n}\n\n/**\n * Returns an action object signalling that the editor is being destroyed and\n * that any necessary state or side-effect cleanup should occur.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalTearDownEditor() {\n\treturn { type: 'TEAR_DOWN_EDITOR' };\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @param {Object} post Post object.\n *\n * @return {Object} Action object.\n */\nexport function resetPost( post ) {\n\treturn {\n\t\ttype: 'RESET_POST',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the latest autosave of the\n * post has been received, by initialization or autosave.\n *\n * @deprecated since 5.6. Callers should use the `receiveAutosaves( postId, autosave )`\n * \t\t\t   selector from the '@wordpress/core-data' package.\n *\n * @param {Object} newAutosave Autosave post object.\n *\n * @return {Object} Action object.\n */\nexport function* resetAutosave( newAutosave ) {\n\tdeprecated( 'resetAutosave action (`core/editor` store)', {\n\t\talternative: 'receiveAutosaves action (`core` store)',\n\t\tplugin: 'Gutenberg',\n\t} );\n\n\tconst postId = yield select( STORE_KEY, 'getCurrentPostId' );\n\tyield dispatch( 'core', 'receiveAutosaves', postId, newAutosave );\n\n\treturn { type: '__INERT__' };\n}\n\n/**\n * Action for dispatching that a post update request has started.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateStart( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_START',\n\t\toptions,\n\t};\n}\n\n/**\n * Action for dispatching that a post update request has finished.\n *\n * @param {Object} options\n *\n * @return {Object} An action object\n */\nexport function __experimentalRequestPostUpdateFinish( options = {} ) {\n\treturn {\n\t\ttype: 'REQUEST_POST_UPDATE_FINISH',\n\t\toptions,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @param {Object} edits Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function updatePost( edits ) {\n\treturn {\n\t\ttype: 'UPDATE_POST',\n\t\tedits,\n\t};\n}\n\n/**\n * Returns an action object used to setup the editor state when first opening\n * an editor.\n *\n * @param {Object} post   Post object.\n *\n * @return {Object} Action object.\n */\nexport function setupEditorState( post ) {\n\treturn {\n\t\ttype: 'SETUP_EDITOR_STATE',\n\t\tpost,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits   Post attributes to edit.\n * @param {Object} options Options for the edit.\n *\n * @yield {Object} Action object or control.\n */\nexport function* editPost( edits, options ) {\n\tconst { id, type } = yield select( STORE_KEY, 'getCurrentPost' );\n\tyield dispatch(\n\t\t'core',\n\t\t'editEntityRecord',\n\t\t'postType',\n\t\ttype,\n\t\tid,\n\t\tedits,\n\t\toptions\n\t);\n}\n\n/**\n * Returns action object produced by the updatePost creator augmented by\n * an optimist option that signals optimistically applying updates.\n *\n * @param {Object} edits  Updated post fields.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalOptimisticUpdatePost( edits ) {\n\treturn {\n\t\t...updatePost( edits ),\n\t\toptimist: { id: POST_UPDATE_TRANSACTION_ID },\n\t};\n}\n\n/**\n * Action generator for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport function* savePost( options = {} ) {\n\tif ( ! ( yield select( STORE_KEY, 'isEditedPostSaveable' ) ) ) {\n\t\treturn;\n\t}\n\tlet edits = {\n\t\tcontent: yield select( STORE_KEY, 'getEditedPostContent' ),\n\t};\n\tif ( ! options.isAutosave ) {\n\t\tyield dispatch( STORE_KEY, 'editPost', edits, { undoIgnore: true } );\n\t}\n\n\tyield __experimentalRequestPostUpdateStart( options );\n\tconst previousRecord = yield select( STORE_KEY, 'getCurrentPost' );\n\tedits = {\n\t\tid: previousRecord.id,\n\t\t...( yield select(\n\t\t\t'core',\n\t\t\t'getEntityRecordNonTransientEdits',\n\t\t\t'postType',\n\t\t\tpreviousRecord.type,\n\t\t\tpreviousRecord.id\n\t\t) ),\n\t\t...edits,\n\t};\n\tyield dispatch(\n\t\t'core',\n\t\t'saveEntityRecord',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tedits,\n\t\toptions\n\t);\n\tyield __experimentalRequestPostUpdateFinish( options );\n\n\tconst error = yield select(\n\t\t'core',\n\t\t'getLastEntitySaveError',\n\t\t'postType',\n\t\tpreviousRecord.type,\n\t\tpreviousRecord.id\n\t);\n\tif ( error ) {\n\t\tconst args = getNotificationArgumentsForSaveFail( {\n\t\t\tpost: previousRecord,\n\t\t\tedits,\n\t\t\terror,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield dispatch( 'core/notices', 'createErrorNotice', ...args );\n\t\t}\n\t} else {\n\t\tconst updatedRecord = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tconst args = getNotificationArgumentsForSaveSuccess( {\n\t\t\tpreviousPost: previousRecord,\n\t\t\tpost: updatedRecord,\n\t\t\tpostType: yield select( 'core', 'getPostType', updatedRecord.type ),\n\t\t\toptions,\n\t\t} );\n\t\tif ( args.length ) {\n\t\t\tyield dispatch( 'core/notices', 'createSuccessNotice', ...args );\n\t\t}\n\t\t// Make sure that any edits after saving create an undo level and are\n\t\t// considered for change detection.\n\t\tif ( ! options.isAutosave ) {\n\t\t\tyield dispatch(\n\t\t\t\t'core/block-editor',\n\t\t\t\t'__unstableMarkLastChangeAsPersistent'\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * Action generator for handling refreshing the current post.\n */\nexport function* refreshPost() {\n\tconst post = yield select( STORE_KEY, 'getCurrentPost' );\n\tconst postTypeSlug = yield select( STORE_KEY, 'getCurrentPostType' );\n\tconst postType = yield select( 'core', 'getPostType', postTypeSlug );\n\tconst newPost = yield apiFetch( {\n\t\t// Timestamp arg allows caller to bypass browser caching, which is\n\t\t// expected for this specific function.\n\t\tpath:\n\t\t\t`/wp/v2/${ postType.rest_base }/${ post.id }` +\n\t\t\t`?context=edit&_timestamp=${ Date.now() }`,\n\t} );\n\tyield dispatch( STORE_KEY, 'resetPost', newPost );\n}\n\n/**\n * Action generator for trashing the current post in the editor.\n */\nexport function* trashPost() {\n\tconst postTypeSlug = yield select( STORE_KEY, 'getCurrentPostType' );\n\tconst postType = yield select( 'core', 'getPostType', postTypeSlug );\n\tyield dispatch( 'core/notices', 'removeNotice', TRASH_POST_NOTICE_ID );\n\ttry {\n\t\tconst post = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tyield apiFetch( {\n\t\t\tpath: `/wp/v2/${ postType.rest_base }/${ post.id }`,\n\t\t\tmethod: 'DELETE',\n\t\t} );\n\n\t\tyield dispatch( STORE_KEY, 'savePost' );\n\t} catch ( error ) {\n\t\tyield dispatch(\n\t\t\t'core/notices',\n\t\t\t'createErrorNotice',\n\t\t\t...getNotificationArgumentsForTrashFail( { error } )\n\t\t);\n\t}\n}\n\n/**\n * Action generator used in signalling that the post should autosave.\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport function* autosave( options ) {\n\tyield dispatch( STORE_KEY, 'savePost', { isAutosave: true, ...options } );\n}\n\nexport function* __experimentalLocalAutosave() {\n\tconst post = yield select( STORE_KEY, 'getCurrentPost' );\n\tconst isPostNew = yield select( STORE_KEY, 'isEditedPostNew' );\n\tconst title = yield select( STORE_KEY, 'getEditedPostAttribute', 'title' );\n\tconst content = yield select(\n\t\tSTORE_KEY,\n\t\t'getEditedPostAttribute',\n\t\t'content'\n\t);\n\tconst excerpt = yield select(\n\t\tSTORE_KEY,\n\t\t'getEditedPostAttribute',\n\t\t'excerpt'\n\t);\n\tyield {\n\t\ttype: 'LOCAL_AUTOSAVE_SET',\n\t\tpostId: post.id,\n\t\tisPostNew,\n\t\ttitle,\n\t\tcontent,\n\t\texcerpt,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that undo history should\n * restore last popped state.\n *\n * @yield {Object} Action object.\n */\nexport function* redo() {\n\tyield dispatch( 'core', 'redo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history should pop.\n *\n * @yield {Object} Action object.\n */\nexport function* undo() {\n\tyield dispatch( 'core', 'undo' );\n}\n\n/**\n * Returns an action object used in signalling that undo history record should\n * be created.\n *\n * @return {Object} Action object.\n */\nexport function createUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Returns an action object used to lock the editor.\n *\n * @param {Object}  lock Details about the post lock status, user, and nonce.\n *\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Returns an action object used to fetch a single reusable block or all\n * reusable blocks from the REST API into the store.\n *\n * @param {?string} id If given, only a single reusable block with this ID will\n *                     be fetched.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalFetchReusableBlocks( id ) {\n\treturn {\n\t\ttype: 'FETCH_REUSABLE_BLOCKS',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that reusable blocks have been\n * received. `results` is an array of objects containing:\n *  - `reusableBlock` - Details about how the reusable block is persisted.\n *  - `parsedBlock` - The original block.\n *\n * @param {Object[]} results Reusable blocks received.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveReusableBlocks( results ) {\n\treturn {\n\t\ttype: 'RECEIVE_REUSABLE_BLOCKS',\n\t\tresults,\n\t};\n}\n\n/**\n * Returns an action object used to save a reusable block that's in the store to\n * the REST API.\n *\n * @param {Object} id The ID of the reusable block to save.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalSaveReusableBlock( id ) {\n\treturn {\n\t\ttype: 'SAVE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used to delete a reusable block via the REST API.\n *\n * @param {number} id The ID of the reusable block to delete.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalDeleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a reusable block is\n * to be updated.\n *\n * @param {number} id      The ID of the reusable block to update.\n * @param {Object} changes The changes to apply.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalUpdateReusableBlock( id, changes ) {\n\treturn {\n\t\ttype: 'UPDATE_REUSABLE_BLOCK',\n\t\tid,\n\t\tchanges,\n\t};\n}\n\n/**\n * Returns an action object used to convert a reusable block into a static\n * block.\n *\n * @param {string} clientId The client ID of the block to attach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Returns an action object used to convert a static block into a reusable\n * block.\n *\n * @param {string} clientIds The client IDs of the block to detach.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalConvertBlockToReusable( clientIds ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_REUSABLE',\n\t\tclientIds: castArray( clientIds ),\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has enabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function enablePublishSidebar() {\n\treturn {\n\t\ttype: 'ENABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user has disabled the\n * publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function disablePublishSidebar() {\n\treturn {\n\t\ttype: 'DISABLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * const { subscribe } = wp.data;\n *\n * const initialPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n *\n * // Only allow publishing posts that are set to a future date.\n * if ( 'publish' !== initialPostStatus ) {\n *\n * \t// Track locking.\n * \tlet locked = false;\n *\n * \t// Watch for the publish event.\n * \tlet unssubscribe = subscribe( () => {\n * \t\tconst currentPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n * \t\tif ( 'publish' !== currentPostStatus ) {\n *\n * \t\t\t// Compare the post date to the current date, lock the post if the date isn't in the future.\n * \t\t\tconst postDate = new Date( wp.data.select( 'core/editor' ).getEditedPostAttribute( 'date' ) );\n * \t\t\tconst currentDate = new Date();\n * \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n * \t\t\t\tif ( ! locked ) {\n * \t\t\t\t\tlocked = true;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).lockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t} else {\n * \t\t\t\tif ( locked ) {\n * \t\t\t\t\tlocked = false;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).unlockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t}\n * \t\t}\n * \t} );\n * }\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post saving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post autosaving is locked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Lock post autosaving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).lockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that post autosaving is unlocked.\n *\n * @param  {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n *\n * @yield {Object} Action object\n */\nexport function* resetEditorBlocks( blocks, options = {} ) {\n\tconst {\n\t\t__unstableShouldCreateUndoLevel,\n\t\tselectionStart,\n\t\tselectionEnd,\n\t} = options;\n\tconst edits = { blocks, selectionStart, selectionEnd };\n\n\tif ( __unstableShouldCreateUndoLevel !== false ) {\n\t\tconst { id, type } = yield select( STORE_KEY, 'getCurrentPost' );\n\t\tconst noChange =\n\t\t\t( yield __unstableSyncSelect(\n\t\t\t\t'core',\n\t\t\t\t'getEditedEntityRecord',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t) ).blocks === edits.blocks;\n\t\tif ( noChange ) {\n\t\t\treturn yield dispatch(\n\t\t\t\t'core',\n\t\t\t\t'__unstableCreateUndoLevel',\n\t\t\t\t'postType',\n\t\t\t\ttype,\n\t\t\t\tid\n\t\t\t);\n\t\t}\n\n\t\t// We create a new function here on every persistent edit\n\t\t// to make sure the edit makes the post dirty and creates\n\t\t// a new undo level.\n\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\tserializeBlocks( blocksForSerialization );\n\t}\n\tyield* editPost( edits );\n}\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction = ( name ) =>\n\tfunction* ( ...args ) {\n\t\tdeprecated( \"`wp.data.dispatch( 'core/editor' ).\" + name + '`', {\n\t\t\talternative:\n\t\t\t\t\"`wp.data.dispatch( 'core/block-editor' ).\" + name + '`',\n\t\t} );\n\t\tyield dispatch( 'core/block-editor', name, ...args );\n\t};\n\n/**\n * @see resetBlocks in core/block-editor store.\n */\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\n\n/**\n * @see receiveBlocks in core/block-editor store.\n */\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\n\n/**\n * @see updateBlock in core/block-editor store.\n */\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\n\n/**\n * @see updateBlockAttributes in core/block-editor store.\n */\nexport const updateBlockAttributes = getBlockEditorAction(\n\t'updateBlockAttributes'\n);\n\n/**\n * @see selectBlock in core/block-editor store.\n */\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\n\n/**\n * @see startMultiSelect in core/block-editor store.\n */\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\n\n/**\n * @see stopMultiSelect in core/block-editor store.\n */\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\n\n/**\n * @see multiSelect in core/block-editor store.\n */\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\n\n/**\n * @see clearSelectedBlock in core/block-editor store.\n */\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\n\n/**\n * @see toggleSelection in core/block-editor store.\n */\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\n\n/**\n * @see replaceBlocks in core/block-editor store.\n */\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\n\n/**\n * @see replaceBlock in core/block-editor store.\n */\nexport const replaceBlock = getBlockEditorAction( 'replaceBlock' );\n\n/**\n * @see moveBlocksDown in core/block-editor store.\n */\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\n\n/**\n * @see moveBlocksUp in core/block-editor store.\n */\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\n\n/**\n * @see moveBlockToPosition in core/block-editor store.\n */\nexport const moveBlockToPosition = getBlockEditorAction(\n\t'moveBlockToPosition'\n);\n\n/**\n * @see insertBlock in core/block-editor store.\n */\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\n\n/**\n * @see insertBlocks in core/block-editor store.\n */\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\n\n/**\n * @see showInsertionPoint in core/block-editor store.\n */\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\n\n/**\n * @see hideInsertionPoint in core/block-editor store.\n */\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\n\n/**\n * @see setTemplateValidity in core/block-editor store.\n */\nexport const setTemplateValidity = getBlockEditorAction(\n\t'setTemplateValidity'\n);\n\n/**\n * @see synchronizeTemplate in core/block-editor store.\n */\nexport const synchronizeTemplate = getBlockEditorAction(\n\t'synchronizeTemplate'\n);\n\n/**\n * @see mergeBlocks in core/block-editor store.\n */\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\n\n/**\n * @see removeBlocks in core/block-editor store.\n */\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\n\n/**\n * @see removeBlock in core/block-editor store.\n */\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\n\n/**\n * @see toggleBlockMode in core/block-editor store.\n */\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\n\n/**\n * @see startTyping in core/block-editor store.\n */\nexport const startTyping = getBlockEditorAction( 'startTyping' );\n\n/**\n * @see stopTyping in core/block-editor store.\n */\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\n\n/**\n * @see enterFormattedText in core/block-editor store.\n */\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\n\n/**\n * @see exitFormattedText in core/block-editor store.\n */\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\n\n/**\n * @see insertDefaultBlock in core/block-editor store.\n */\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\n\n/**\n * @see updateBlockListSettings in core/block-editor store.\n */\nexport const updateBlockListSettings = getBlockEditorAction(\n\t'updateBlockListSettings'\n);\n"]}