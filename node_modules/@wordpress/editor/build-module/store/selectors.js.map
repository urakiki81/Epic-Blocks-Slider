{"version":3,"sources":["@wordpress/editor/src/store/selectors.js"],"names":["find","get","has","map","pick","mapValues","includes","some","createSelector","getFreeformContentHandlerName","getDefaultBlockName","isUnmodifiedDefaultBlock","isInTheFuture","getDate","addQueryArgs","createRegistrySelector","deprecated","Platform","PREFERENCES_DEFAULTS","EDIT_MERGE_PROPERTIES","POST_UPDATE_TRANSACTION_ID","PERMALINK_POSTNAME_REGEX","ONE_MINUTE_IN_MS","AUTOSAVE_PROPERTIES","getPostRawValue","serializeBlocks","cleanForSlug","EMPTY_OBJECT","EMPTY_ARRAY","hasEditorUndo","select","hasUndo","hasEditorRedo","hasRedo","isEditedPostNew","state","getCurrentPost","status","hasChangedContent","edits","getPostEdits","isEditedPostDirty","postType","getCurrentPostType","postId","getCurrentPostId","hasEditsForEntityRecord","hasNonPostEntityChanges","enableFullSiteEditing","getEditorSettings","__experimentalEnableFullSiteEditing","dirtyEntityRecords","__experimentalGetDirtyEntityRecords","type","id","entityRecord","kind","name","key","isCleanNewPost","post","getRawEntityRecord","getCurrentPostRevisionsCount","getCurrentPostLastRevisionId","getEntityRecordEdits","getReferenceByDistinctEdits","alternative","getCurrentPostAttribute","attributeName","hasOwnProperty","getNestedEditedPostProperty","getEditedPostAttribute","getEditedPostContent","getAutosaveAttribute","currentUserId","getCurrentUser","autosave","getAutosave","getEditedPostVisibility","password","isCurrentPostPending","isCurrentPostPublished","currentPost","indexOf","Date","Number","date","isCurrentPostScheduled","isEditedPostPublishable","isEditedPostSaveable","isSavingPost","isEditedPostEmpty","OS","blocks","getEditorBlocks","length","blockName","isEditedPostAutosaveable","isPostAutosavingLocked","hasFetchedAutosave","hasFetchedAutosaves","field","plugin","hasAutosave","isEditedPostBeingScheduled","checkedDate","isEditedPostDateFloating","modified","isSavingEntityRecord","didPostSaveRequestSucceed","getLastEntitySaveError","didPostSaveRequestFail","isAutosavingPost","saving","isPreviewingPost","options","isPreview","getEditedPostPreviewLink","pending","previewLink","preview","featuredImageId","_thumbnail_id","getSuggestedPostFormat","provider","attributes","providerNameSlug","getBlocksForSerialization","hint","editor","present","value","isSingleUnmodifiedDefaultBlock","record","getEditedEntityRecord","content","__experimentalGetReusableBlock","ref","block","reusableBlocks","data","isTemporary","isNaN","parseInt","__experimentalIsSavingReusableBlock","isSaving","__experimentalIsFetchingReusableBlock","isFetching","__experimentalGetReusableBlocks","getStateBeforeOptimisticTransaction","transactionId","transaction","optimist","entry","beforeState","action","isPublishingPost","stateBeforeRequest","isPermalinkEditable","permalinkTemplate","test","getPermalink","permalinkParts","getPermalinkParts","prefix","postName","suffix","getEditedPostSlug","split","inSomeHistory","predicate","isPostLocked","postLock","isLocked","isPostSavingLocked","Object","keys","postSavingLock","postAutosavingLock","isPostLockTakeover","isTakeover","getPostLockUser","user","getActivePostLock","activePostLock","canUserUseUnfilteredHTML","isPublishSidebarEnabled","preferences","getEditorSelectionStart","getEditorSelectionEnd","__unstableIsEditorReady","isReady","editorSettings","getBlockEditorSelector","args","getBlockName","isBlockValid","getBlockAttributes","getBlock","getBlocks","__unstableGetBlockWithoutInnerBlocks","getClientIdsOfDescendants","getClientIdsWithDescendants","getGlobalBlockCount","getBlocksByClientId","getBlockCount","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","getBlockHierarchyRootClientId","getAdjacentBlockClientId","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","getMultiSelectedBlockClientIds","getMultiSelectedBlocks","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockOrder","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","isTyping","isCaretWithinFormattedText","getBlockInsertionPoint","isBlockInsertionPointVisible","isValidTemplate","getTemplate","getTemplateLock","canInsertBlockType","getInserterItems","hasInserterItems","getBlockListSettings"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, get, has, map, pick, mapValues, includes, some } from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetFreeformContentHandlerName,\n\tgetDefaultBlockName,\n\tisUnmodifiedDefaultBlock,\n} from '@wordpress/blocks';\nimport { isInTheFuture, getDate } from '@wordpress/date';\nimport { addQueryArgs } from '@wordpress/url';\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\nimport { Platform } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS } from './defaults';\nimport {\n\tEDIT_MERGE_PROPERTIES,\n\tPOST_UPDATE_TRANSACTION_ID,\n\tPERMALINK_POSTNAME_REGEX,\n\tONE_MINUTE_IN_MS,\n\tAUTOSAVE_PROPERTIES,\n} from './constants';\nimport { getPostRawValue } from './reducer';\nimport serializeBlocks from './utils/serialize-blocks';\nimport { cleanForSlug } from '../utils/url';\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns true if any past editor history snapshots exist, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether undo history exists.\n */\nexport const hasEditorUndo = createRegistrySelector( ( select ) => () => {\n\treturn select( 'core' ).hasUndo();\n} );\n\n/**\n * Returns true if any future editor history snapshots exist, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether redo history exists.\n */\nexport const hasEditorRedo = createRegistrySelector( ( select ) => () => {\n\treturn select( 'core' ).hasRedo();\n} );\n\n/**\n * Returns true if the currently edited post is yet to be saved, or false if\n * the post has been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is new.\n */\nexport function isEditedPostNew( state ) {\n\treturn getCurrentPost( state ).status === 'auto-draft';\n}\n\n/**\n * Returns true if content includes unsaved changes, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether content includes unsaved changes.\n */\nexport function hasChangedContent( state ) {\n\tconst edits = getPostEdits( state );\n\n\treturn (\n\t\t'blocks' in edits ||\n\t\t// `edits` is intended to contain only values which are different from\n\t\t// the saved post, so the mere presence of a property is an indicator\n\t\t// that the value is different than what is known to be saved. While\n\t\t// content in Visual mode is represented by the blocks state, in Text\n\t\t// mode it is tracked by `edits.content`.\n\t\t'content' in edits\n\t);\n}\n\n/**\n * Returns true if there are unsaved values for the current edit session, or\n * false if the editing state matches the saved or new post.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether unsaved values exist.\n */\nexport const isEditedPostDirty = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\t// Edits should contain only fields which differ from the saved post (reset\n\t\t// at initial load and save complete). Thus, a non-empty edits state can be\n\t\t// inferred to contain unsaved values.\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\tif (\n\t\t\tselect( 'core' ).hasEditsForEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\tpostType,\n\t\t\t\tpostId\n\t\t\t)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n);\n\n/**\n * Returns true if there are unsaved edits for entities other than\n * the editor's post, and false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether there are edits or not.\n */\nexport const hasNonPostEntityChanges = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst enableFullSiteEditing = getEditorSettings( state )\n\t\t\t.__experimentalEnableFullSiteEditing;\n\t\tif ( ! enableFullSiteEditing ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst dirtyEntityRecords = select(\n\t\t\t'core'\n\t\t).__experimentalGetDirtyEntityRecords();\n\t\tconst { type, id } = getCurrentPost( state );\n\t\treturn some(\n\t\t\tdirtyEntityRecords,\n\t\t\t( entityRecord ) =>\n\t\t\t\tentityRecord.kind !== 'postType' ||\n\t\t\t\tentityRecord.name !== type ||\n\t\t\t\tentityRecord.key !== id\n\t\t);\n\t}\n);\n\n/**\n * Returns true if there are no unsaved values for the current edit session and\n * if the currently edited post is new (has never been saved before).\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether new post and unsaved values exist.\n */\nexport function isCleanNewPost( state ) {\n\treturn ! isEditedPostDirty( state ) && isEditedPostNew( state );\n}\n\n/**\n * Returns the post currently being edited in its last known saved state, not\n * including unsaved edits. Returns an object containing relevant default post\n * values if the post has not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Post object.\n */\nexport const getCurrentPost = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst postType = getCurrentPostType( state );\n\n\t\tconst post = select( 'core' ).getRawEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tif ( post ) {\n\t\t\treturn post;\n\t\t}\n\n\t\t// This exists for compatibility with the previous selector behavior\n\t\t// which would guarantee an object return based on the editor reducer's\n\t\t// default empty object state.\n\t\treturn EMPTY_OBJECT;\n\t}\n);\n\n/**\n * Returns the post type of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post type.\n */\nexport function getCurrentPostType( state ) {\n\treturn state.postType;\n}\n\n/**\n * Returns the ID of the post currently being edited, or null if the post has\n * not yet been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of current post.\n */\nexport function getCurrentPostId( state ) {\n\treturn state.postId;\n}\n\n/**\n * Returns the number of revisions of the post currently being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of revisions.\n */\nexport function getCurrentPostRevisionsCount( state ) {\n\treturn get(\n\t\tgetCurrentPost( state ),\n\t\t[ '_links', 'version-history', 0, 'count' ],\n\t\t0\n\t);\n}\n\n/**\n * Returns the last revision ID of the post currently being edited,\n * or null if the post has no revisions.\n *\n * @param {Object} state Global application state.\n *\n * @return {?number} ID of the last revision.\n */\nexport function getCurrentPostLastRevisionId( state ) {\n\treturn get(\n\t\tgetCurrentPost( state ),\n\t\t[ '_links', 'predecessor-version', 0, 'id' ],\n\t\tnull\n\t);\n}\n\n/**\n * Returns any post values which have been changed in the editor but not yet\n * been saved.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Object of key value pairs comprising unsaved edits.\n */\nexport const getPostEdits = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn (\n\t\tselect( 'core' ).getEntityRecordEdits( 'postType', postType, postId ) ||\n\t\tEMPTY_OBJECT\n\t);\n} );\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @deprecated since Gutenberg 6.5.0.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createRegistrySelector(\n\t( select ) => (/* state */) => {\n\t\tdeprecated(\n\t\t\t\"`wp.data.select( 'core/editor' ).getReferenceByDistinctEdits`\",\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t\"`wp.data.select( 'core' ).getReferenceByDistinctEdits`\",\n\t\t\t}\n\t\t);\n\n\t\treturn select( 'core' ).getReferenceByDistinctEdits();\n\t}\n);\n\n/**\n * Returns an attribute value of the saved post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getCurrentPostAttribute( state, attributeName ) {\n\tswitch ( attributeName ) {\n\t\tcase 'type':\n\t\t\treturn getCurrentPostType( state );\n\n\t\tcase 'id':\n\t\t\treturn getCurrentPostId( state );\n\n\t\tdefault:\n\t\t\tconst post = getCurrentPost( state );\n\t\t\tif ( ! post.hasOwnProperty( attributeName ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn getPostRawValue( post[ attributeName ] );\n\t}\n}\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but merging with the attribute value for the last known\n * saved state of the post (this is needed for some nested attributes like meta).\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nconst getNestedEditedPostProperty = ( state, attributeName ) => {\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\treturn {\n\t\t...getCurrentPostAttribute( state, attributeName ),\n\t\t...edits[ attributeName ],\n\t};\n};\n\n/**\n * Returns a single attribute of the post being edited, preferring the unsaved\n * edit if one exists, but falling back to the attribute for the last known\n * saved state of the post.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Post attribute name.\n *\n * @return {*} Post attribute value.\n */\nexport function getEditedPostAttribute( state, attributeName ) {\n\t// Special cases\n\tswitch ( attributeName ) {\n\t\tcase 'content':\n\t\t\treturn getEditedPostContent( state );\n\t}\n\n\t// Fall back to saved post value if not edited.\n\tconst edits = getPostEdits( state );\n\tif ( ! edits.hasOwnProperty( attributeName ) ) {\n\t\treturn getCurrentPostAttribute( state, attributeName );\n\t}\n\n\t// Merge properties are objects which contain only the patch edit in state,\n\t// and thus must be merged with the current post attribute.\n\tif ( EDIT_MERGE_PROPERTIES.has( attributeName ) ) {\n\t\treturn getNestedEditedPostProperty( state, attributeName );\n\t}\n\n\treturn edits[ attributeName ];\n}\n\n/**\n * Returns an attribute value of the current autosave revision for a post, or\n * null if there is no autosave for the post.\n *\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )` selector\n * \t\t\t   from the '@wordpress/core-data' package and access properties on the returned\n * \t\t\t   autosave object using getPostRawValue.\n *\n * @param {Object} state         Global application state.\n * @param {string} attributeName Autosave attribute name.\n *\n * @return {*} Autosave attribute value.\n */\nexport const getAutosaveAttribute = createRegistrySelector(\n\t( select ) => ( state, attributeName ) => {\n\t\tif (\n\t\t\t! includes( AUTOSAVE_PROPERTIES, attributeName ) &&\n\t\t\tattributeName !== 'preview_link'\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst currentUserId = get( select( 'core' ).getCurrentUser(), [\n\t\t\t'id',\n\t\t] );\n\t\tconst autosave = select( 'core' ).getAutosave(\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t\tcurrentUserId\n\t\t);\n\n\t\tif ( autosave ) {\n\t\t\treturn getPostRawValue( autosave[ attributeName ] );\n\t\t}\n\t}\n);\n\n/**\n * Returns the current visibility of the post being edited, preferring the\n * unsaved value if different than the saved post. The return value is one of\n * \"private\", \"password\", or \"public\".\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post visibility.\n */\nexport function getEditedPostVisibility( state ) {\n\tconst status = getEditedPostAttribute( state, 'status' );\n\tif ( status === 'private' ) {\n\t\treturn 'private';\n\t}\n\n\tconst password = getEditedPostAttribute( state, 'password' );\n\tif ( password ) {\n\t\treturn 'password';\n\t}\n\n\treturn 'public';\n}\n\n/**\n * Returns true if post is pending review.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is pending review.\n */\nexport function isCurrentPostPending( state ) {\n\treturn getCurrentPost( state ).status === 'pending';\n}\n\n/**\n * Return true if the current post has already been published.\n *\n * @param {Object}  state       Global application state.\n * @param {Object?} currentPost Explicit current post for bypassing registry selector.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isCurrentPostPublished( state, currentPost ) {\n\tconst post = currentPost || getCurrentPost( state );\n\n\treturn (\n\t\t[ 'publish', 'private' ].indexOf( post.status ) !== -1 ||\n\t\t( post.status === 'future' &&\n\t\t\t! isInTheFuture(\n\t\t\t\tnew Date( Number( getDate( post.date ) ) - ONE_MINUTE_IN_MS )\n\t\t\t) )\n\t);\n}\n\n/**\n * Returns true if post is already scheduled.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether current post is scheduled to be posted.\n */\nexport function isCurrentPostScheduled( state ) {\n\treturn (\n\t\tgetCurrentPost( state ).status === 'future' &&\n\t\t! isCurrentPostPublished( state )\n\t);\n}\n\n/**\n * Return true if the post being edited can be published.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can been published.\n */\nexport function isEditedPostPublishable( state ) {\n\tconst post = getCurrentPost( state );\n\n\t// TODO: Post being publishable should be superset of condition of post\n\t// being saveable. Currently this restriction is imposed at UI.\n\t//\n\t//  See: <PostPublishButton /> (`isButtonEnabled` assigned by `isSaveable`)\n\n\treturn (\n\t\tisEditedPostDirty( state ) ||\n\t\t[ 'publish', 'private', 'future' ].indexOf( post.status ) === -1\n\t);\n}\n\n/**\n * Returns true if the post can be saved, or false otherwise. A post must\n * contain a title, an excerpt, or non-empty content to be valid for save.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post can be saved.\n */\nexport function isEditedPostSaveable( state ) {\n\tif ( isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\n\t// TODO: Post should not be saveable if not dirty. Cannot be added here at\n\t// this time since posts where meta boxes are present can be saved even if\n\t// the post is not dirty. Currently this restriction is imposed at UI, but\n\t// should be moved here.\n\t//\n\t//  See: `isEditedPostPublishable` (includes `isEditedPostDirty` condition)\n\t//  See: <PostSavedState /> (`forceIsDirty` prop)\n\t//  See: <PostPublishButton /> (`forceIsDirty` prop)\n\t//  See: https://github.com/WordPress/gutenberg/pull/4184\n\n\treturn (\n\t\t!! getEditedPostAttribute( state, 'title' ) ||\n\t\t!! getEditedPostAttribute( state, 'excerpt' ) ||\n\t\t! isEditedPostEmpty( state ) ||\n\t\tPlatform.OS === 'native'\n\t);\n}\n\n/**\n * Returns true if the edited post has content. A post has content if it has at\n * least one saveable block or otherwise has a non-empty content property\n * assigned.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post has content.\n */\nexport function isEditedPostEmpty( state ) {\n\t// While the condition of truthy content string is sufficient to determine\n\t// emptiness, testing saveable blocks length is a trivial operation. Since\n\t// this function can be called frequently, optimize for the fast case as a\n\t// condition of the mere existence of blocks. Note that the value of edited\n\t// content takes precedent over block content, and must fall through to the\n\t// default logic.\n\tconst blocks = getEditorBlocks( state );\n\n\tif ( blocks.length ) {\n\t\t// Pierce the abstraction of the serializer in knowing that blocks are\n\t\t// joined with with newlines such that even if every individual block\n\t\t// produces an empty save result, the serialized content is non-empty.\n\t\tif ( blocks.length > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// There are two conditions under which the optimization cannot be\n\t\t// assumed, and a fallthrough to getEditedPostContent must occur:\n\t\t//\n\t\t// 1. getBlocksForSerialization has special treatment in omitting a\n\t\t//    single unmodified default block.\n\t\t// 2. Comment delimiters are omitted for a freeform or unregistered\n\t\t//    block in its serialization. The freeform block specifically may\n\t\t//    produce an empty string in its saved output.\n\t\t//\n\t\t// For all other content, the single block is assumed to make a post\n\t\t// non-empty, if only by virtue of its own comment delimiters.\n\t\tconst blockName = blocks[ 0 ].name;\n\t\tif (\n\t\t\tblockName !== getDefaultBlockName() &&\n\t\t\tblockName !== getFreeformContentHandlerName()\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn ! getEditedPostContent( state );\n}\n\n/**\n * Returns true if the post can be autosaved, or false otherwise.\n *\n * @param {Object} state    Global application state.\n * @param {Object} autosave A raw autosave object from the REST API.\n *\n * @return {boolean} Whether the post can be autosaved.\n */\nexport const isEditedPostAutosaveable = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\t// A post must contain a title, an excerpt, or non-empty content to be valid for autosaving.\n\t\tif ( ! isEditedPostSaveable( state ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// A post is not autosavable when there is a post autosave lock.\n\t\tif ( isPostAutosavingLocked( state ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst hasFetchedAutosave = select( 'core' ).hasFetchedAutosaves(\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tconst currentUserId = get( select( 'core' ).getCurrentUser(), [\n\t\t\t'id',\n\t\t] );\n\n\t\t// Disable reason - this line causes the side-effect of fetching the autosave\n\t\t// via a resolver, moving below the return would result in the autosave never\n\t\t// being fetched.\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\tconst autosave = select( 'core' ).getAutosave(\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t\tcurrentUserId\n\t\t);\n\n\t\t// If any existing autosaves have not yet been fetched, this function is\n\t\t// unable to determine if the post is autosaveable, so return false.\n\t\tif ( ! hasFetchedAutosave ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we don't already have an autosave, the post is autosaveable.\n\t\tif ( ! autosave ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// To avoid an expensive content serialization, use the content dirtiness\n\t\t// flag in place of content field comparison against the known autosave.\n\t\t// This is not strictly accurate, and relies on a tolerance toward autosave\n\t\t// request failures for unnecessary saves.\n\t\tif ( hasChangedContent( state ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the title or excerpt has changed, the post is autosaveable.\n\t\treturn [ 'title', 'excerpt' ].some(\n\t\t\t( field ) =>\n\t\t\t\tgetPostRawValue( autosave[ field ] ) !==\n\t\t\t\tgetEditedPostAttribute( state, field )\n\t\t);\n\t}\n);\n\n/**\n * Returns the current autosave, or null if one is not set (i.e. if the post\n * has yet to be autosaved, or has been saved or published since the last\n * autosave).\n *\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )`\n * \t\t\t   selector from the '@wordpress/core-data' package.\n *\n * @param {Object} state Editor state.\n *\n * @return {?Object} Current autosave, if exists.\n */\nexport const getAutosave = createRegistrySelector( ( select ) => ( state ) => {\n\tdeprecated( \"`wp.data.select( 'core/editor' ).getAutosave()`\", {\n\t\talternative:\n\t\t\t\"`wp.data.select( 'core' ).getAutosave( postType, postId, userId )`\",\n\t\tplugin: 'Gutenberg',\n\t} );\n\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\tconst currentUserId = get( select( 'core' ).getCurrentUser(), [ 'id' ] );\n\tconst autosave = select( 'core' ).getAutosave(\n\t\tpostType,\n\t\tpostId,\n\t\tcurrentUserId\n\t);\n\treturn mapValues( pick( autosave, AUTOSAVE_PROPERTIES ), getPostRawValue );\n} );\n\n/**\n * Returns the true if there is an existing autosave, otherwise false.\n *\n * @deprecated since 5.6. Callers should use the `getAutosave( postType, postId, userId )` selector\n *             from the '@wordpress/core-data' package and check for a truthy value.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether there is an existing autosave.\n */\nexport const hasAutosave = createRegistrySelector( ( select ) => ( state ) => {\n\tdeprecated( \"`wp.data.select( 'core/editor' ).hasAutosave()`\", {\n\t\talternative:\n\t\t\t\"`!! wp.data.select( 'core' ).getAutosave( postType, postId, userId )`\",\n\t\tplugin: 'Gutenberg',\n\t} );\n\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\tconst currentUserId = get( select( 'core' ).getCurrentUser(), [ 'id' ] );\n\treturn !! select( 'core' ).getAutosave( postType, postId, currentUserId );\n} );\n\n/**\n * Return true if the post being edited is being scheduled. Preferring the\n * unsaved status values.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post has been published.\n */\nexport function isEditedPostBeingScheduled( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\t// Offset the date by one minute (network latency)\n\tconst checkedDate = new Date(\n\t\tNumber( getDate( date ) ) - ONE_MINUTE_IN_MS\n\t);\n\n\treturn isInTheFuture( checkedDate );\n}\n\n/**\n * Returns whether the current post should be considered to have a \"floating\"\n * date (i.e. that it would publish \"Immediately\" rather than at a set time).\n *\n * Unlike in the PHP backend, the REST API returns a full date string for posts\n * where the 0000-00-00T00:00:00 placeholder is present in the database. To\n * infer that a post is set to publish \"Immediately\" we check whether the date\n * and modified date are the same.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the edited post has a floating date value.\n */\nexport function isEditedPostDateFloating( state ) {\n\tconst date = getEditedPostAttribute( state, 'date' );\n\tconst modified = getEditedPostAttribute( state, 'modified' );\n\tconst status = getEditedPostAttribute( state, 'status' );\n\tif (\n\t\tstatus === 'draft' ||\n\t\tstatus === 'auto-draft' ||\n\t\tstatus === 'pending'\n\t) {\n\t\treturn date === modified || date === null;\n\t}\n\treturn false;\n}\n\n/**\n * Returns true if the post is currently being saved, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being saved.\n */\nexport const isSavingPost = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn select( 'core' ).isSavingEntityRecord(\n\t\t'postType',\n\t\tpostType,\n\t\tpostId\n\t);\n} );\n\n/**\n * Returns true if a previous post save was attempted successfully, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post was saved successfully.\n */\nexport const didPostSaveRequestSucceed = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn ! select( 'core' ).getLastEntitySaveError(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t}\n);\n\n/**\n * Returns true if a previous post save was attempted but failed, or false\n * otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post save failed.\n */\nexport const didPostSaveRequestFail = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst postId = getCurrentPostId( state );\n\t\treturn !! select( 'core' ).getLastEntitySaveError(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t}\n);\n\n/**\n * Returns true if the post is autosaving, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is autosaving.\n */\nexport function isAutosavingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\treturn !! get( state.saving, [ 'options', 'isAutosave' ] );\n}\n\n/**\n * Returns true if the post is being previewed, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the post is being previewed.\n */\nexport function isPreviewingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\treturn !! state.saving.options.isPreview;\n}\n\n/**\n * Returns the post preview link\n *\n * @param {Object} state Global application state.\n *\n * @return {string?} Preview Link.\n */\nexport function getEditedPostPreviewLink( state ) {\n\tif ( state.saving.pending || isSavingPost( state ) ) {\n\t\treturn;\n\t}\n\n\tlet previewLink = getAutosaveAttribute( state, 'preview_link' );\n\tif ( ! previewLink ) {\n\t\tpreviewLink = getEditedPostAttribute( state, 'link' );\n\t\tif ( previewLink ) {\n\t\t\tpreviewLink = addQueryArgs( previewLink, { preview: true } );\n\t\t}\n\t}\n\tconst featuredImageId = getEditedPostAttribute( state, 'featured_media' );\n\n\tif ( previewLink && featuredImageId ) {\n\t\treturn addQueryArgs( previewLink, { _thumbnail_id: featuredImageId } );\n\t}\n\n\treturn previewLink;\n}\n\n/**\n * Returns a suggested post format for the current post, inferred only if there\n * is a single block within the post and it is of a type known to match a\n * default post format. Returns null if the format cannot be determined.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Suggested post format.\n */\nexport function getSuggestedPostFormat( state ) {\n\tconst blocks = getEditorBlocks( state );\n\n\tif ( blocks.length > 2 ) return null;\n\n\tlet name;\n\t// If there is only one block in the content of the post grab its name\n\t// so we can derive a suitable post format from it.\n\tif ( blocks.length === 1 ) {\n\t\tname = blocks[ 0 ].name;\n\t\t// check for core/embed `video` and `audio` eligible suggestions\n\t\tif ( name === 'core/embed' ) {\n\t\t\tconst provider = blocks[ 0 ].attributes?.providerNameSlug;\n\t\t\tif ( [ 'youtube', 'vimeo' ].includes( provider ) ) {\n\t\t\t\tname = 'core/video';\n\t\t\t} else if ( [ 'spotify', 'soundcloud' ].includes( provider ) ) {\n\t\t\t\tname = 'core/audio';\n\t\t\t}\n\t\t}\n\t}\n\n\t// If there are two blocks in the content and the last one is a text blocks\n\t// grab the name of the first one to also suggest a post format from it.\n\tif ( blocks.length === 2 && blocks[ 1 ].name === 'core/paragraph' ) {\n\t\tname = blocks[ 0 ].name;\n\t}\n\n\t// We only convert to default post formats in core.\n\tswitch ( name ) {\n\t\tcase 'core/image':\n\t\t\treturn 'image';\n\t\tcase 'core/quote':\n\t\tcase 'core/pullquote':\n\t\t\treturn 'quote';\n\t\tcase 'core/gallery':\n\t\t\treturn 'gallery';\n\t\tcase 'core/video':\n\t\t\treturn 'video';\n\t\tcase 'core/audio':\n\t\t\treturn 'audio';\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Returns a set of blocks which are to be used in consideration of the post's\n * generated save content.\n *\n * @deprecated since Gutenberg 6.2.0.\n *\n * @param {Object} state Editor state.\n *\n * @return {WPBlock[]} Filtered set of blocks for save.\n */\nexport function getBlocksForSerialization( state ) {\n\tdeprecated( '`core/editor` getBlocksForSerialization selector', {\n\t\tplugin: 'Gutenberg',\n\t\talternative: 'getEditorBlocks',\n\t\thint: 'Blocks serialization pre-processing occurs at save time',\n\t} );\n\n\tconst blocks = state.editor.present.blocks.value;\n\n\t// WARNING: Any changes to the logic of this function should be verified\n\t// against the implementation of isEditedPostEmpty, which bypasses this\n\t// function for performance' sake, in an assumption of this current logic\n\t// being irrelevant to the optimized condition of emptiness.\n\n\t// A single unmodified default block is assumed to be equivalent to an\n\t// empty post.\n\tconst isSingleUnmodifiedDefaultBlock =\n\t\tblocks.length === 1 && isUnmodifiedDefaultBlock( blocks[ 0 ] );\n\n\tif ( isSingleUnmodifiedDefaultBlock ) {\n\t\treturn [];\n\t}\n\n\treturn blocks;\n}\n\n/**\n * Returns the content of the post being edited.\n *\n * @param {Object} state Global application state.\n *\n * @return {string} Post content.\n */\nexport const getEditedPostContent = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst postId = getCurrentPostId( state );\n\t\tconst postType = getCurrentPostType( state );\n\t\tconst record = select( 'core' ).getEditedEntityRecord(\n\t\t\t'postType',\n\t\t\tpostType,\n\t\t\tpostId\n\t\t);\n\t\tif ( record ) {\n\t\t\tif ( typeof record.content === 'function' ) {\n\t\t\t\treturn record.content( record );\n\t\t\t} else if ( record.blocks ) {\n\t\t\t\treturn serializeBlocks( record.blocks );\n\t\t\t} else if ( record.content ) {\n\t\t\t\treturn record.content;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n);\n\n/**\n * Returns the reusable block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The reusable block's ID.\n *\n * @return {Object} The reusable block, or null if none exists.\n */\nexport const __experimentalGetReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst block = state.reusableBlocks.data[ ref ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst isTemporary = isNaN( parseInt( ref ) );\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tid: isTemporary ? ref : +ref,\n\t\t\tisTemporary,\n\t\t};\n\t},\n\t( state, ref ) => [ state.reusableBlocks.data[ ref ] ]\n);\n\n/**\n * Returns whether or not the reusable block with the given ID is being saved.\n *\n * @param {Object} state Global application state.\n * @param {string} ref   The reusable block's ID.\n *\n * @return {boolean} Whether or not the reusable block is being saved.\n */\nexport function __experimentalIsSavingReusableBlock( state, ref ) {\n\treturn state.reusableBlocks.isSaving[ ref ] || false;\n}\n\n/**\n * Returns true if the reusable block with the given ID is being fetched, or\n * false otherwise.\n *\n * @param {Object} state Global application state.\n * @param {string} ref   The reusable block's ID.\n *\n * @return {boolean} Whether the reusable block is being fetched.\n */\nexport function __experimentalIsFetchingReusableBlock( state, ref ) {\n\treturn !! state.reusableBlocks.isFetching[ ref ];\n}\n\n/**\n * Returns an array of all reusable blocks.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} An array of all reusable blocks.\n */\nexport const __experimentalGetReusableBlocks = createSelector(\n\t( state ) => {\n\t\treturn map( state.reusableBlocks.data, ( value, ref ) =>\n\t\t\t__experimentalGetReusableBlock( state, ref )\n\t\t);\n\t},\n\t( state ) => [ state.reusableBlocks.data ]\n);\n\n/**\n * Returns state object prior to a specified optimist transaction ID, or `null`\n * if the transaction corresponding to the given ID cannot be found.\n *\n * @param {Object} state         Current global application state.\n * @param {Object} transactionId Optimist transaction ID.\n *\n * @return {Object} Global application state prior to transaction.\n */\nexport function getStateBeforeOptimisticTransaction( state, transactionId ) {\n\tconst transaction = find(\n\t\tstate.optimist,\n\t\t( entry ) =>\n\t\t\tentry.beforeState &&\n\t\t\tget( entry.action, [ 'optimist', 'id' ] ) === transactionId\n\t);\n\n\treturn transaction ? transaction.beforeState : null;\n}\n\n/**\n * Returns true if the post is being published, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether post is being published.\n */\nexport function isPublishingPost( state ) {\n\tif ( ! isSavingPost( state ) ) {\n\t\treturn false;\n\t}\n\n\t// Saving is optimistic, so assume that current post would be marked as\n\t// published if publishing\n\tif ( ! isCurrentPostPublished( state ) ) {\n\t\treturn false;\n\t}\n\n\t// Use post update transaction ID to retrieve the state prior to the\n\t// optimistic transaction\n\tconst stateBeforeRequest = getStateBeforeOptimisticTransaction(\n\t\tstate,\n\t\tPOST_UPDATE_TRANSACTION_ID\n\t);\n\n\t// Consider as publishing when current post prior to request was not\n\t// considered published\n\treturn (\n\t\t!! stateBeforeRequest &&\n\t\t! isCurrentPostPublished( null, stateBeforeRequest.currentPost )\n\t);\n}\n\n/**\n * Returns whether the permalink is editable or not.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether or not the permalink is editable.\n */\nexport function isPermalinkEditable( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute(\n\t\tstate,\n\t\t'permalink_template'\n\t);\n\n\treturn PERMALINK_POSTNAME_REGEX.test( permalinkTemplate );\n}\n\n/**\n * Returns the permalink for the post.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} The permalink, or null if the post is not viewable.\n */\nexport function getPermalink( state ) {\n\tconst permalinkParts = getPermalinkParts( state );\n\tif ( ! permalinkParts ) {\n\t\treturn null;\n\t}\n\n\tconst { prefix, postName, suffix } = permalinkParts;\n\n\tif ( isPermalinkEditable( state ) ) {\n\t\treturn prefix + postName + suffix;\n\t}\n\n\treturn prefix;\n}\n\n/**\n * Returns the slug for the post being edited, preferring a manually edited\n * value if one exists, then a sanitized version of the current post title, and\n * finally the post ID.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} The current slug to be displayed in the editor\n */\nexport function getEditedPostSlug( state ) {\n\treturn (\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\n\t\tcleanForSlug( getEditedPostAttribute( state, 'title' ) ) ||\n\t\tgetCurrentPostId( state )\n\t);\n}\n\n/**\n * Returns the permalink for a post, split into it's three parts: the prefix,\n * the postName, and the suffix.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} An object containing the prefix, postName, and suffix for\n *                  the permalink, or null if the post is not viewable.\n */\nexport function getPermalinkParts( state ) {\n\tconst permalinkTemplate = getEditedPostAttribute(\n\t\tstate,\n\t\t'permalink_template'\n\t);\n\tif ( ! permalinkTemplate ) {\n\t\treturn null;\n\t}\n\n\tconst postName =\n\t\tgetEditedPostAttribute( state, 'slug' ) ||\n\t\tgetEditedPostAttribute( state, 'generated_slug' );\n\n\tconst [ prefix, suffix ] = permalinkTemplate.split(\n\t\tPERMALINK_POSTNAME_REGEX\n\t);\n\n\treturn {\n\t\tprefix,\n\t\tpostName,\n\t\tsuffix,\n\t};\n}\n\n/**\n * Returns true if an optimistic transaction is pending commit, for which the\n * before state satisfies the given predicate function.\n *\n * @param {Object}   state     Editor state.\n * @param {Function} predicate Function given state, returning true if match.\n *\n * @return {boolean} Whether predicate matches for some history.\n */\nexport function inSomeHistory( state, predicate ) {\n\tconst { optimist } = state;\n\n\t// In recursion, optimist state won't exist. Assume exhausted options.\n\tif ( ! optimist ) {\n\t\treturn false;\n\t}\n\n\treturn optimist.some(\n\t\t( { beforeState } ) => beforeState && predicate( beforeState )\n\t);\n}\n\n/**\n * Returns whether the post is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostLocked( state ) {\n\treturn state.postLock.isLocked;\n}\n\n/**\n * Returns whether post saving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostSavingLocked( state ) {\n\treturn Object.keys( state.postSavingLock ).length > 0;\n}\n\n/**\n * Returns whether post autosaving is locked.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is locked.\n */\nexport function isPostAutosavingLocked( state ) {\n\treturn Object.keys( state.postAutosavingLock ).length > 0;\n}\n\n/**\n * Returns whether the edition of the post has been taken over.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Is post lock takeover.\n */\nexport function isPostLockTakeover( state ) {\n\treturn state.postLock.isTakeover;\n}\n\n/**\n * Returns details about the post lock user.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} A user object.\n */\nexport function getPostLockUser( state ) {\n\treturn state.postLock.user;\n}\n\n/**\n * Returns the active post lock.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} The lock object.\n */\nexport function getActivePostLock( state ) {\n\treturn state.postLock.activePostLock;\n}\n\n/**\n * Returns whether or not the user has the unfiltered_html capability.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the user can or can't post unfiltered HTML.\n */\nexport function canUserUseUnfilteredHTML( state ) {\n\treturn has( getCurrentPost( state ), [\n\t\t'_links',\n\t\t'wp:action-unfiltered-html',\n\t] );\n}\n\n/**\n * Returns whether the pre-publish panel should be shown\n * or skipped when the user clicks the \"publish\" button.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the pre-publish panel should be shown or not.\n */\nexport function isPublishSidebarEnabled( state ) {\n\tif ( state.preferences.hasOwnProperty( 'isPublishSidebarEnabled' ) ) {\n\t\treturn state.preferences.isPublishSidebarEnabled;\n\t}\n\treturn PREFERENCES_DEFAULTS.isPublishSidebarEnabled;\n}\n\n/**\n * Return the current block list.\n *\n * @param {Object} state\n * @return {Array} Block list.\n */\nexport function getEditorBlocks( state ) {\n\treturn getEditedPostAttribute( state, 'blocks' ) || EMPTY_ARRAY;\n}\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n/**\n * Returns the current selection start.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection start.\n */\nexport function getEditorSelectionStart( state ) {\n\treturn getEditedPostAttribute( state, 'selectionStart' );\n}\n\n/**\n * Returns the current selection end.\n *\n * @param {Object} state\n * @return {WPBlockSelection} The selection end.\n */\nexport function getEditorSelectionEnd( state ) {\n\treturn getEditedPostAttribute( state, 'selectionEnd' );\n}\n\n/**\n * Is the editor ready\n *\n * @param {Object} state\n * @return {boolean} is Ready.\n */\nexport function __unstableIsEditorReady( state ) {\n\treturn state.isReady;\n}\n\n/**\n * Returns the post editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getEditorSettings( state ) {\n\treturn state.editorSettings;\n}\n\n/*\n * Backward compatibility\n */\n\nfunction getBlockEditorSelector( name ) {\n\treturn createRegistrySelector( ( select ) => ( state, ...args ) => {\n\t\tdeprecated( \"`wp.data.select( 'core/editor' ).\" + name + '`', {\n\t\t\talternative: \"`wp.data.select( 'core/block-editor' ).\" + name + '`',\n\t\t} );\n\n\t\treturn select( 'core/block-editor' )[ name ]( ...args );\n\t} );\n}\n\n/**\n * @see getBlockName in core/block-editor store.\n */\nexport const getBlockName = getBlockEditorSelector( 'getBlockName' );\n\n/**\n * @see isBlockValid in core/block-editor store.\n */\nexport const isBlockValid = getBlockEditorSelector( 'isBlockValid' );\n\n/**\n * @see getBlockAttributes in core/block-editor store.\n */\nexport const getBlockAttributes = getBlockEditorSelector(\n\t'getBlockAttributes'\n);\n\n/**\n * @see getBlock in core/block-editor store.\n */\nexport const getBlock = getBlockEditorSelector( 'getBlock' );\n\n/**\n * @see getBlocks in core/block-editor store.\n */\nexport const getBlocks = getBlockEditorSelector( 'getBlocks' );\n\n/**\n * @see __unstableGetBlockWithoutInnerBlocks in core/block-editor store.\n */\nexport const __unstableGetBlockWithoutInnerBlocks = getBlockEditorSelector(\n\t'__unstableGetBlockWithoutInnerBlocks'\n);\n\n/**\n * @see getClientIdsOfDescendants in core/block-editor store.\n */\nexport const getClientIdsOfDescendants = getBlockEditorSelector(\n\t'getClientIdsOfDescendants'\n);\n\n/**\n * @see getClientIdsWithDescendants in core/block-editor store.\n */\nexport const getClientIdsWithDescendants = getBlockEditorSelector(\n\t'getClientIdsWithDescendants'\n);\n\n/**\n * @see getGlobalBlockCount in core/block-editor store.\n */\nexport const getGlobalBlockCount = getBlockEditorSelector(\n\t'getGlobalBlockCount'\n);\n\n/**\n * @see getBlocksByClientId in core/block-editor store.\n */\nexport const getBlocksByClientId = getBlockEditorSelector(\n\t'getBlocksByClientId'\n);\n\n/**\n * @see getBlockCount in core/block-editor store.\n */\nexport const getBlockCount = getBlockEditorSelector( 'getBlockCount' );\n\n/**\n * @see getBlockSelectionStart in core/block-editor store.\n */\nexport const getBlockSelectionStart = getBlockEditorSelector(\n\t'getBlockSelectionStart'\n);\n\n/**\n * @see getBlockSelectionEnd in core/block-editor store.\n */\nexport const getBlockSelectionEnd = getBlockEditorSelector(\n\t'getBlockSelectionEnd'\n);\n\n/**\n * @see getSelectedBlockCount in core/block-editor store.\n */\nexport const getSelectedBlockCount = getBlockEditorSelector(\n\t'getSelectedBlockCount'\n);\n\n/**\n * @see hasSelectedBlock in core/block-editor store.\n */\nexport const hasSelectedBlock = getBlockEditorSelector( 'hasSelectedBlock' );\n\n/**\n * @see getSelectedBlockClientId in core/block-editor store.\n */\nexport const getSelectedBlockClientId = getBlockEditorSelector(\n\t'getSelectedBlockClientId'\n);\n\n/**\n * @see getSelectedBlock in core/block-editor store.\n */\nexport const getSelectedBlock = getBlockEditorSelector( 'getSelectedBlock' );\n\n/**\n * @see getBlockRootClientId in core/block-editor store.\n */\nexport const getBlockRootClientId = getBlockEditorSelector(\n\t'getBlockRootClientId'\n);\n\n/**\n * @see getBlockHierarchyRootClientId in core/block-editor store.\n */\nexport const getBlockHierarchyRootClientId = getBlockEditorSelector(\n\t'getBlockHierarchyRootClientId'\n);\n\n/**\n * @see getAdjacentBlockClientId in core/block-editor store.\n */\nexport const getAdjacentBlockClientId = getBlockEditorSelector(\n\t'getAdjacentBlockClientId'\n);\n\n/**\n * @see getPreviousBlockClientId in core/block-editor store.\n */\nexport const getPreviousBlockClientId = getBlockEditorSelector(\n\t'getPreviousBlockClientId'\n);\n\n/**\n * @see getNextBlockClientId in core/block-editor store.\n */\nexport const getNextBlockClientId = getBlockEditorSelector(\n\t'getNextBlockClientId'\n);\n\n/**\n * @see getSelectedBlocksInitialCaretPosition in core/block-editor store.\n */\nexport const getSelectedBlocksInitialCaretPosition = getBlockEditorSelector(\n\t'getSelectedBlocksInitialCaretPosition'\n);\n\n/**\n * @see getMultiSelectedBlockClientIds in core/block-editor store.\n */\nexport const getMultiSelectedBlockClientIds = getBlockEditorSelector(\n\t'getMultiSelectedBlockClientIds'\n);\n\n/**\n * @see getMultiSelectedBlocks in core/block-editor store.\n */\nexport const getMultiSelectedBlocks = getBlockEditorSelector(\n\t'getMultiSelectedBlocks'\n);\n\n/**\n * @see getFirstMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getFirstMultiSelectedBlockClientId = getBlockEditorSelector(\n\t'getFirstMultiSelectedBlockClientId'\n);\n\n/**\n * @see getLastMultiSelectedBlockClientId in core/block-editor store.\n */\nexport const getLastMultiSelectedBlockClientId = getBlockEditorSelector(\n\t'getLastMultiSelectedBlockClientId'\n);\n\n/**\n * @see isFirstMultiSelectedBlock in core/block-editor store.\n */\nexport const isFirstMultiSelectedBlock = getBlockEditorSelector(\n\t'isFirstMultiSelectedBlock'\n);\n\n/**\n * @see isBlockMultiSelected in core/block-editor store.\n */\nexport const isBlockMultiSelected = getBlockEditorSelector(\n\t'isBlockMultiSelected'\n);\n\n/**\n * @see isAncestorMultiSelected in core/block-editor store.\n */\nexport const isAncestorMultiSelected = getBlockEditorSelector(\n\t'isAncestorMultiSelected'\n);\n\n/**\n * @see getMultiSelectedBlocksStartClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksStartClientId = getBlockEditorSelector(\n\t'getMultiSelectedBlocksStartClientId'\n);\n\n/**\n * @see getMultiSelectedBlocksEndClientId in core/block-editor store.\n */\nexport const getMultiSelectedBlocksEndClientId = getBlockEditorSelector(\n\t'getMultiSelectedBlocksEndClientId'\n);\n\n/**\n * @see getBlockOrder in core/block-editor store.\n */\nexport const getBlockOrder = getBlockEditorSelector( 'getBlockOrder' );\n\n/**\n * @see getBlockIndex in core/block-editor store.\n */\nexport const getBlockIndex = getBlockEditorSelector( 'getBlockIndex' );\n\n/**\n * @see isBlockSelected in core/block-editor store.\n */\nexport const isBlockSelected = getBlockEditorSelector( 'isBlockSelected' );\n\n/**\n * @see hasSelectedInnerBlock in core/block-editor store.\n */\nexport const hasSelectedInnerBlock = getBlockEditorSelector(\n\t'hasSelectedInnerBlock'\n);\n\n/**\n * @see isBlockWithinSelection in core/block-editor store.\n */\nexport const isBlockWithinSelection = getBlockEditorSelector(\n\t'isBlockWithinSelection'\n);\n\n/**\n * @see hasMultiSelection in core/block-editor store.\n */\nexport const hasMultiSelection = getBlockEditorSelector( 'hasMultiSelection' );\n\n/**\n * @see isMultiSelecting in core/block-editor store.\n */\nexport const isMultiSelecting = getBlockEditorSelector( 'isMultiSelecting' );\n\n/**\n * @see isSelectionEnabled in core/block-editor store.\n */\nexport const isSelectionEnabled = getBlockEditorSelector(\n\t'isSelectionEnabled'\n);\n\n/**\n * @see getBlockMode in core/block-editor store.\n */\nexport const getBlockMode = getBlockEditorSelector( 'getBlockMode' );\n\n/**\n * @see isTyping in core/block-editor store.\n */\nexport const isTyping = getBlockEditorSelector( 'isTyping' );\n\n/**\n * @see isCaretWithinFormattedText in core/block-editor store.\n */\nexport const isCaretWithinFormattedText = getBlockEditorSelector(\n\t'isCaretWithinFormattedText'\n);\n\n/**\n * @see getBlockInsertionPoint in core/block-editor store.\n */\nexport const getBlockInsertionPoint = getBlockEditorSelector(\n\t'getBlockInsertionPoint'\n);\n\n/**\n * @see isBlockInsertionPointVisible in core/block-editor store.\n */\nexport const isBlockInsertionPointVisible = getBlockEditorSelector(\n\t'isBlockInsertionPointVisible'\n);\n\n/**\n * @see isValidTemplate in core/block-editor store.\n */\nexport const isValidTemplate = getBlockEditorSelector( 'isValidTemplate' );\n\n/**\n * @see getTemplate in core/block-editor store.\n */\nexport const getTemplate = getBlockEditorSelector( 'getTemplate' );\n\n/**\n * @see getTemplateLock in core/block-editor store.\n */\nexport const getTemplateLock = getBlockEditorSelector( 'getTemplateLock' );\n\n/**\n * @see canInsertBlockType in core/block-editor store.\n */\nexport const canInsertBlockType = getBlockEditorSelector(\n\t'canInsertBlockType'\n);\n\n/**\n * @see getInserterItems in core/block-editor store.\n */\nexport const getInserterItems = getBlockEditorSelector( 'getInserterItems' );\n\n/**\n * @see hasInserterItems in core/block-editor store.\n */\nexport const hasInserterItems = getBlockEditorSelector( 'hasInserterItems' );\n\n/**\n * @see getBlockListSettings in core/block-editor store.\n */\nexport const getBlockListSettings = getBlockEditorSelector(\n\t'getBlockListSettings'\n);\n"]}