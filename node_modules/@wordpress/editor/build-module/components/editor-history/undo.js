import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { Button } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { displayShortcut } from '@wordpress/keycodes';
import { undo as undoIcon } from '@wordpress/icons';
import { forwardRef } from '@wordpress/element';

function EditorHistoryUndo(props, ref) {
  var hasUndo = useSelect(function (select) {
    return select('core/editor').hasEditorUndo();
  }, []);

  var _useDispatch = useDispatch('core/editor'),
      undo = _useDispatch.undo;

  return createElement(Button, _extends({}, props, {
    ref: ref,
    icon: undoIcon
    /* translators: button label text should, if possible, be under 16 characters. */
    ,
    label: __('Undo'),
    shortcut: displayShortcut.primary('z') // If there are no undo levels we don't want to actually disable this
    // button, because it will remove focus for keyboard users.
    // See: https://github.com/WordPress/gutenberg/issues/3486
    ,
    "aria-disabled": !hasUndo,
    onClick: hasUndo ? undo : undefined,
    className: "editor-history__undo"
  }));
}

export default forwardRef(EditorHistoryUndo);
//# sourceMappingURL=undo.js.map