import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';
import { BlockSettingsMenuControls } from '@wordpress/block-editor';
import { MenuItem } from '@wordpress/components';
import { reusableBlock } from '@wordpress/icons';
import { useDispatch, useSelect } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
/**
 * Menu control to convert block(s) to reusable block.
 *
 * @param {Object}   props           Component props.
 * @param {string[]} props.clientIds Client ids of selected blocks.
 *
 * @return {import('@wordpress/element').WPComponent} The menu control or null.
 */

export default function ReusableBlockConvertButton(_ref) {
  var clientIds = _ref.clientIds;
  var canConvert = useSelect(function (select) {
    var _getBlocksByClientId;

    var _select = select('core'),
        canUser = _select.canUser;

    var _select2 = select('core/block-editor'),
        getBlocksByClientId = _select2.getBlocksByClientId,
        canInsertBlockType = _select2.canInsertBlockType;

    var _select3 = select('core/editor'),
        getReusableBlock = _select3.__experimentalGetReusableBlock;

    var blocks = (_getBlocksByClientId = getBlocksByClientId(clientIds)) !== null && _getBlocksByClientId !== void 0 ? _getBlocksByClientId : [];
    var isReusable = blocks.length === 1 && blocks[0] && isReusableBlock(blocks[0]) && !!getReusableBlock(blocks[0].attributes.ref);

    var _canConvert = // Hide when this is already a reusable block.
    !isReusable && // Hide when reusable blocks are disabled.
    canInsertBlockType('core/block') && blocks.every(function (block) {
      return (// Guard against the case where a regular block has *just* been converted.
        !!block && // Hide on invalid blocks.
        block.isValid && // Hide when block doesn't support being made reusable.
        hasBlockSupport(block.name, 'reusable', true)
      );
    }) && // Hide when current doesn't have permission to do that.
    !!canUser('create', 'blocks');

    return _canConvert;
  }, [clientIds]);

  var _useDispatch = useDispatch('core/editor'),
      convertBlockToReusable = _useDispatch.__experimentalConvertBlockToReusable;

  if (!canConvert) {
    return null;
  }

  return createElement(BlockSettingsMenuControls, null, function (_ref2) {
    var onClose = _ref2.onClose;
    return createElement(MenuItem, {
      icon: reusableBlock,
      onClick: function onClick() {
        convertBlockToReusable(clientIds);
        onClose();
      }
    }, __('Add to Reusable blocks'));
  });
}
//# sourceMappingURL=reusable-block-convert-button.js.map