{"version":3,"sources":["@wordpress/editor/src/components/reusable-blocks-buttons/reusable-block-convert-button.js"],"names":["hasBlockSupport","isReusableBlock","BlockSettingsMenuControls","MenuItem","reusableBlock","useDispatch","useSelect","__","ReusableBlockConvertButton","clientIds","canConvert","select","canUser","getBlocksByClientId","canInsertBlockType","getReusableBlock","__experimentalGetReusableBlock","blocks","isReusable","length","attributes","ref","_canConvert","every","block","isValid","name","convertBlockToReusable","__experimentalConvertBlockToReusable","onClose"],"mappings":";;AAAA;;;AAGA,SAASA,eAAT,EAA0BC,eAA1B,QAAiD,mBAAjD;AACA,SAASC,yBAAT,QAA0C,yBAA1C;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,iBAAvC;AACA,SAASC,EAAT,QAAmB,iBAAnB;AAEA;;;;;;;;;AAQA,eAAe,SAASC,0BAAT,OAAqD;AAAA,MAAdC,SAAc,QAAdA,SAAc;AACnE,MAAMC,UAAU,GAAGJ,SAAS,CAC3B,UAAEK,MAAF,EAAc;AAAA;;AAAA,kBACOA,MAAM,CAAE,MAAF,CADb;AAAA,QACLC,OADK,WACLA,OADK;;AAAA,mBAEuCD,MAAM,CACzD,mBADyD,CAF7C;AAAA,QAELE,mBAFK,YAELA,mBAFK;AAAA,QAEgBC,kBAFhB,YAEgBA,kBAFhB;;AAAA,mBAKgDH,MAAM,CAClE,aADkE,CALtD;AAAA,QAK2BI,gBAL3B,YAKLC,8BALK;;AASb,QAAMC,MAAM,2BAAGJ,mBAAmB,CAAEJ,SAAF,CAAtB,uEAAuC,EAAnD;AAEA,QAAMS,UAAU,GACfD,MAAM,CAACE,MAAP,KAAkB,CAAlB,IACAF,MAAM,CAAE,CAAF,CADN,IAEAhB,eAAe,CAAEgB,MAAM,CAAE,CAAF,CAAR,CAFf,IAGA,CAAC,CAAEF,gBAAgB,CAAEE,MAAM,CAAE,CAAF,CAAN,CAAYG,UAAZ,CAAuBC,GAAzB,CAJpB;;AAMA,QAAMC,WAAW,GAChB;AACA,KAAEJ,UAAF,IACA;AACAJ,IAAAA,kBAAkB,CAAE,YAAF,CAFlB,IAGAG,MAAM,CAACM,KAAP,CACC,UAAEC,KAAF;AAAA,aACC;AACA,SAAC,CAAEA,KAAH,IACA;AACAA,QAAAA,KAAK,CAACC,OAFN,IAGA;AACAzB,QAAAA,eAAe,CAAEwB,KAAK,CAACE,IAAR,EAAc,UAAd,EAA0B,IAA1B;AANhB;AAAA,KADD,CAHA,IAYA;AACA,KAAC,CAAEd,OAAO,CAAE,QAAF,EAAY,QAAZ,CAfX;;AAiBA,WAAOU,WAAP;AACA,GApC0B,EAqC3B,CAAEb,SAAF,CArC2B,CAA5B;;AADmE,qBA2C/DJ,WAAW,CAAE,aAAF,CA3CoD;AAAA,MA0C5BsB,sBA1C4B,gBA0ClEC,oCA1CkE;;AA6CnE,MAAK,CAAElB,UAAP,EAAoB;AACnB,WAAO,IAAP;AACA;;AAED,SACC,cAAC,yBAAD,QACG;AAAA,QAAImB,OAAJ,SAAIA,OAAJ;AAAA,WACD,cAAC,QAAD;AACC,MAAA,IAAI,EAAGzB,aADR;AAEC,MAAA,OAAO,EAAG,mBAAM;AACfuB,QAAAA,sBAAsB,CAAElB,SAAF,CAAtB;AACAoB,QAAAA,OAAO;AACP;AALF,OAOGtB,EAAE,CAAE,wBAAF,CAPL,CADC;AAAA,GADH,CADD;AAeA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport { BlockSettingsMenuControls } from '@wordpress/block-editor';\nimport { MenuItem } from '@wordpress/components';\nimport { reusableBlock } from '@wordpress/icons';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Menu control to convert block(s) to reusable block.\n *\n * @param {Object}   props           Component props.\n * @param {string[]} props.clientIds Client ids of selected blocks.\n *\n * @return {import('@wordpress/element').WPComponent} The menu control or null.\n */\nexport default function ReusableBlockConvertButton( { clientIds } ) {\n\tconst canConvert = useSelect(\n\t\t( select ) => {\n\t\t\tconst { canUser } = select( 'core' );\n\t\t\tconst { getBlocksByClientId, canInsertBlockType } = select(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\t\t\tconst { __experimentalGetReusableBlock: getReusableBlock } = select(\n\t\t\t\t'core/editor'\n\t\t\t);\n\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\n\n\t\t\tconst isReusable =\n\t\t\t\tblocks.length === 1 &&\n\t\t\t\tblocks[ 0 ] &&\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t\t!! getReusableBlock( blocks[ 0 ].attributes.ref );\n\n\t\t\tconst _canConvert =\n\t\t\t\t// Hide when this is already a reusable block.\n\t\t\t\t! isReusable &&\n\t\t\t\t// Hide when reusable blocks are disabled.\n\t\t\t\tcanInsertBlockType( 'core/block' ) &&\n\t\t\t\tblocks.every(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide on invalid blocks.\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide when block doesn't support being made reusable.\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide when current doesn't have permission to do that.\n\t\t\t\t!! canUser( 'create', 'blocks' );\n\n\t\t\treturn _canConvert;\n\t\t},\n\t\t[ clientIds ]\n\t);\n\n\tconst {\n\t\t__experimentalConvertBlockToReusable: convertBlockToReusable,\n\t} = useDispatch( 'core/editor' );\n\n\tif ( ! canConvert ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose } ) => (\n\t\t\t\t<MenuItem\n\t\t\t\t\ticon={ reusableBlock }\n\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\tconvertBlockToReusable( clientIds );\n\t\t\t\t\t\tonClose();\n\t\t\t\t\t} }\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Add to Reusable blocks' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n"]}