{"version":3,"sources":["@wordpress/core-data/src/controls.js"],"names":["default","triggerApiFetch","createRegistryControl","apiFetch","request","type","select","selectorName","args","resolveSelect","controls","API_FETCH","SELECT","registry","RESOLVE_SELECT","__experimentalResolveSelect"],"mappings":";;AAAA;;;AAGA,SAASA,OAAO,IAAIC,eAApB,QAA2C,sBAA3C;AACA,SAASC,qBAAT,QAAsC,iBAAtC;AAEA;;;;;;;AAMA,OAAO,SAASC,QAAT,CAAmBC,OAAnB,EAA6B;AACnC,SAAO;AACNC,IAAAA,IAAI,EAAE,WADA;AAEND,IAAAA,OAAO,EAAPA;AAFM,GAAP;AAIA;AAED;;;;;;;;;AAQA,OAAO,SAASE,MAAT,CAAiBC,YAAjB,EAAyC;AAAA,oCAAPC,IAAO;AAAPA,IAAAA,IAAO;AAAA;;AAC/C,SAAO;AACNH,IAAAA,IAAI,EAAE,QADA;AAENE,IAAAA,YAAY,EAAZA,YAFM;AAGNC,IAAAA,IAAI,EAAJA;AAHM,GAAP;AAKA;AAED;;;;;;;;;;AASA,OAAO,SAASC,aAAT,CAAwBF,YAAxB,EAAgD;AAAA,qCAAPC,IAAO;AAAPA,IAAAA,IAAO;AAAA;;AACtD,SAAO;AACNH,IAAAA,IAAI,EAAE,gBADA;AAENE,IAAAA,YAAY,EAAZA,YAFM;AAGNC,IAAAA,IAAI,EAAJA;AAHM,GAAP;AAKA;AAED,IAAME,QAAQ,GAAG;AAChBC,EAAAA,SADgB,2BACS;AAAA,QAAZP,OAAY,QAAZA,OAAY;AACxB,WAAOH,eAAe,CAAEG,OAAF,CAAtB;AACA,GAHe;AAKhBQ,EAAAA,MAAM,EAAEV,qBAAqB,CAC5B,UAAEW,QAAF;AAAA,WAAgB,iBAA8B;AAAA;;AAAA,UAA1BN,YAA0B,SAA1BA,YAA0B;AAAA,UAAZC,IAAY,SAAZA,IAAY;AAC7C,aAAO,oBAAAK,QAAQ,CAACP,MAAT,CAAiB,MAAjB,GAA2BC,YAA3B,6CAA8CC,IAA9C,EAAP;AACA,KAFD;AAAA,GAD4B,CALb;AAWhBM,EAAAA,cAAc,EAAEZ,qBAAqB,CACpC,UAAEW,QAAF;AAAA,WAAgB,iBAA8B;AAAA;;AAAA,UAA1BN,YAA0B,SAA1BA,YAA0B;AAAA,UAAZC,IAAY,SAAZA,IAAY;AAC7C,aAAO,yBAAAK,QAAQ,CACbE,2BADK,CACwB,MADxB,GAEJR,YAFI,kDAEeC,IAFf,EAAP;AAGA,KAJD;AAAA,GADoC;AAXrB,CAAjB;AAoBA,eAAeE,QAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { default as triggerApiFetch } from '@wordpress/api-fetch';\nimport { createRegistryControl } from '@wordpress/data';\n\n/**\n * Trigger an API Fetch request.\n *\n * @param {Object} request API Fetch Request Object.\n * @return {Object} control descriptor.\n */\nexport function apiFetch( request ) {\n\treturn {\n\t\ttype: 'API_FETCH',\n\t\trequest,\n\t};\n}\n\n/**\n * Calls a selector using the current state.\n *\n * @param {string} selectorName Selector name.\n * @param  {Array} args         Selector arguments.\n *\n * @return {Object} control descriptor.\n */\nexport function select( selectorName, ...args ) {\n\treturn {\n\t\ttype: 'SELECT',\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\n/**\n * Dispatches a control action for triggering a registry select that has a\n * resolver.\n *\n * @param {string}  selectorName\n * @param {Array}   args  Arguments for the select.\n *\n * @return {Object} control descriptor.\n */\nexport function resolveSelect( selectorName, ...args ) {\n\treturn {\n\t\ttype: 'RESOLVE_SELECT',\n\t\tselectorName,\n\t\targs,\n\t};\n}\n\nconst controls = {\n\tAPI_FETCH( { request } ) {\n\t\treturn triggerApiFetch( request );\n\t},\n\n\tSELECT: createRegistryControl(\n\t\t( registry ) => ( { selectorName, args } ) => {\n\t\t\treturn registry.select( 'core' )[ selectorName ]( ...args );\n\t\t}\n\t),\n\n\tRESOLVE_SELECT: createRegistryControl(\n\t\t( registry ) => ( { selectorName, args } ) => {\n\t\t\treturn registry\n\t\t\t\t.__experimentalResolveSelect( 'core' )\n\t\t\t\t[ selectorName ]( ...args );\n\t\t}\n\t),\n};\n\nexport default controls;\n"]}