{"version":3,"sources":["@wordpress/core-data/src/resolvers.js"],"names":["getAuthors","getCurrentUser","getEntityRecord","getEntityRecords","getCurrentTheme","getThemeSupports","getEmbedPreview","hasUploadPermissions","canUser","getAutosaves","getAutosave","find","includes","get","hasIn","compact","uniq","addQueryArgs","deprecated","receiveUserQuery","receiveCurrentTheme","receiveCurrentUser","receiveEntityRecords","receiveThemeSupports","receiveEmbedPreview","receiveUserPermission","receiveAutosaves","getKindEntities","DEFAULT_ENTITY_KEY","apiFetch","select","resolveSelect","ifNotResolved","getNormalizedCommaSeparable","path","users","currentUser","kind","name","key","query","entities","entity","undefined","_fields","join","baseURL","context","include","hasRecords","record","getRawEntityRecord","getEditedEntityRecord","Object","records","values","map","split","forEach","field","hasOwnProperty","shouldInvalidate","action","type","invalidateCache","activeThemes","theme_supports","url","embedProxyResponse","alternative","resource","id","methods","create","read","update","delete","method","Error","parse","response","allowHeader","headers","isAllowed","postType","postId","restBase","rest_base","autosaves","length"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, includes, get, hasIn, compact, uniq } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveCurrentTheme,\n\treceiveCurrentUser,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n\treceiveUserPermission,\n\treceiveAutosaves,\n} from './actions';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { apiFetch, select, resolveSelect } from './controls';\nimport { ifNotResolved, getNormalizedCommaSeparable } from './utils';\n\n/**\n * Requests authors from the REST API.\n */\nexport function* getAuthors() {\n\tconst users = yield apiFetch( {\n\t\tpath: '/wp/v2/users/?who=authors&per_page=-1',\n\t} );\n\tyield receiveUserQuery( 'authors', users );\n}\n\n/**\n * Requests the current user from the REST API.\n */\nexport function* getCurrentUser() {\n\tconst currentUser = yield apiFetch( { path: '/wp/v2/users/me' } );\n\tyield receiveCurrentUser( currentUser );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getEntityRecord( kind, name, key = '', query ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tif ( query !== undefined && query._fields ) {\n\t\t// If requesting specific fields, items and query assocation to said\n\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t// the ID.\n\t\tquery = {\n\t\t\t...query,\n\t\t\t_fields: uniq( [\n\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t] ).join(),\n\t\t};\n\t}\n\n\t// Disable reason: While true that an early return could leave `path`\n\t// unused, it's important that path is derived using the query prior to\n\t// additional query modifications in the condition below, since those\n\t// modifications are relevant to how the data is tracked in state, and not\n\t// for how the request is made to the REST API.\n\n\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\tconst path = addQueryArgs( entity.baseURL + '/' + key, {\n\t\t...query,\n\t\tcontext: 'edit',\n\t} );\n\n\tif ( query !== undefined ) {\n\t\tquery = { ...query, include: [ key ] };\n\n\t\t// The resolution cache won't consider query as reusable based on the\n\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\tconst hasRecords = yield select(\n\t\t\t'hasEntityRecords',\n\t\t\tkind,\n\t\t\tname,\n\t\t\tquery\n\t\t);\n\t\tif ( hasRecords ) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tconst record = yield apiFetch( { path } );\n\tyield receiveEntityRecords( kind, name, record, query );\n}\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = ifNotResolved(\n\tgetEntityRecord,\n\t'getEntityRecord'\n);\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = ifNotResolved(\n\tgetRawEntityRecord,\n\t'getRawEntityRecord'\n);\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {Object?} query  Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tif ( query._fields ) {\n\t\t// If requesting specific fields, items and query assocation to said\n\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t// the ID.\n\t\tquery = {\n\t\t\t...query,\n\t\t\t_fields: uniq( [\n\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t] ).join(),\n\t\t};\n\t}\n\n\tconst path = addQueryArgs( entity.baseURL, {\n\t\t...query,\n\t\tcontext: 'edit',\n\t} );\n\n\tlet records = Object.values( yield apiFetch( { path } ) );\n\t// If we request fields but the result doesn't contain the fields,\n\t// explicitely set these fields as \"undefined\"\n\t// that way we consider the query \"fullfilled\".\n\tif ( query._fields ) {\n\t\trecords = records.map( ( record ) => {\n\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn record;\n\t\t} );\n\t}\n\n\tyield receiveEntityRecords( kind, name, records, query );\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport function* getCurrentTheme() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveCurrentTheme( activeThemes[ 0 ] );\n}\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url   URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( {\n\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t} );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n\n/**\n * Requests Upload Permissions from the REST API.\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *            `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n */\nexport function* hasUploadPermissions() {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\tyield* canUser( 'create', 'media' );\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport function* canUser( action, resource, id ) {\n\tconst methods = {\n\t\tcreate: 'POST',\n\t\tread: 'GET',\n\t\tupdate: 'PUT',\n\t\tdelete: 'DELETE',\n\t};\n\n\tconst method = methods[ action ];\n\tif ( ! method ) {\n\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t}\n\n\tconst path = id ? `/wp/v2/${ resource }/${ id }` : `/wp/v2/${ resource }`;\n\n\tlet response;\n\ttry {\n\t\tresponse = yield apiFetch( {\n\t\t\tpath,\n\t\t\t// Ideally this would always be an OPTIONS request, but unfortunately there's\n\t\t\t// a bug in the REST API which causes the Allow header to not be sent on\n\t\t\t// OPTIONS requests to /posts/:id routes.\n\t\t\t// https://core.trac.wordpress.org/ticket/45753\n\t\t\tmethod: id ? 'GET' : 'OPTIONS',\n\t\t\tparse: false,\n\t\t} );\n\t} catch ( error ) {\n\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\treturn;\n\t}\n\n\tlet allowHeader;\n\tif ( hasIn( response, [ 'headers', 'get' ] ) ) {\n\t\t// If the request is fetched using the fetch api, the header can be\n\t\t// retrieved using the 'get' method.\n\t\tallowHeader = response.headers.get( 'allow' );\n\t} else {\n\t\t// If the request was preloaded server-side and is returned by the\n\t\t// preloading middleware, the header will be a simple property.\n\t\tallowHeader = get( response, [ 'headers', 'Allow' ], '' );\n\t}\n\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\tconst isAllowed = includes( allowHeader, method );\n\tyield receiveUserPermission( key, isAllowed );\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosaves( postType, postId ) {\n\tconst { rest_base: restBase } = yield resolveSelect(\n\t\t'getPostType',\n\t\tpostType\n\t);\n\tconst autosaves = yield apiFetch( {\n\t\tpath: `/wp/v2/${ restBase }/${ postId }/autosaves?context=edit`,\n\t} );\n\n\tif ( autosaves && autosaves.length ) {\n\t\tyield receiveAutosaves( postId, autosaves );\n\t}\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosave( postType, postId ) {\n\tyield resolveSelect( 'getAutosaves', postType, postId );\n}\n"]}