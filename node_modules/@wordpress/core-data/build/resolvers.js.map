{"version":3,"sources":["@wordpress/core-data/src/resolvers.js"],"names":["getAuthors","getCurrentUser","getEntityRecord","getEntityRecords","getCurrentTheme","getThemeSupports","getEmbedPreview","hasUploadPermissions","canUser","getAutosaves","getAutosave","path","users","currentUser","kind","name","key","query","entities","entity","undefined","_fields","DEFAULT_ENTITY_KEY","join","baseURL","context","include","hasRecords","record","getRawEntityRecord","getEditedEntityRecord","Object","records","values","map","split","forEach","field","hasOwnProperty","shouldInvalidate","action","type","invalidateCache","activeThemes","theme_supports","url","embedProxyResponse","alternative","resource","id","methods","create","read","update","delete","method","Error","parse","response","allowHeader","headers","get","isAllowed","postType","postId","restBase","rest_base","autosaves","length"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { find, includes, get, hasIn, compact, uniq } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport {\n\treceiveUserQuery,\n\treceiveCurrentTheme,\n\treceiveCurrentUser,\n\treceiveEntityRecords,\n\treceiveThemeSupports,\n\treceiveEmbedPreview,\n\treceiveUserPermission,\n\treceiveAutosaves,\n} from './actions';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { apiFetch, select, resolveSelect } from './controls';\nimport { ifNotResolved, getNormalizedCommaSeparable } from './utils';\n\n/**\n * Requests authors from the REST API.\n */\nexport function* getAuthors() {\n\tconst users = yield apiFetch( {\n\t\tpath: '/wp/v2/users/?who=authors&per_page=-1',\n\t} );\n\tyield receiveUserQuery( 'authors', users );\n}\n\n/**\n * Requests the current user from the REST API.\n */\nexport function* getCurrentUser() {\n\tconst currentUser = yield apiFetch( { path: '/wp/v2/users/me' } );\n\tyield receiveCurrentUser( currentUser );\n}\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport function* getEntityRecord( kind, name, key = '', query ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tif ( query !== undefined && query._fields ) {\n\t\t// If requesting specific fields, items and query assocation to said\n\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t// the ID.\n\t\tquery = {\n\t\t\t...query,\n\t\t\t_fields: uniq( [\n\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t] ).join(),\n\t\t};\n\t}\n\n\t// Disable reason: While true that an early return could leave `path`\n\t// unused, it's important that path is derived using the query prior to\n\t// additional query modifications in the condition below, since those\n\t// modifications are relevant to how the data is tracked in state, and not\n\t// for how the request is made to the REST API.\n\n\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\tconst path = addQueryArgs( entity.baseURL + '/' + key, {\n\t\t...query,\n\t\tcontext: 'edit',\n\t} );\n\n\tif ( query !== undefined ) {\n\t\tquery = { ...query, include: [ key ] };\n\n\t\t// The resolution cache won't consider query as reusable based on the\n\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\tconst hasRecords = yield select(\n\t\t\t'hasEntityRecords',\n\t\t\tkind,\n\t\t\tname,\n\t\t\tquery\n\t\t);\n\t\tif ( hasRecords ) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tconst record = yield apiFetch( { path } );\n\tyield receiveEntityRecords( kind, name, record, query );\n}\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = ifNotResolved(\n\tgetEntityRecord,\n\t'getEntityRecord'\n);\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = ifNotResolved(\n\tgetRawEntityRecord,\n\t'getRawEntityRecord'\n);\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind   Entity kind.\n * @param {string}  name   Entity name.\n * @param {Object?} query  Query Object.\n */\nexport function* getEntityRecords( kind, name, query = {} ) {\n\tconst entities = yield getKindEntities( kind );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tif ( query._fields ) {\n\t\t// If requesting specific fields, items and query assocation to said\n\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t// the ID.\n\t\tquery = {\n\t\t\t...query,\n\t\t\t_fields: uniq( [\n\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t] ).join(),\n\t\t};\n\t}\n\n\tconst path = addQueryArgs( entity.baseURL, {\n\t\t...query,\n\t\tcontext: 'edit',\n\t} );\n\n\tlet records = Object.values( yield apiFetch( { path } ) );\n\t// If we request fields but the result doesn't contain the fields,\n\t// explicitely set these fields as \"undefined\"\n\t// that way we consider the query \"fullfilled\".\n\tif ( query._fields ) {\n\t\trecords = records.map( ( record ) => {\n\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn record;\n\t\t} );\n\t}\n\n\tyield receiveEntityRecords( kind, name, records, query );\n}\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport function* getCurrentTheme() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveCurrentTheme( activeThemes[ 0 ] );\n}\n\n/**\n * Requests theme supports data from the index.\n */\nexport function* getThemeSupports() {\n\tconst activeThemes = yield apiFetch( {\n\t\tpath: '/wp/v2/themes?status=active',\n\t} );\n\tyield receiveThemeSupports( activeThemes[ 0 ].theme_supports );\n}\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url   URL to get the preview for.\n */\nexport function* getEmbedPreview( url ) {\n\ttry {\n\t\tconst embedProxyResponse = yield apiFetch( {\n\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t} );\n\t\tyield receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tyield receiveEmbedPreview( url, false );\n\t}\n}\n\n/**\n * Requests Upload Permissions from the REST API.\n *\n * @deprecated since 5.0. Callers should use the more generic `canUser()` selector instead of\n *            `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`.\n */\nexport function* hasUploadPermissions() {\n\tdeprecated( \"select( 'core' ).hasUploadPermissions()\", {\n\t\talternative: \"select( 'core' ).canUser( 'create', 'media' )\",\n\t} );\n\tyield* canUser( 'create', 'media' );\n}\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport function* canUser( action, resource, id ) {\n\tconst methods = {\n\t\tcreate: 'POST',\n\t\tread: 'GET',\n\t\tupdate: 'PUT',\n\t\tdelete: 'DELETE',\n\t};\n\n\tconst method = methods[ action ];\n\tif ( ! method ) {\n\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t}\n\n\tconst path = id ? `/wp/v2/${ resource }/${ id }` : `/wp/v2/${ resource }`;\n\n\tlet response;\n\ttry {\n\t\tresponse = yield apiFetch( {\n\t\t\tpath,\n\t\t\t// Ideally this would always be an OPTIONS request, but unfortunately there's\n\t\t\t// a bug in the REST API which causes the Allow header to not be sent on\n\t\t\t// OPTIONS requests to /posts/:id routes.\n\t\t\t// https://core.trac.wordpress.org/ticket/45753\n\t\t\tmethod: id ? 'GET' : 'OPTIONS',\n\t\t\tparse: false,\n\t\t} );\n\t} catch ( error ) {\n\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\treturn;\n\t}\n\n\tlet allowHeader;\n\tif ( hasIn( response, [ 'headers', 'get' ] ) ) {\n\t\t// If the request is fetched using the fetch api, the header can be\n\t\t// retrieved using the 'get' method.\n\t\tallowHeader = response.headers.get( 'allow' );\n\t} else {\n\t\t// If the request was preloaded server-side and is returned by the\n\t\t// preloading middleware, the header will be a simple property.\n\t\tallowHeader = get( response, [ 'headers', 'Allow' ], '' );\n\t}\n\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\tconst isAllowed = includes( allowHeader, method );\n\tyield receiveUserPermission( key, isAllowed );\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosaves( postType, postId ) {\n\tconst { rest_base: restBase } = yield resolveSelect(\n\t\t'getPostType',\n\t\tpostType\n\t);\n\tconst autosaves = yield apiFetch( {\n\t\tpath: `/wp/v2/${ restBase }/${ postId }/autosaves?context=edit`,\n\t} );\n\n\tif ( autosaves && autosaves.length ) {\n\t\tyield receiveAutosaves( postId, autosaves );\n\t}\n}\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport function* getAutosave( postType, postId ) {\n\tyield resolveSelect( 'getAutosaves', postType, postId );\n}\n"]}