{"version":3,"sources":["@wordpress/core-data/src/entity-provider.js"],"names":["entities","defaultEntities","reduce","acc","entity","kind","name","context","kinds","getEntity","type","Error","EntityProvider","id","children","Provider","useEntityId","useEntityProp","prop","_id","providerId","select","getEntityRecord","getEditedEntityRecord","editedEntity","value","fullValue","editEntityRecord","setValue","newValue","useEntityBlockEditor","initialEdits","blocksProp","contentProp","content","setContent","undoIgnore","initialBlocks","parsedContent","length","blocks","onInput","onChange","nextBlocks","blocksToSerialize"],"mappings":";;;;;;;;;;;;AAGA;;;;;;AAOA;;AACA;;AAKA;;;;;;AAEA,IAAMA,QAAQ,qBACVC,0BAAgBC,MAAhB,CAAwB,UAAEC,GAAF,EAAOC,MAAP,EAAmB;AAC7C,MAAK,CAAED,GAAG,CAAEC,MAAM,CAACC,IAAT,CAAV,EAA4B;AAC3BF,IAAAA,GAAG,CAAEC,MAAM,CAACC,IAAT,CAAH,GAAqB,EAArB;AACA;;AACDF,EAAAA,GAAG,CAAEC,MAAM,CAACC,IAAT,CAAH,CAAoBD,MAAM,CAACE,IAA3B,IAAoC;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAApC;AACA,SAAOJ,GAAP;AACA,CANE,EAMA,EANA,CADU,MAQVK,gBAAMN,MAAN,CAAc,UAAEC,GAAF,EAAOE,IAAP,EAAiB;AACjCF,EAAAA,GAAG,CAAEE,IAAI,CAACC,IAAP,CAAH,GAAmB,EAAnB;AACA,SAAOH,GAAP;AACA,CAHE,EAGA,EAHA,CARU,CAAd;;AAaA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAAEJ,IAAF,EAAQK,IAAR,EAAkB;AACnC,MAAK,CAAEV,QAAQ,CAAEK,IAAF,CAAf,EAA0B;AACzB,UAAM,IAAIM,KAAJ,2CAA+CN,IAA/C,OAAN;AACA;;AAED,MAAK,CAAEL,QAAQ,CAAEK,IAAF,CAAR,CAAkBK,IAAlB,CAAP,EAAkC;AACjCV,IAAAA,QAAQ,CAAEK,IAAF,CAAR,CAAkBK,IAAlB,IAA2B;AAAEH,MAAAA,OAAO,EAAE;AAAX,KAA3B;AACA;;AAED,SAAOP,QAAQ,CAAEK,IAAF,CAAR,CAAkBK,IAAlB,CAAP;AACA,CAVD;AAYA;;;;;;;;;;;;;;;AAae,SAASE,cAAT,OAAwD;AAAA,MAA7BP,IAA6B,QAA7BA,IAA6B;AAAA,MAAvBK,IAAuB,QAAvBA,IAAuB;AAAA,MAAjBG,EAAiB,QAAjBA,EAAiB;AAAA,MAAbC,QAAa,QAAbA,QAAa;AACtE,MAAMC,QAAQ,GAAGN,SAAS,CAAEJ,IAAF,EAAQK,IAAR,CAAT,CAAwBH,OAAxB,CAAgCQ,QAAjD;AACA,SAAO,4BAAC,QAAD;AAAU,IAAA,KAAK,EAAGF;AAAlB,KAAyBC,QAAzB,CAAP;AACA;AAED;;;;;;;;;AAOO,SAASE,WAAT,CAAsBX,IAAtB,EAA4BK,IAA5B,EAAmC;AACzC,SAAO,yBAAYD,SAAS,CAAEJ,IAAF,EAAQK,IAAR,CAAT,CAAwBH,OAApC,CAAP;AACA;AAED;;;;;;;;;;;;;;;;AAcO,SAASU,aAAT,CAAwBZ,IAAxB,EAA8BK,IAA9B,EAAoCQ,IAApC,EAA0CC,GAA1C,EAAgD;AACtD,MAAMC,UAAU,GAAGJ,WAAW,CAAEX,IAAF,EAAQK,IAAR,CAA9B;AACA,MAAMG,EAAE,GAAGM,GAAH,aAAGA,GAAH,cAAGA,GAAH,GAAUC,UAAlB;;AAFsD,mBAIzB,qBAC5B,UAAEC,MAAF,EAAc;AAAA,kBACsCA,MAAM,CAAE,MAAF,CAD5C;AAAA,QACLC,eADK,WACLA,eADK;AAAA,QACYC,qBADZ,WACYA,qBADZ;;AAEb,QAAMnB,MAAM,GAAGkB,eAAe,CAAEjB,IAAF,EAAQK,IAAR,EAAcG,EAAd,CAA9B,CAFa,CAEqC;;AAClD,QAAMW,YAAY,GAAGD,qBAAqB,CAAElB,IAAF,EAAQK,IAAR,EAAcG,EAAd,CAA1C;AACA,WAAOT,MAAM,IAAIoB,YAAV,GACJ;AACAC,MAAAA,KAAK,EAAED,YAAY,CAAEN,IAAF,CADnB;AAEAQ,MAAAA,SAAS,EAAEtB,MAAM,CAAEc,IAAF;AAFjB,KADI,GAKJ,EALH;AAMA,GAX2B,EAY5B,CAAEb,IAAF,EAAQK,IAAR,EAAcG,EAAd,EAAkBK,IAAlB,CAZ4B,CAJyB;AAAA,MAI9CO,KAJ8C,cAI9CA,KAJ8C;AAAA,MAIvCC,SAJuC,cAIvCA,SAJuC;;AAAA,qBAkBzB,uBAAa,MAAb,CAlByB;AAAA,MAkB9CC,gBAlB8C,gBAkB9CA,gBAlB8C;;AAmBtD,MAAMC,QAAQ,GAAG,0BAChB,UAAEC,QAAF,EAAgB;AACfF,IAAAA,gBAAgB,CAAEtB,IAAF,EAAQK,IAAR,EAAcG,EAAd,oCACbK,IADa,EACLW,QADK,EAAhB;AAGA,GALe,EAMhB,CAAExB,IAAF,EAAQK,IAAR,EAAcG,EAAd,EAAkBK,IAAlB,CANgB,CAAjB;AASA,SAAO,CAAEO,KAAF,EAASG,QAAT,EAAmBF,SAAnB,CAAP;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBO,SAASI,oBAAT,CACNzB,IADM,EAENK,IAFM,EASL;AAAA,kFADG,EACH;AAAA,MALAqB,YAKA,SALAA,YAKA;AAAA,+BAJAC,UAIA;AAAA,MAJAA,UAIA,iCAJa,QAIb;AAAA,gCAHAC,WAGA;AAAA,MAHAA,WAGA,kCAHc,SAGd;AAAA,MAFId,GAEJ,SAFAN,EAEA;;AACD,MAAMO,UAAU,GAAGJ,WAAW,CAAEX,IAAF,EAAQK,IAAR,CAA9B;AACA,MAAMG,EAAE,GAAGM,GAAH,aAAGA,GAAH,cAAGA,GAAH,GAAUC,UAAlB;;AAFC,uBAI+BH,aAAa,CAC5CZ,IAD4C,EAE5CK,IAF4C,EAG5CuB,WAH4C,EAI5CpB,EAJ4C,CAJ5C;AAAA;AAAA,MAIOqB,OAJP;AAAA,MAIgBC,UAJhB;;AAAA,sBAW4B,uBAAa,MAAb,CAX5B;AAAA,MAWOR,gBAXP,iBAWOA,gBAXP;;AAYD,0BAAW,YAAM;AAChB,QAAKI,YAAL,EAAoB;AACnBJ,MAAAA,gBAAgB,CAAEtB,IAAF,EAAQK,IAAR,EAAcG,EAAd,EAAkBkB,YAAlB,EAAgC;AAC/CK,QAAAA,UAAU,EAAE;AADmC,OAAhC,CAAhB;AAGA;AACD,GAND,EAMG,CAAEvB,EAAF,CANH;AAOA,MAAMwB,aAAa,GAAG,sBAAS,YAAM;AACpC;AACA;AACA,QAAKH,OAAO,IAAI,OAAOA,OAAP,KAAmB,UAAnC,EAAgD;AAC/C,UAAMI,aAAa,GAAG,mBAAOJ,OAAP,CAAtB;AACA,aAAOI,aAAa,CAACC,MAAd,GAAuBD,aAAvB,GAAuC,EAA9C;AACA;;AACD,WAAO,EAAP;AACA,GARqB,EAQnB,CAAEJ,OAAF,CARmB,CAAtB;;AAnBC,wBA4B2CjB,aAAa,CACxDZ,IADwD,EAExDK,IAFwD,EAGxDsB,UAHwD,EAIxDnB,EAJwD,CA5BxD;AAAA;AAAA;AAAA,MA4BO2B,MA5BP,iCA4BgBH,aA5BhB;AAAA,MA4B+BI,OA5B/B;;AAmCD,MAAMC,QAAQ,GAAG,0BAChB,UAAEC,UAAF,EAAkB;AACjBF,IAAAA,OAAO,CAAEE,UAAF,CAAP,CADiB,CAEjB;;AACAR,IAAAA,UAAU,CAAE;AAAA,UAAYS,iBAAZ,SAAIJ,MAAJ;AAAA,aACX,uBAAWI,iBAAX,CADW;AAAA,KAAF,CAAV;AAGA,GAPe,EAQhB,CAAEH,OAAF,EAAWN,UAAX,CARgB,CAAjB;AAUA,SAAO,CAAEK,MAAF,EAAUC,OAAV,EAAmBC,QAAnB,CAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tcreateContext,\n\tuseContext,\n\tuseCallback,\n\tuseEffect,\n\tuseMemo,\n} from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { parse, serialize } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { defaultEntities, kinds } from './entities';\n\nconst entities = {\n\t...defaultEntities.reduce( ( acc, entity ) => {\n\t\tif ( ! acc[ entity.kind ] ) {\n\t\t\tacc[ entity.kind ] = {};\n\t\t}\n\t\tacc[ entity.kind ][ entity.name ] = { context: createContext() };\n\t\treturn acc;\n\t}, {} ),\n\t...kinds.reduce( ( acc, kind ) => {\n\t\tacc[ kind.name ] = {};\n\t\treturn acc;\n\t}, {} ),\n};\nconst getEntity = ( kind, type ) => {\n\tif ( ! entities[ kind ] ) {\n\t\tthrow new Error( `Missing entity config for kind: ${ kind }.` );\n\t}\n\n\tif ( ! entities[ kind ][ type ] ) {\n\t\tentities[ kind ][ type ] = { context: createContext() };\n\t}\n\n\treturn entities[ kind ][ type ];\n};\n\n/**\n * Context provider component for providing\n * an entity for a specific entity type.\n *\n * @param {Object} props          The component's props.\n * @param {string} props.kind     The entity kind.\n * @param {string} props.type     The entity type.\n * @param {number} props.id       The entity ID.\n * @param {*}      props.children The children to wrap.\n *\n * @return {Object} The provided children, wrapped with\n *                   the entity's context provider.\n */\nexport default function EntityProvider( { kind, type, id, children } ) {\n\tconst Provider = getEntity( kind, type ).context.Provider;\n\treturn <Provider value={ id }>{ children }</Provider>;\n}\n\n/**\n * Hook that returns the ID for the nearest\n * provided entity of the specified type.\n *\n * @param {string} kind The entity kind.\n * @param {string} type The entity type.\n */\nexport function useEntityId( kind, type ) {\n\treturn useContext( getEntity( kind, type ).context );\n}\n\n/**\n * Hook that returns the value and a setter for the\n * specified property of the nearest provided\n * entity of the specified type.\n *\n * @param {string} kind  The entity kind.\n * @param {string} type  The entity type.\n * @param {string} prop  The property name.\n * @param {string} [_id] An entity ID to use instead of the context-provided one.\n *\n * @return {[*, Function]} A tuple where the first item is the\n *                          property value and the second is the\n *                          setter.\n */\nexport function useEntityProp( kind, type, prop, _id ) {\n\tconst providerId = useEntityId( kind, type );\n\tconst id = _id ?? providerId;\n\n\tconst { value, fullValue } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getEntityRecord, getEditedEntityRecord } = select( 'core' );\n\t\t\tconst entity = getEntityRecord( kind, type, id ); // Trigger resolver.\n\t\t\tconst editedEntity = getEditedEntityRecord( kind, type, id );\n\t\t\treturn entity && editedEntity\n\t\t\t\t? {\n\t\t\t\t\t\tvalue: editedEntity[ prop ],\n\t\t\t\t\t\tfullValue: entity[ prop ],\n\t\t\t\t  }\n\t\t\t\t: {};\n\t\t},\n\t\t[ kind, type, id, prop ]\n\t);\n\tconst { editEntityRecord } = useDispatch( 'core' );\n\tconst setValue = useCallback(\n\t\t( newValue ) => {\n\t\t\teditEntityRecord( kind, type, id, {\n\t\t\t\t[ prop ]: newValue,\n\t\t\t} );\n\t\t},\n\t\t[ kind, type, id, prop ]\n\t);\n\n\treturn [ value, setValue, fullValue ];\n}\n\n/**\n * Hook that returns block content getters and setters for\n * the nearest provided entity of the specified type.\n *\n * The return value has the shape `[ blocks, onInput, onChange ]`.\n * `onInput` is for block changes that don't create undo levels\n * or dirty the post, non-persistent changes, and `onChange` is for\n * peristent changes. They map directly to the props of a\n * `BlockEditorProvider` and are intended to be used with it,\n * or similar components or hooks.\n *\n * @param {string} kind                            The entity kind.\n * @param {string} type                            The entity type.\n * @param {Object} options\n * @param {Object} [options.initialEdits]          Initial edits object for the entity record.\n * @param {string} [options.blocksProp='blocks']   The name of the entity prop that holds the blocks array.\n * @param {string} [options.contentProp='content'] The name of the entity prop that holds the serialized blocks.\n * @param {string} [options.id]                    An entity ID to use instead of the context-provided one.\n *\n * @return {[WPBlock[], Function, Function]} The block array and setters.\n */\nexport function useEntityBlockEditor(\n\tkind,\n\ttype,\n\t{\n\t\tinitialEdits,\n\t\tblocksProp = 'blocks',\n\t\tcontentProp = 'content',\n\t\tid: _id,\n\t} = {}\n) {\n\tconst providerId = useEntityId( kind, type );\n\tconst id = _id ?? providerId;\n\n\tconst [ content, setContent ] = useEntityProp(\n\t\tkind,\n\t\ttype,\n\t\tcontentProp,\n\t\tid\n\t);\n\n\tconst { editEntityRecord } = useDispatch( 'core' );\n\tuseEffect( () => {\n\t\tif ( initialEdits ) {\n\t\t\teditEntityRecord( kind, type, id, initialEdits, {\n\t\t\t\tundoIgnore: true,\n\t\t\t} );\n\t\t}\n\t}, [ id ] );\n\tconst initialBlocks = useMemo( () => {\n\t\t// Guard against other instances that might have\n\t\t// set content to a function already.\n\t\tif ( content && typeof content !== 'function' ) {\n\t\t\tconst parsedContent = parse( content );\n\t\t\treturn parsedContent.length ? parsedContent : [];\n\t\t}\n\t\treturn [];\n\t}, [ content ] );\n\tconst [ blocks = initialBlocks, onInput ] = useEntityProp(\n\t\tkind,\n\t\ttype,\n\t\tblocksProp,\n\t\tid\n\t);\n\n\tconst onChange = useCallback(\n\t\t( nextBlocks ) => {\n\t\t\tonInput( nextBlocks );\n\t\t\t// Use a function edit to avoid serializing often.\n\t\t\tsetContent( ( { blocks: blocksToSerialize } ) =>\n\t\t\t\tserialize( blocksToSerialize )\n\t\t\t);\n\t\t},\n\t\t[ onInput, setContent ]\n\t);\n\treturn [ blocks, onInput, onChange ];\n}\n"]}