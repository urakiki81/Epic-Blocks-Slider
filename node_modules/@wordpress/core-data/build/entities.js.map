{"version":3,"sources":["@wordpress/core-data/src/entities.js"],"names":["loadPostTypeEntities","loadTaxonomyEntities","getKindEntities","DEFAULT_ENTITY_KEY","defaultEntities","label","name","kind","baseURL","getTitle","record","key","plural","transientEdits","blocks","kinds","loadEntities","path","postTypes","postType","rest_base","labels","singular_name","selectionStart","selectionEnd","mergedEdits","meta","slug","id","taxonomies","taxonomy","getMethodName","prefix","usePlural","entity","kindPrefix","nameSuffix","suffix","entities","length","kindConfig"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { upperFirst, camelCase, map, find, get, startCase } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { addEntities } from './actions';\nimport { apiFetch, select } from './controls';\n\nexport const DEFAULT_ENTITY_KEY = 'id';\n\nexport const defaultEntities = [\n\t{\n\t\tlabel: __( 'Base' ),\n\t\tname: '__unstableBase',\n\t\tkind: 'root',\n\t\tbaseURL: '',\n\t},\n\t{\n\t\tlabel: __( 'Site' ),\n\t\tname: 'site',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/settings',\n\t\tgetTitle: ( record ) => {\n\t\t\treturn get( record, [ 'title' ], __( 'Site Title' ) );\n\t\t},\n\t},\n\t{\n\t\tlabel: __( 'Post Type' ),\n\t\tname: 'postType',\n\t\tkind: 'root',\n\t\tkey: 'slug',\n\t\tbaseURL: '/wp/v2/types',\n\t},\n\t{\n\t\tname: 'media',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/media',\n\t\tplural: 'mediaItems',\n\t\tlabel: __( 'Media' ),\n\t},\n\t{\n\t\tname: 'taxonomy',\n\t\tkind: 'root',\n\t\tkey: 'slug',\n\t\tbaseURL: '/wp/v2/taxonomies',\n\t\tplural: 'taxonomies',\n\t\tlabel: __( 'Taxonomy' ),\n\t},\n\t{\n\t\tname: 'sidebar',\n\t\tkind: 'root',\n\t\tbaseURL: '/__experimental/sidebars',\n\t\tplural: 'sidebars',\n\t\ttransientEdits: { blocks: true },\n\t\tlabel: __( 'Widget areas' ),\n\t},\n\t{\n\t\tlabel: __( 'User' ),\n\t\tname: 'user',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/users',\n\t\tplural: 'users',\n\t},\n\t{\n\t\tname: 'comment',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/comments',\n\t\tplural: 'comments',\n\t\tlabel: __( 'Comment' ),\n\t},\n\t{\n\t\tname: 'menu',\n\t\tkind: 'root',\n\t\tbaseURL: '/__experimental/menus',\n\t\tplural: 'menus',\n\t\tlabel: __( 'Menu' ),\n\t},\n\t{\n\t\tname: 'menuItem',\n\t\tkind: 'root',\n\t\tbaseURL: '/__experimental/menu-items',\n\t\tplural: 'menuItems',\n\t\tlabel: __( 'Menu Item' ),\n\t},\n\t{\n\t\tname: 'menuLocation',\n\t\tkind: 'root',\n\t\tbaseURL: '/__experimental/menu-locations',\n\t\tplural: 'menuLocations',\n\t\tlabel: __( 'Menu Location' ),\n\t\tkey: 'name',\n\t},\n];\n\nexport const kinds = [\n\t{ name: 'postType', loadEntities: loadPostTypeEntities },\n\t{ name: 'taxonomy', loadEntities: loadTaxonomyEntities },\n];\n\n/**\n * Returns the list of post type entities.\n *\n * @return {Promise} Entities promise\n */\nfunction* loadPostTypeEntities() {\n\tconst postTypes = yield apiFetch( { path: '/wp/v2/types?context=edit' } );\n\treturn map( postTypes, ( postType, name ) => {\n\t\treturn {\n\t\t\tkind: 'postType',\n\t\t\tbaseURL: '/wp/v2/' + postType.rest_base,\n\t\t\tname,\n\t\t\tlabel: postType.labels.singular_name,\n\t\t\ttransientEdits: {\n\t\t\t\tblocks: true,\n\t\t\t\tselectionStart: true,\n\t\t\t\tselectionEnd: true,\n\t\t\t},\n\t\t\tmergedEdits: { meta: true },\n\t\t\tgetTitle( record ) {\n\t\t\t\tif ( name === 'wp_template_part' || name === 'wp_template' ) {\n\t\t\t\t\treturn startCase( record.slug );\n\t\t\t\t}\n\t\t\t\treturn get( record, [ 'title', 'rendered' ], record.id );\n\t\t\t},\n\t\t};\n\t} );\n}\n\n/**\n * Returns the list of the taxonomies entities.\n *\n * @return {Promise} Entities promise\n */\nfunction* loadTaxonomyEntities() {\n\tconst taxonomies = yield apiFetch( {\n\t\tpath: '/wp/v2/taxonomies?context=edit',\n\t} );\n\treturn map( taxonomies, ( taxonomy, name ) => {\n\t\treturn {\n\t\t\tkind: 'taxonomy',\n\t\t\tbaseURL: '/wp/v2/' + taxonomy.rest_base,\n\t\t\tname,\n\t\t\tlabel: taxonomy.labels.singular_name,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the entity's getter method name given its kind and name.\n *\n * @param {string}  kind      Entity kind.\n * @param {string}  name      Entity name.\n * @param {string}  prefix    Function prefix.\n * @param {boolean} usePlural Whether to use the plural form or not.\n *\n * @return {string} Method name\n */\nexport const getMethodName = (\n\tkind,\n\tname,\n\tprefix = 'get',\n\tusePlural = false\n) => {\n\tconst entity = find( defaultEntities, { kind, name } );\n\tconst kindPrefix = kind === 'root' ? '' : upperFirst( camelCase( kind ) );\n\tconst nameSuffix =\n\t\tupperFirst( camelCase( name ) ) + ( usePlural ? 's' : '' );\n\tconst suffix =\n\t\tusePlural && entity.plural\n\t\t\t? upperFirst( camelCase( entity.plural ) )\n\t\t\t: nameSuffix;\n\treturn `${ prefix }${ kindPrefix }${ suffix }`;\n};\n\n/**\n * Loads the kind entities into the store.\n *\n * @param {string} kind  Kind\n *\n * @return {Array} Entities\n */\nexport function* getKindEntities( kind ) {\n\tlet entities = yield select( 'getEntitiesByKind', kind );\n\tif ( entities && entities.length !== 0 ) {\n\t\treturn entities;\n\t}\n\n\tconst kindConfig = find( kinds, { name: kind } );\n\tif ( ! kindConfig ) {\n\t\treturn [];\n\t}\n\n\tentities = yield kindConfig.loadEntities();\n\tyield addEntities( entities );\n\n\treturn entities;\n}\n"]}