{"version":3,"sources":["@wordpress/media-utils/src/utils/upload-media.js"],"names":["getMimeTypesArray","wpMimeTypesObject","mime","extensionsString","split","type","extensions","extension","uploadMedia","allowedTypes","additionalData","filesList","maxUploadFileSize","onError","noop","onFileChange","wpAllowedMimeTypes","files","filesSet","setAndUpdateFiles","idx","value","isAllowedType","fileType","allowedType","allowedMimeTypesForUser","isAllowedMimeTypeForUser","triggerError","error","message","file","name","validFiles","mediaFile","code","size","push","url","length","createMediaFromFile","savedMedia","mediaObject","alt","alt_text","caption","title","raw","source_url","data","window","FormData","append","replace","key","path","body","method"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAGA;;AAiBA;;AACA;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;AAaO,SAASA,iBAAT,CAA4BC,iBAA5B,EAAgD;AACtD,MAAK,CAAEA,iBAAP,EAA2B;AAC1B,WAAOA,iBAAP;AACA;;AACD,SAAO,qBAASA,iBAAT,EAA4B,UAAEC,IAAF,EAAQC,gBAAR,EAA8B;AAAA,sBAC/CD,IAAI,CAACE,KAAL,CAAY,GAAZ,CAD+C;AAAA;AAAA,QACxDC,IADwD;;AAEhE,QAAMC,UAAU,GAAGH,gBAAgB,CAACC,KAAjB,CAAwB,GAAxB,CAAnB;AACA,YACCF,IADD,0CAEI,iBAAKI,UAAL,EAAiB,UAAEC,SAAF;AAAA,uBAAqBF,IAArB,cAA+BE,SAA/B;AAAA,KAAjB,CAFJ;AAIA,GAPM,CAAP;AAQA;AAED;;;;;;;;;;;;;;;;;SAesBC,W;;;AAqJtB;;;;;;;;;yFArJO;AAAA;;AAAA;AAAA;AAAA;AAAA;AACNC,YAAAA,YADM,QACNA,YADM,6BAENC,cAFM,EAENA,cAFM,oCAEW,EAFX,wBAGNC,SAHM,QAGNA,SAHM,EAINC,iBAJM,QAINA,iBAJM,sBAKNC,OALM,EAKNA,OALM,6BAKIC,YALJ,iBAMNC,YANM,QAMNA,YANM,+BAONC,kBAPM,EAONA,kBAPM,sCAOe,IAPf;AASN;AACMC,YAAAA,KAVA,oCAUaN,SAVb;AAYAO,YAAAA,QAZA,GAYW,EAZX;;AAaAC,YAAAA,iBAbA,GAaoB,SAApBA,iBAAoB,CAAEC,GAAF,EAAOC,KAAP,EAAkB;AAC3C,uCAAe,iBAAKH,QAAL,EAAe,CAAEE,GAAF,EAAO,KAAP,CAAf,CAAf;AACAF,cAAAA,QAAQ,CAAEE,GAAF,CAAR,GAAkBC,KAAlB;AACAN,cAAAA,YAAY,CAAE,qBAASG,QAAT,CAAF,CAAZ;AACA,aAjBK,EAmBN;;;AACMI,YAAAA,aApBA,GAoBgB,SAAhBA,aAAgB,CAAEC,QAAF,EAAgB;AACrC,kBAAK,CAAEd,YAAP,EAAsB;AACrB,uBAAO,IAAP;AACA;;AACD,qBAAO,kBAAMA,YAAN,EAAoB,UAAEe,WAAF,EAAmB;AAC7C;AACA,oBAAK,sBAAUA,WAAV,EAAuB,GAAvB,CAAL,EAAoC;AACnC,yBAAOA,WAAW,KAAKD,QAAvB;AACA,iBAJ4C,CAK7C;;;AACA,uBAAO,wBAAYA,QAAZ,YAA0BC,WAA1B,OAAP;AACA,eAPM,CAAP;AAQA,aAhCK,EAkCN;;;AACMC,YAAAA,uBAnCA,GAmC0BzB,iBAAiB,CAAEgB,kBAAF,CAnC3C;;AAoCAU,YAAAA,wBApCA,GAoC2B,SAA3BA,wBAA2B,CAAEH,QAAF,EAAgB;AAChD,qBAAO,sBAAUE,uBAAV,EAAmCF,QAAnC,CAAP;AACA,aAtCK,EAwCN;;;AACMI,YAAAA,YAzCA,GAyCe,SAAfA,YAAe,CAAEC,KAAF,EAAa;AACjCA,cAAAA,KAAK,CAACC,OAAN,GAAgB,CACf;AAAQ,gBAAA,GAAG,EAAC;AAAZ,iBAAyBD,KAAK,CAACE,IAAN,CAAWC,IAApC,CADe,EAEf,IAFe,EAGfH,KAAK,CAACC,OAHS,CAAhB;AAMAhB,cAAAA,OAAO,CAAEe,KAAF,CAAP;AACA,aAjDK;;AAmDAI,YAAAA,UAnDA,GAmDa,EAnDb;AAAA,mDAqDmBf,KArDnB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqDMgB,YAAAA,UArDN;;AAAA,kBAyDJR,uBAAuB,IACvBQ,UAAS,CAAC5B,IADV,IAEA,CAAEqB,wBAAwB,CAAEO,UAAS,CAAC5B,IAAZ,CA3DtB;AAAA;AAAA;AAAA;;AA6DJsB,YAAAA,YAAY,CAAE;AACbO,cAAAA,IAAI,EAAE,gCADO;AAEbL,cAAAA,OAAO,EAAE,cACR,8DADQ,CAFI;AAKbC,cAAAA,IAAI,EAAEG;AALO,aAAF,CAAZ;AA7DI;;AAAA;AAAA,kBAyEAA,UAAS,CAAC5B,IAAV,IAAkB,CAAEiB,aAAa,CAAEW,UAAS,CAAC5B,IAAZ,CAzEjC;AAAA;AAAA;AAAA;;AA0EJsB,YAAAA,YAAY,CAAE;AACbO,cAAAA,IAAI,EAAE,yBADO;AAEbL,cAAAA,OAAO,EAAE,cAAI,8CAAJ,CAFI;AAGbC,cAAAA,IAAI,EAAEG;AAHO,aAAF,CAAZ;AA1EI;;AAAA;AAAA,kBAmFArB,iBAAiB,IAAIqB,UAAS,CAACE,IAAV,GAAiBvB,iBAnFtC;AAAA;AAAA;AAAA;;AAoFJe,YAAAA,YAAY,CAAE;AACbO,cAAAA,IAAI,EAAE,kBADO;AAEbL,cAAAA,OAAO,EAAE,cACR,0DADQ,CAFI;AAKbC,cAAAA,IAAI,EAAEG;AALO,aAAF,CAAZ;AApFI;;AAAA;AAAA,kBA+FAA,UAAS,CAACE,IAAV,IAAkB,CA/FlB;AAAA;AAAA;AAAA;;AAgGJR,YAAAA,YAAY,CAAE;AACbO,cAAAA,IAAI,EAAE,YADO;AAEbL,cAAAA,OAAO,EAAE,cAAI,qBAAJ,CAFI;AAGbC,cAAAA,IAAI,EAAEG;AAHO,aAAF,CAAZ;AAhGI;;AAAA;AAwGLD,YAAAA,UAAU,CAACI,IAAX,CAAiBH,UAAjB,EAxGK,CA0GL;AACA;;AACAf,YAAAA,QAAQ,CAACkB,IAAT,CAAe;AAAEC,cAAAA,GAAG,EAAE,yBAAeJ,UAAf;AAAP,aAAf;AACAlB,YAAAA,YAAY,CAAEG,QAAF,CAAZ;;AA7GK;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAgHIE,YAAAA,GAhHJ,GAgHU,CAhHV;;AAAA;AAAA,kBAgHaA,GAAG,GAAGY,UAAU,CAACM,MAhH9B;AAAA;AAAA;AAAA;;AAiHCL,YAAAA,SAjHD,GAiHaD,UAAU,CAAEZ,GAAF,CAjHvB;AAAA;AAAA;AAAA,mBAmHqBmB,mBAAmB,CAC3CN,SAD2C,EAE3CvB,cAF2C,CAnHxC;;AAAA;AAmHE8B,YAAAA,UAnHF;AAuHEC,YAAAA,WAvHF,qBAwHA,kBAAMD,UAAN,EAAkB,CAAE,UAAF,EAAc,YAAd,CAAlB,CAxHA;AAyHHE,cAAAA,GAAG,EAAEF,UAAU,CAACG,QAzHb;AA0HHC,cAAAA,OAAO,EAAE,iBAAKJ,UAAL,EAAiB,CAAE,SAAF,EAAa,KAAb,CAAjB,EAAuC,EAAvC,CA1HN;AA2HHK,cAAAA,KAAK,EAAEL,UAAU,CAACK,KAAX,CAAiBC,GA3HrB;AA4HHT,cAAAA,GAAG,EAAEG,UAAU,CAACO;AA5Hb;AA8HJ5B,YAAAA,iBAAiB,CAAEC,GAAF,EAAOqB,WAAP,CAAjB;AA9HI;AAAA;;AAAA;AAAA;AAAA;AAgIJ;AACAtB,YAAAA,iBAAiB,CAAEC,GAAF,EAAO,IAAP,CAAjB;AACIS,YAAAA,OAlIA;;AAmIJ,gBAAK,8BAAY,CAAE,SAAF,CAAZ,CAAL,EAAmC;AAClCA,cAAAA,OAAO,GAAG,8BAAY,CAAE,SAAF,CAAZ,CAAV;AACA,aAFD,MAEO;AACNA,cAAAA,OAAO,GAAG,oBACT;AACA,4BAAI,qDAAJ,CAFS,EAGTI,SAAS,CAACF,IAHD,CAAV;AAKA;;AACDlB,YAAAA,OAAO,CAAE;AACRqB,cAAAA,IAAI,EAAE,SADE;AAERL,cAAAA,OAAO,EAAPA,OAFQ;AAGRC,cAAAA,IAAI,EAAEG;AAHE,aAAF,CAAP;;AA5II;AAgHsC,cAAEb,GAhHxC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2JP,SAASmB,mBAAT,CAA8BT,IAA9B,EAAoCpB,cAApC,EAAqD;AACpD;AACA,MAAMsC,IAAI,GAAG,IAAIC,MAAM,CAACC,QAAX,EAAb;AACAF,EAAAA,IAAI,CAACG,MAAL,CAAa,MAAb,EAAqBrB,IAArB,EAA2BA,IAAI,CAACC,IAAL,IAAaD,IAAI,CAACzB,IAAL,CAAU+C,OAAV,CAAmB,GAAnB,EAAwB,GAAxB,CAAxC;AACA,uBAAS1C,cAAT,EAAyB,UAAEW,KAAF,EAASgC,GAAT;AAAA,WAAkBL,IAAI,CAACG,MAAL,CAAaE,GAAb,EAAkBhC,KAAlB,CAAlB;AAAA,GAAzB;AACA,SAAO,uBAAU;AAChBiC,IAAAA,IAAI,EAAE,cADU;AAEhBC,IAAAA,IAAI,EAAEP,IAFU;AAGhBQ,IAAAA,MAAM,EAAE;AAHQ,GAAV,CAAP;AAKA","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcompact,\n\tflatMap,\n\tforEach,\n\tget,\n\thas,\n\tincludes,\n\tmap,\n\tnoop,\n\tomit,\n\tsome,\n\tstartsWith,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { createBlobURL, revokeBlobURL } from '@wordpress/blob';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Browsers may use unexpected mime types, and they differ from browser to browser.\n * This function computes a flexible array of mime types from the mime type structured provided by the server.\n * Converts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\n * The computation of this array instead of directly using the object,\n * solves the problem in chrome where mp3 files have audio/mp3 as mime type instead of audio/mpeg.\n * https://bugs.chromium.org/p/chromium/issues/detail?id=227004\n *\n * @param {?Object} wpMimeTypesObject Mime type object received from the server.\n *                                    Extensions are keys separated by '|' and values are mime types associated with an extension.\n *\n * @return {?Array} An array of mime types or the parameter passed if it was \"falsy\".\n */\nexport function getMimeTypesArray( wpMimeTypesObject ) {\n\tif ( ! wpMimeTypesObject ) {\n\t\treturn wpMimeTypesObject;\n\t}\n\treturn flatMap( wpMimeTypesObject, ( mime, extensionsString ) => {\n\t\tconst [ type ] = mime.split( '/' );\n\t\tconst extensions = extensionsString.split( '|' );\n\t\treturn [\n\t\t\tmime,\n\t\t\t...map( extensions, ( extension ) => `${ type }/${ extension }` ),\n\t\t];\n\t} );\n}\n\n/**\n *\tMedia Upload is used by audio, image, gallery, video, and file blocks to\n *\thandle uploading a media file when a file upload button is activated.\n *\n *\tTODO: future enhancement to add an upload indicator.\n *\n * @param   {Object}   $0                    Parameters object passed to the function.\n * @param   {?Array}   $0.allowedTypes       Array with the types of media that can be uploaded, if unset all types are allowed.\n * @param   {?Object}  $0.additionalData     Additional data to include in the request.\n * @param   {Array}    $0.filesList          List of files.\n * @param   {?number}  $0.maxUploadFileSize  Maximum upload size in bytes allowed for the site.\n * @param   {Function} $0.onError            Function called when an error happens.\n * @param   {Function} $0.onFileChange       Function called each time a file or a temporary representation of the file is available.\n * @param   {?Object}  $0.wpAllowedMimeTypes List of allowed mime types and file extensions.\n */\nexport async function uploadMedia( {\n\tallowedTypes,\n\tadditionalData = {},\n\tfilesList,\n\tmaxUploadFileSize,\n\tonError = noop,\n\tonFileChange,\n\twpAllowedMimeTypes = null,\n} ) {\n\t// Cast filesList to array\n\tconst files = [ ...filesList ];\n\n\tconst filesSet = [];\n\tconst setAndUpdateFiles = ( idx, value ) => {\n\t\trevokeBlobURL( get( filesSet, [ idx, 'url' ] ) );\n\t\tfilesSet[ idx ] = value;\n\t\tonFileChange( compact( filesSet ) );\n\t};\n\n\t// Allowed type specified by consumer\n\tconst isAllowedType = ( fileType ) => {\n\t\tif ( ! allowedTypes ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn some( allowedTypes, ( allowedType ) => {\n\t\t\t// If a complete mimetype is specified verify if it matches exactly the mime type of the file.\n\t\t\tif ( includes( allowedType, '/' ) ) {\n\t\t\t\treturn allowedType === fileType;\n\t\t\t}\n\t\t\t// Otherwise a general mime type is used and we should verify if the file mimetype starts with it.\n\t\t\treturn startsWith( fileType, `${ allowedType }/` );\n\t\t} );\n\t};\n\n\t// Allowed types for the current WP_User\n\tconst allowedMimeTypesForUser = getMimeTypesArray( wpAllowedMimeTypes );\n\tconst isAllowedMimeTypeForUser = ( fileType ) => {\n\t\treturn includes( allowedMimeTypesForUser, fileType );\n\t};\n\n\t// Build the error message including the filename\n\tconst triggerError = ( error ) => {\n\t\terror.message = [\n\t\t\t<strong key=\"filename\">{ error.file.name }</strong>,\n\t\t\t': ',\n\t\t\terror.message,\n\t\t];\n\n\t\tonError( error );\n\t};\n\n\tconst validFiles = [];\n\n\tfor ( const mediaFile of files ) {\n\t\t// Verify if user is allowed to upload this mime type.\n\t\t// Defer to the server when type not detected.\n\t\tif (\n\t\t\tallowedMimeTypesForUser &&\n\t\t\tmediaFile.type &&\n\t\t\t! isAllowedMimeTypeForUser( mediaFile.type )\n\t\t) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'MIME_TYPE_NOT_ALLOWED_FOR_USER',\n\t\t\t\tmessage: __(\n\t\t\t\t\t'Sorry, this file type is not permitted for security reasons.'\n\t\t\t\t),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if the block supports this mime type.\n\t\t// Defer to the server when type not detected.\n\t\tif ( mediaFile.type && ! isAllowedType( mediaFile.type ) ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'MIME_TYPE_NOT_SUPPORTED',\n\t\t\t\tmessage: __( 'Sorry, this file type is not supported here.' ),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// verify if file is greater than the maximum file upload size allowed for the site.\n\t\tif ( maxUploadFileSize && mediaFile.size > maxUploadFileSize ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'SIZE_ABOVE_LIMIT',\n\t\t\t\tmessage: __(\n\t\t\t\t\t'This file exceeds the maximum upload size for this site.'\n\t\t\t\t),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Don't allow empty files to be uploaded.\n\t\tif ( mediaFile.size <= 0 ) {\n\t\t\ttriggerError( {\n\t\t\t\tcode: 'EMPTY_FILE',\n\t\t\t\tmessage: __( 'This file is empty.' ),\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalidFiles.push( mediaFile );\n\n\t\t// Set temporary URL to create placeholder media file, this is replaced\n\t\t// with final file from media gallery when upload is `done` below\n\t\tfilesSet.push( { url: createBlobURL( mediaFile ) } );\n\t\tonFileChange( filesSet );\n\t}\n\n\tfor ( let idx = 0; idx < validFiles.length; ++idx ) {\n\t\tconst mediaFile = validFiles[ idx ];\n\t\ttry {\n\t\t\tconst savedMedia = await createMediaFromFile(\n\t\t\t\tmediaFile,\n\t\t\t\tadditionalData\n\t\t\t);\n\t\t\tconst mediaObject = {\n\t\t\t\t...omit( savedMedia, [ 'alt_text', 'source_url' ] ),\n\t\t\t\talt: savedMedia.alt_text,\n\t\t\t\tcaption: get( savedMedia, [ 'caption', 'raw' ], '' ),\n\t\t\t\ttitle: savedMedia.title.raw,\n\t\t\t\turl: savedMedia.source_url,\n\t\t\t};\n\t\t\tsetAndUpdateFiles( idx, mediaObject );\n\t\t} catch ( error ) {\n\t\t\t// Reset to empty on failure.\n\t\t\tsetAndUpdateFiles( idx, null );\n\t\t\tlet message;\n\t\t\tif ( has( error, [ 'message' ] ) ) {\n\t\t\t\tmessage = get( error, [ 'message' ] );\n\t\t\t} else {\n\t\t\t\tmessage = sprintf(\n\t\t\t\t\t// translators: %s: file name\n\t\t\t\t\t__( 'Error while uploading file %s to the media library.' ),\n\t\t\t\t\tmediaFile.name\n\t\t\t\t);\n\t\t\t}\n\t\t\tonError( {\n\t\t\t\tcode: 'GENERAL',\n\t\t\t\tmessage,\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t}\n\t}\n}\n\n/**\n * @param {File}    file           Media File to Save.\n * @param {?Object} additionalData Additional data to include in the request.\n *\n * @return {Promise} Media Object Promise.\n */\nfunction createMediaFromFile( file, additionalData ) {\n\t// Create upload payload\n\tconst data = new window.FormData();\n\tdata.append( 'file', file, file.name || file.type.replace( '/', '.' ) );\n\tforEach( additionalData, ( value, key ) => data.append( key, value ) );\n\treturn apiFetch( {\n\t\tpath: '/wp/v2/media',\n\t\tbody: data,\n\t\tmethod: 'POST',\n\t} );\n}\n"]}