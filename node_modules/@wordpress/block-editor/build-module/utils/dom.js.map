{"version":3,"sources":["@wordpress/block-editor/src/utils/dom.js"],"names":["getBlockDOMNode","clientId","document","getElementById","getBlockPreviewContainerDOMNode","domNode","firstChild","isBlockFocusStop","element","classList","contains","isInSameBlock","a","b","closest","isInsideRootBlock","blockElement","parentBlock","hasInnerBlocksContext","querySelector","getBlockClientId","node","nodeType","window","Node","ELEMENT_NODE","parentNode","elementNode","blockNode","id","slice","length"],"mappings":"AAAA;;;;;;;;;AASA,OAAO,SAASA,eAAT,CAA0BC,QAA1B,EAAqC;AAC3C,SAAOC,QAAQ,CAACC,cAAT,CAAyB,WAAWF,QAApC,CAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASG,+BAAT,CAA0CH,QAA1C,EAAqD;AAC3D,MAAMI,OAAO,GAAGL,eAAe,CAAEC,QAAF,CAA/B;;AAEA,MAAK,CAAEI,OAAP,EAAiB;AAChB;AACA;;AAED,SAAOA,OAAO,CAACC,UAAR,IAAsBD,OAA7B;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASE,gBAAT,CAA2BC,OAA3B,EAAqC;AAC3C,SAAOA,OAAO,CAACC,SAAR,CAAkBC,QAAlB,CAA4B,gCAA5B,CAAP;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASC,aAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA+B;AACrC,SACCD,CAAC,CAACE,OAAF,CAAW,iCAAX,MACAD,CAAC,CAACC,OAAF,CAAW,iCAAX,CAFD;AAIA;AAED;;;;;;;;;;;AAUA,OAAO,SAASC,iBAAT,CAA4BC,YAA5B,EAA0CR,OAA1C,EAAoD;AAC1D,MAAMS,WAAW,GAAGT,OAAO,CAACM,OAAR,CAAiB,iCAAjB,CAApB;AACA,SAAOG,WAAW,KAAKD,YAAvB;AACA;AAED;;;;;;;;;AAQA,OAAO,SAASE,qBAAT,CAAgCV,OAAhC,EAA0C;AAChD,SACCA,OAAO,CAACC,SAAR,CAAkBC,QAAlB,CAA4B,iCAA5B,KACA,CAAC,CAAEF,OAAO,CAACW,aAAR,CAAuB,kCAAvB,CAFJ;AAIA;AAED;;;;;;;;;AAQA,OAAO,SAASC,gBAAT,CAA2BC,IAA3B,EAAkC;AACxC,SAAQA,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBC,MAAM,CAACC,IAAP,CAAYC,YAA9C,EAA6D;AAC5DJ,IAAAA,IAAI,GAAGA,IAAI,CAACK,UAAZ;AACA;;AAED,MAAK,CAAEL,IAAP,EAAc;AACb;AACA;;AAED,MAAMM,WAAW;AAAG;AAAyBN,EAAAA,IAA7C;AACA,MAAMO,SAAS,GAAGD,WAAW,CAACb,OAAZ,CAAqB,iCAArB,CAAlB;;AAEA,MAAK,CAAEc,SAAP,EAAmB;AAClB;AACA;;AAED,SAAOA,SAAS,CAACC,EAAV,CAAaC,KAAb,CAAoB,SAASC,MAA7B,CAAP;AACA","sourcesContent":["/**\n * Given a block client ID, returns the corresponding DOM node for the block,\n * if exists. As much as possible, this helper should be avoided, and used only\n * in cases where isolated behaviors need remote access to a block node.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Element?} Block DOM node.\n */\nexport function getBlockDOMNode( clientId ) {\n\treturn document.getElementById( 'block-' + clientId );\n}\n\n/**\n * Returns the preview container DOM node for a given block client ID, or\n * undefined if the container cannot be determined.\n *\n * @param {string} clientId Block client ID.\n *\n * @return {Node|undefined} Preview container DOM node.\n */\nexport function getBlockPreviewContainerDOMNode( clientId ) {\n\tconst domNode = getBlockDOMNode( clientId );\n\n\tif ( ! domNode ) {\n\t\treturn;\n\t}\n\n\treturn domNode.firstChild || domNode;\n}\n\n/**\n * Returns true if the given element is a block focus stop. Blocks without their\n * own text fields rely on the focus stop to be keyboard navigable.\n *\n * @param {Element} element Element to test.\n *\n * @return {boolean} Whether element is a block focus stop.\n */\nexport function isBlockFocusStop( element ) {\n\treturn element.classList.contains( 'block-editor-block-list__block' );\n}\n\n/**\n * Returns true if two elements are contained within the same block.\n *\n * @param {Element} a First element.\n * @param {Element} b Second element.\n *\n * @return {boolean} Whether elements are in the same block.\n */\nexport function isInSameBlock( a, b ) {\n\treturn (\n\t\ta.closest( '.block-editor-block-list__block' ) ===\n\t\tb.closest( '.block-editor-block-list__block' )\n\t);\n}\n\n/**\n * Returns true if an element is considered part of the block and not its\n * children.\n *\n * @param {Element} blockElement Block container element.\n * @param {Element} element      Element.\n *\n * @return {boolean} Whether element is in the block Element but not its\n *                   children.\n */\nexport function isInsideRootBlock( blockElement, element ) {\n\tconst parentBlock = element.closest( '.block-editor-block-list__block' );\n\treturn parentBlock === blockElement;\n}\n\n/**\n * Returns true if the given element contains inner blocks (an InnerBlocks\n * element).\n *\n * @param {Element} element Element to test.\n *\n * @return {boolean} Whether element contains inner blocks.\n */\nexport function hasInnerBlocksContext( element ) {\n\treturn (\n\t\telement.classList.contains( 'block-editor-block-list__layout' ) ||\n\t\t!! element.querySelector( '.block-editor-block-list__layout' )\n\t);\n}\n\n/**\n * Finds the block client ID given any DOM node inside the block.\n *\n * @param {Node?} node DOM node.\n *\n * @return {string|undefined} Client ID or undefined if the node is not part of\n *                            a block.\n */\nexport function getBlockClientId( node ) {\n\twhile ( node && node.nodeType !== window.Node.ELEMENT_NODE ) {\n\t\tnode = node.parentNode;\n\t}\n\n\tif ( ! node ) {\n\t\treturn;\n\t}\n\n\tconst elementNode = /** @type {Element} */ ( node );\n\tconst blockNode = elementNode.closest( '.block-editor-block-list__block' );\n\n\tif ( ! blockNode ) {\n\t\treturn;\n\t}\n\n\treturn blockNode.id.slice( 'block-'.length );\n}\n"]}