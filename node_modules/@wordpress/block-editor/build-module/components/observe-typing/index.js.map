{"version":3,"sources":["@wordpress/block-editor/src/components/observe-typing/index.js"],"names":["over","useRef","useEffect","useSelect","useDispatch","isTextField","UP","RIGHT","DOWN","LEFT","ENTER","BACKSPACE","ESCAPE","TAB","withSafeTimeout","KEY_DOWN_ELIGIBLE_KEY_CODES","isKeyDownEligibleForStartTyping","event","keyCode","shiftKey","includes","ObserveTyping","children","setSafeTimeout","setTimeout","typingContainer","lastMouseMove","isTyping","select","startTyping","stopTyping","toggleEventBindings","isBound","bindFn","document","stopTypingOnSelectionUncollapse","stopTypingOnMouseMove","clientX","clientY","current","lastClientX","lastClientY","selection","window","getSelection","isCollapsed","rangeCount","getRangeAt","collapsed","stopTypingOnEscapeKey","startTypingInTextField","type","target","contains","stopTypingOnNonTextField"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { over } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useRef, useEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { isTextField } from '@wordpress/dom';\nimport {\n\tUP,\n\tRIGHT,\n\tDOWN,\n\tLEFT,\n\tENTER,\n\tBACKSPACE,\n\tESCAPE,\n\tTAB,\n} from '@wordpress/keycodes';\nimport { withSafeTimeout } from '@wordpress/compose';\n\n/**\n * Set of key codes upon which typing is to be initiated on a keydown event.\n *\n * @type {number[]}\n */\nconst KEY_DOWN_ELIGIBLE_KEY_CODES = [ UP, RIGHT, DOWN, LEFT, ENTER, BACKSPACE ];\n\n/**\n * Returns true if a given keydown event can be inferred as intent to start\n * typing, or false otherwise. A keydown is considered eligible if it is a\n * text navigation without shift active.\n *\n * @param {KeyboardEvent} event Keydown event to test.\n *\n * @return {boolean} Whether event is eligible to start typing.\n */\nfunction isKeyDownEligibleForStartTyping( event ) {\n\tconst { keyCode, shiftKey } = event;\n\treturn ! shiftKey && KEY_DOWN_ELIGIBLE_KEY_CODES.includes( keyCode );\n}\n\nfunction ObserveTyping( { children, setTimeout: setSafeTimeout } ) {\n\tconst typingContainer = useRef();\n\tconst lastMouseMove = useRef();\n\tconst isTyping = useSelect( ( select ) =>\n\t\tselect( 'core/block-editor' ).isTyping()\n\t);\n\tconst { startTyping, stopTyping } = useDispatch( 'core/block-editor' );\n\tuseEffect( () => {\n\t\ttoggleEventBindings( isTyping );\n\t\treturn () => toggleEventBindings( false );\n\t}, [ isTyping ] );\n\n\t/**\n\t * Bind or unbind events to the document when typing has started or stopped\n\t * respectively, or when component has become unmounted.\n\t *\n\t * @param {boolean} isBound Whether event bindings should be applied.\n\t */\n\tfunction toggleEventBindings( isBound ) {\n\t\tconst bindFn = isBound ? 'addEventListener' : 'removeEventListener';\n\t\tdocument[ bindFn ](\n\t\t\t'selectionchange',\n\t\t\tstopTypingOnSelectionUncollapse\n\t\t);\n\t\tdocument[ bindFn ]( 'mousemove', stopTypingOnMouseMove );\n\t}\n\n\t/**\n\t * On mouse move, unset typing flag if user has moved cursor.\n\t *\n\t * @param {MouseEvent} event Mousemove event.\n\t */\n\tfunction stopTypingOnMouseMove( event ) {\n\t\tconst { clientX, clientY } = event;\n\n\t\t// We need to check that the mouse really moved because Safari triggers\n\t\t// mousemove events when shift or ctrl are pressed.\n\t\tif ( lastMouseMove.current ) {\n\t\t\tconst {\n\t\t\t\tclientX: lastClientX,\n\t\t\t\tclientY: lastClientY,\n\t\t\t} = lastMouseMove.current;\n\n\t\t\tif ( lastClientX !== clientX || lastClientY !== clientY ) {\n\t\t\t\tstopTyping();\n\t\t\t}\n\t\t}\n\n\t\tlastMouseMove.current = { clientX, clientY };\n\t}\n\n\t/**\n\t * On selection change, unset typing flag if user has made an uncollapsed\n\t * (shift) selection.\n\t */\n\tfunction stopTypingOnSelectionUncollapse() {\n\t\tconst selection = window.getSelection();\n\t\tconst isCollapsed =\n\t\t\tselection.rangeCount > 0 && selection.getRangeAt( 0 ).collapsed;\n\n\t\tif ( ! isCollapsed ) {\n\t\t\tstopTyping();\n\t\t}\n\t}\n\n\t/**\n\t * Unsets typing flag if user presses Escape while typing flag is active.\n\t *\n\t * @param {KeyboardEvent} event Keypress or keydown event to interpret.\n\t */\n\tfunction stopTypingOnEscapeKey( event ) {\n\t\tif (\n\t\t\tisTyping &&\n\t\t\t( event.keyCode === ESCAPE || event.keyCode === TAB )\n\t\t) {\n\t\t\tstopTyping();\n\t\t}\n\t}\n\n\t/**\n\t * Handles a keypress or keydown event to infer intention to start typing.\n\t *\n\t * @param {KeyboardEvent} event Keypress or keydown event to interpret.\n\t */\n\tfunction startTypingInTextField( event ) {\n\t\tconst { type, target } = event;\n\n\t\t// Abort early if already typing, or key press is incurred outside a\n\t\t// text field (e.g. arrow-ing through toolbar buttons).\n\t\t// Ignore typing if outside the current DOM container\n\t\tif (\n\t\t\tisTyping ||\n\t\t\t! isTextField( target ) ||\n\t\t\t! typingContainer.current.contains( target )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Special-case keydown because certain keys do not emit a keypress\n\t\t// event. Conversely avoid keydown as the canonical event since there\n\t\t// are many keydown which are explicitly not targeted for typing.\n\t\tif (\n\t\t\ttype === 'keydown' &&\n\t\t\t! isKeyDownEligibleForStartTyping( event )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tstartTyping();\n\t}\n\n\t/**\n\t * Stops typing when focus transitions to a non-text field element.\n\t *\n\t * @param {FocusEvent} event Focus event.\n\t */\n\tfunction stopTypingOnNonTextField( event ) {\n\t\tconst { target } = event;\n\n\t\t// Since focus to a non-text field via arrow key will trigger before\n\t\t// the keydown event, wait until after current stack before evaluating\n\t\t// whether typing is to be stopped. Otherwise, typing will re-start.\n\t\tsetSafeTimeout( () => {\n\t\t\tif ( isTyping && ! isTextField( target ) ) {\n\t\t\t\tstopTyping();\n\t\t\t}\n\t\t} );\n\t}\n\n\t// Disable reason: This component is responsible for capturing bubbled\n\t// keyboard events which are interpreted as typing intent.\n\n\t/* eslint-disable jsx-a11y/no-static-element-interactions */\n\treturn (\n\t\t<div\n\t\t\tref={ typingContainer }\n\t\t\tonFocus={ stopTypingOnNonTextField }\n\t\t\tonKeyPress={ startTypingInTextField }\n\t\t\tonKeyDown={ over( [\n\t\t\t\tstartTypingInTextField,\n\t\t\t\tstopTypingOnEscapeKey,\n\t\t\t] ) }\n\t\t>\n\t\t\t{ children }\n\t\t</div>\n\t);\n\t/* eslint-enable jsx-a11y/no-static-element-interactions */\n}\n\n/**\n * @see https://github.com/WordPress/gutenberg/blob/master/packages/block-editor/src/components/observe-typing/README.md\n */\nexport default withSafeTimeout( ObserveTyping );\n"]}