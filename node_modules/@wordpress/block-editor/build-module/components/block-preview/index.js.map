{"version":3,"sources":["@wordpress/block-editor/src/components/block-preview/index.js"],"names":["castArray","useSelect","memo","useMemo","BlockEditorProvider","LiveBlockPreview","AutoHeightBlockPreview","BlockPreview","blocks","__experimentalPadding","viewportWidth","__experimentalLive","__experimentalOnClick","settings","select","getSettings","renderedBlocks","length"],"mappings":";;AAAA;;;AAGA,SAASA,SAAT,QAA0B,QAA1B;AAEA;;;;AAGA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,oBAA9B;AAEA;;;;AAGA,OAAOC,mBAAP,MAAgC,aAAhC;AACA,OAAOC,gBAAP,MAA6B,QAA7B;AACA,OAAOC,sBAAP,MAAmC,QAAnC;AAEA,OAAO,SAASC,YAAT,OAMH;AAAA,MALHC,MAKG,QALHA,MAKG;AAAA,mCAJHC,qBAIG;AAAA,MAJHA,qBAIG,sCAJqB,CAIrB;AAAA,gCAHHC,aAGG;AAAA,MAHHA,aAGG,mCAHa,GAGb;AAAA,mCAFHC,kBAEG;AAAA,MAFHA,kBAEG,sCAFkB,KAElB;AAAA,MADHC,qBACG,QADHA,qBACG;;AACH,MAAMC,QAAQ,GAAGZ,SAAS,CACzB,UAAEa,MAAF;AAAA,WAAcA,MAAM,CAAE,mBAAF,CAAN,CAA8BC,WAA9B,EAAd;AAAA,GADyB,EAEzB,EAFyB,CAA1B;AAIA,MAAMC,cAAc,GAAGb,OAAO,CAAE;AAAA,WAAMH,SAAS,CAAEQ,MAAF,CAAf;AAAA,GAAF,EAA6B,CAAEA,MAAF,CAA7B,CAA9B;;AACA,MAAK,CAAEA,MAAF,IAAYA,MAAM,CAACS,MAAP,KAAkB,CAAnC,EAAuC;AACtC,WAAO,IAAP;AACA;;AACD,SACC,cAAC,mBAAD;AAAqB,IAAA,KAAK,EAAGD,cAA7B;AAA8C,IAAA,QAAQ,EAAGH;AAAzD,KACGF,kBAAkB,GACnB,cAAC,gBAAD;AAAkB,IAAA,OAAO,EAAGC;AAA5B,IADmB,GAGnB,cAAC,sBAAD;AACC,IAAA,aAAa,EAAGF,aADjB;AAEC,IAAA,qBAAqB,EAAGD;AAFzB,IAJF,CADD;AAYA;AAED;;;;;;;;;;;;AAWA,eAAeP,IAAI,CAAEK,YAAF,CAAnB","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { memo, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport BlockEditorProvider from '../provider';\nimport LiveBlockPreview from './live';\nimport AutoHeightBlockPreview from './auto';\n\nexport function BlockPreview( {\n\tblocks,\n\t__experimentalPadding = 0,\n\tviewportWidth = 700,\n\t__experimentalLive = false,\n\t__experimentalOnClick,\n} ) {\n\tconst settings = useSelect(\n\t\t( select ) => select( 'core/block-editor' ).getSettings(),\n\t\t[]\n\t);\n\tconst renderedBlocks = useMemo( () => castArray( blocks ), [ blocks ] );\n\tif ( ! blocks || blocks.length === 0 ) {\n\t\treturn null;\n\t}\n\treturn (\n\t\t<BlockEditorProvider value={ renderedBlocks } settings={ settings }>\n\t\t\t{ __experimentalLive ? (\n\t\t\t\t<LiveBlockPreview onClick={ __experimentalOnClick } />\n\t\t\t) : (\n\t\t\t\t<AutoHeightBlockPreview\n\t\t\t\t\tviewportWidth={ viewportWidth }\n\t\t\t\t\t__experimentalPadding={ __experimentalPadding }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</BlockEditorProvider>\n\t);\n}\n\n/**\n * BlockPreview renders a preview of a block or array of blocks.\n *\n * @see https://github.com/WordPress/gutenberg/blob/master/packages/block-editor/src/components/block-preview/README.md\n *\n * @param {Object} preview options for how the preview should be shown\n * @param {Array|Object} preview.blocks A block instance (object) or an array of blocks to be previewed.\n * @param {number} preview.viewportWidth Width of the preview container in pixels. Controls at what size the blocks will be rendered inside the preview. Default: 700.\n *\n * @return {WPComponent} The component to be rendered.\n */\nexport default memo( BlockPreview );\n"]}