{"version":3,"sources":["@wordpress/block-editor/src/components/page-template-picker/default-templates.native.js"],"names":["createBlock","map","memoize","About","Blog","Contact","Portfolio","Services","Team","defaultTemplates","createInnerBlocks","name","attributes","innerBlocks","createBlocks","template","parsedTemplates","blocks","content"],"mappings":";;;;;;AAAA;;;AAGA,SAASA,WAAT,QAA4B,mBAA5B;AAEA;;;;AAGA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,OAAP,MAAoB,QAApB;AAEA;;;;AAGA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,SAA/B,EAA0CC,QAA1C,EAAoDC,IAApD,QAAgE,aAAhE;AAEA,IAAMC,gBAAgB,GAAG,CAAEN,KAAF,EAASC,IAAT,EAAeC,OAAf,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,IAA7C,CAAzB;;AAEA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,OAAyC;AAAA,MAArCC,IAAqC,QAArCA,IAAqC;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,WAAmB,QAAnBA,WAAmB;AAClE,SAAOb,WAAW,CACjBW,IADiB,EAEjBC,UAFiB,EAGjBX,GAAG,CAAEY,WAAF,EAAeH,iBAAf,CAHc,CAAlB;AAKA,CAND;;AAQA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAAEC,QAAF,EAAgB;AACpC,SAAOA,QAAQ,CAACd,GAAT,CAAc,iBAAyC;AAAA,QAArCU,IAAqC,SAArCA,IAAqC;AAAA,QAA/BC,UAA+B,SAA/BA,UAA+B;AAAA,QAAnBC,WAAmB,SAAnBA,WAAmB;AAC7D,WAAOb,WAAW,CACjBW,IADiB,EAEjBC,UAFiB,EAGjBX,GAAG,CAAEY,WAAF,EAAeH,iBAAf,CAHc,CAAlB;AAKA,GANM,CAAP;AAOA,CARD;;AAUA,IAAMM,eAAe,GAAGd,OAAO,CAAE;AAAA,SAChCO,gBAAgB,CAACR,GAAjB,CAAsB,UAAEc,QAAF;AAAA,6BAClBA,QADkB;AAErBE,MAAAA,MAAM,EAAEH,YAAY,CAAEC,QAAQ,CAACG,OAAX;AAFC;AAAA,GAAtB,CADgC;AAAA,CAAF,CAA/B;AAOA,eAAeF,eAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createBlock } from '@wordpress/blocks';\n\n/**\n * External dependencies\n */\nimport { map } from 'lodash';\nimport memoize from 'memize';\n\n/**\n * Internal dependencies\n */\nimport { About, Blog, Contact, Portfolio, Services, Team } from './templates';\n\nconst defaultTemplates = [ About, Blog, Contact, Portfolio, Services, Team ];\n\nconst createInnerBlocks = ( { name, attributes, innerBlocks } ) => {\n\treturn createBlock(\n\t\tname,\n\t\tattributes,\n\t\tmap( innerBlocks, createInnerBlocks )\n\t);\n};\n\nconst createBlocks = ( template ) => {\n\treturn template.map( ( { name, attributes, innerBlocks } ) => {\n\t\treturn createBlock(\n\t\t\tname,\n\t\t\tattributes,\n\t\t\tmap( innerBlocks, createInnerBlocks )\n\t\t);\n\t} );\n};\n\nconst parsedTemplates = memoize( () =>\n\tdefaultTemplates.map( ( template ) => ( {\n\t\t...template,\n\t\tblocks: createBlocks( template.content ),\n\t} ) )\n);\n\nexport default parsedTemplates;\n"]}