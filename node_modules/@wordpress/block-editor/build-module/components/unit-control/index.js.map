{"version":3,"sources":["@wordpress/block-editor/src/components/unit-control/index.js"],"names":["__experimentalUnitControl","BaseUnitControl","useSelect","UnitControl","unitsProp","units","props","useCustomUnits","filterUnitsWithSettings","settings","filter","unit","includes","value","select","getSettings","enableCustomUnits","isDisabled","Array","isArray"],"mappings":";;;;AAAA;;;AAGA,SAASA,yBAAyB,IAAIC,eAAtC,QAA6D,uBAA7D;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,eAAe,SAASC,WAAT,OAAuD;AAAA,MAAxBC,SAAwB,QAA/BC,KAA+B;AAAA,MAAVC,KAAU;;AACrE,MAAMD,KAAK,GAAGE,cAAc,CAAEH,SAAF,CAA5B;AAEA,SAAO,cAAC,eAAD;AAAiB,IAAA,KAAK,EAAGC;AAAzB,KAAsCC,KAAtC,EAAP;AACA;AAED;;;;;;;;;AAQA,SAASE,uBAAT,GAA8D;AAAA,MAA5BC,QAA4B,uEAAjB,EAAiB;AAAA,MAAbJ,KAAa,uEAAL,EAAK;AAC7D,SAAOA,KAAK,CAACK,MAAN,CAAc,UAAEC,IAAF,EAAY;AAChC,WAAOF,QAAQ,CAACG,QAAT,CAAmBD,IAAI,CAACE,KAAxB,CAAP;AACA,GAFM,CAAP;AAGA;AAED;;;;;;;;;AAOA,OAAO,SAASN,cAAT,CAAyBH,SAAzB,EAAqC;AAC3C,MAAMK,QAAQ,GAAGP,SAAS,CACzB,UAAEY,MAAF;AAAA,WACCA,MAAM,CAAE,mBAAF,CAAN,CAA8BC,WAA9B,GAA4CC,iBAD7C;AAAA,GADyB,EAGzB,EAHyB,CAA1B;AAKA,MAAMC,UAAU,GAAG,CAAER,QAArB,CAN2C,CAQ3C;;AACA,MAAIJ,KAAJ;AAEA;;;;;;;;;;AASA,MAAKa,KAAK,CAACC,OAAN,CAAeV,QAAf,CAAL,EAAiC;AAChCJ,IAAAA,KAAK,GAAGG,uBAAuB,CAAEC,QAAF,EAAYL,SAAZ,CAA/B;AACA,GAFD,MAEO;AACNC,IAAAA,KAAK,GAAGY,UAAU,GAAG,KAAH,GAAWb,SAA7B;AACA;;AAED,SAAOC,KAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __experimentalUnitControl as BaseUnitControl } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\n\nexport default function UnitControl( { units: unitsProp, ...props } ) {\n\tconst units = useCustomUnits( unitsProp );\n\n\treturn <BaseUnitControl units={ units } { ...props } />;\n}\n\n/**\n * Filters available units based on values defined by settings.\n *\n * @param {Array} settings Collection of preferred units.\n * @param {Array} units Collection of available units.\n *\n * @return {Array} Filtered units based on settings.\n */\nfunction filterUnitsWithSettings( settings = [], units = [] ) {\n\treturn units.filter( ( unit ) => {\n\t\treturn settings.includes( unit.value );\n\t} );\n}\n\n/**\n * Custom hook to retrieve and consolidate units setting from add_theme_support().\n *\n * @param {Array} unitsProp Collection of available units.\n *\n * @return {Array} Filtered units based on settings.\n */\nexport function useCustomUnits( unitsProp ) {\n\tconst settings = useSelect(\n\t\t( select ) =>\n\t\t\tselect( 'core/block-editor' ).getSettings().enableCustomUnits,\n\t\t[]\n\t);\n\tconst isDisabled = ! settings;\n\n\t// Adjust units based on add_theme_support( 'custom-units' );\n\tlet units;\n\n\t/**\n\t * Handle extra arguments for add_theme_support\n\t *\n\t * Example: add_theme_support( 'custom-units', 'rem' );\n\t * Or: add_theme_support( 'custom-units', 'px, 'rem', 'em' );\n\t *\n\t * Note: If there are unit argument (e.g. 'em'), these units are enabled\n\t * within the control.\n\t */\n\tif ( Array.isArray( settings ) ) {\n\t\tunits = filterUnitsWithSettings( settings, unitsProp );\n\t} else {\n\t\tunits = isDisabled ? false : unitsProp;\n\t}\n\n\treturn units;\n}\n"]}