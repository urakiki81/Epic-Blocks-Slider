{"version":3,"sources":["@wordpress/block-editor/src/components/copy-handler/index.js"],"names":["useCallback","useRef","serialize","pasteHandler","documentHasSelection","documentHasUncollapsedSelection","useDispatch","useSelect","__","_n","sprintf","getPasteEventData","useNotifyCopy","select","getBlockName","getBlockType","createSuccessNotice","eventType","selectedBlockClientIds","notice","length","clientId","title","type","CopyHandler","children","containerRef","getBlocksByClientId","getSelectedBlockClientIds","hasMultiSelection","getSettings","flashBlock","removeBlocks","replaceBlocks","notifyCopy","canUserUseUnfilteredHTML","__experimentalCanUserUseUnfilteredHTML","handler","event","hasSelection","current","contains","target","preventDefault","blocks","serialized","clipboardData","setData","plainText","html","HTML","mode"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback, useRef } from '@wordpress/element';\nimport { serialize, pasteHandler } from '@wordpress/blocks';\nimport {\n\tdocumentHasSelection,\n\tdocumentHasUncollapsedSelection,\n} from '@wordpress/dom';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, _n, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { getPasteEventData } from '../../utils/get-paste-event-data';\n\nexport function useNotifyCopy() {\n\tconst { getBlockName } = useSelect(\n\t\t( select ) => select( 'core/block-editor' ),\n\t\t[]\n\t);\n\tconst { getBlockType } = useSelect(\n\t\t( select ) => select( 'core/blocks' ),\n\t\t[]\n\t);\n\tconst { createSuccessNotice } = useDispatch( 'core/notices' );\n\n\treturn useCallback( ( eventType, selectedBlockClientIds ) => {\n\t\tlet notice = '';\n\t\tif ( selectedBlockClientIds.length === 1 ) {\n\t\t\tconst clientId = selectedBlockClientIds[ 0 ];\n\t\t\tconst { title } = getBlockType( getBlockName( clientId ) );\n\t\t\tnotice =\n\t\t\t\teventType === 'copy'\n\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t// Translators: Name of the block being copied, e.g. \"Paragraph\".\n\t\t\t\t\t\t\t__( 'Copied \"%s\" to clipboard.' ),\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t  )\n\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t// Translators: Name of the block being cut, e.g. \"Paragraph\".\n\t\t\t\t\t\t\t__( 'Moved \"%s\" to clipboard.' ),\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t  );\n\t\t} else {\n\t\t\tnotice =\n\t\t\t\teventType === 'copy'\n\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t// Translators: %d: Number of blocks being copied.\n\t\t\t\t\t\t\t_n(\n\t\t\t\t\t\t\t\t'Copied %d block to clipboard.',\n\t\t\t\t\t\t\t\t'Copied %d blocks to clipboard.',\n\t\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t  )\n\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t// Translators: %d: Number of blocks being cut.\n\t\t\t\t\t\t\t_n(\n\t\t\t\t\t\t\t\t'Moved %d block to clipboard.',\n\t\t\t\t\t\t\t\t'Moved %d blocks to clipboard.',\n\t\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tselectedBlockClientIds.length\n\t\t\t\t\t  );\n\t\t}\n\t\tcreateSuccessNotice( notice, {\n\t\t\ttype: 'snackbar',\n\t\t} );\n\t}, [] );\n}\n\nfunction CopyHandler( { children } ) {\n\tconst containerRef = useRef();\n\n\tconst {\n\t\tgetBlocksByClientId,\n\t\tgetSelectedBlockClientIds,\n\t\thasMultiSelection,\n\t\tgetSettings,\n\t} = useSelect( ( select ) => select( 'core/block-editor' ), [] );\n\n\tconst { flashBlock, removeBlocks, replaceBlocks } = useDispatch(\n\t\t'core/block-editor'\n\t);\n\n\tconst notifyCopy = useNotifyCopy();\n\n\tconst {\n\t\t__experimentalCanUserUseUnfilteredHTML: canUserUseUnfilteredHTML,\n\t} = getSettings();\n\n\tconst handler = ( event ) => {\n\t\tconst selectedBlockClientIds = getSelectedBlockClientIds();\n\n\t\tif ( selectedBlockClientIds.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Always handle multiple selected blocks.\n\t\tif ( ! hasMultiSelection() ) {\n\t\t\t// If copying, only consider actual text selection as selection.\n\t\t\t// Otherwise, any focus on an input field is considered.\n\t\t\tconst hasSelection =\n\t\t\t\tevent.type === 'copy' || event.type === 'cut'\n\t\t\t\t\t? documentHasUncollapsedSelection()\n\t\t\t\t\t: documentHasSelection();\n\n\t\t\t// Let native copy behaviour take over in input fields.\n\t\t\tif ( hasSelection ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif ( ! containerRef.current.contains( event.target ) ) {\n\t\t\treturn;\n\t\t}\n\t\tevent.preventDefault();\n\n\t\tif ( event.type === 'copy' || event.type === 'cut' ) {\n\t\t\tif ( selectedBlockClientIds.length === 1 ) {\n\t\t\t\tflashBlock( selectedBlockClientIds[ 0 ] );\n\t\t\t}\n\t\t\tnotifyCopy( event.type, selectedBlockClientIds );\n\t\t\tconst blocks = getBlocksByClientId( selectedBlockClientIds );\n\t\t\tconst serialized = serialize( blocks );\n\n\t\t\tevent.clipboardData.setData( 'text/plain', serialized );\n\t\t\tevent.clipboardData.setData( 'text/html', serialized );\n\t\t}\n\n\t\tif ( event.type === 'cut' ) {\n\t\t\tremoveBlocks( selectedBlockClientIds );\n\t\t} else if ( event.type === 'paste' ) {\n\t\t\tconst { plainText, html } = getPasteEventData( event );\n\t\t\tconst blocks = pasteHandler( {\n\t\t\t\tHTML: html,\n\t\t\t\tplainText,\n\t\t\t\tmode: 'BLOCKS',\n\t\t\t\tcanUserUseUnfilteredHTML,\n\t\t\t} );\n\n\t\t\treplaceBlocks(\n\t\t\t\tselectedBlockClientIds,\n\t\t\t\tblocks,\n\t\t\t\tblocks.length - 1,\n\t\t\t\t-1\n\t\t\t);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tref={ containerRef }\n\t\t\tonCopy={ handler }\n\t\t\tonCut={ handler }\n\t\t\tonPaste={ handler }\n\t\t>\n\t\t\t{ children }\n\t\t</div>\n\t);\n}\n\nexport default CopyHandler;\n"]}