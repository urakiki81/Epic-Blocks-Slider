{"version":3,"sources":["@wordpress/block-editor/src/hooks/align.js"],"names":["classnames","get","has","without","createContext","useContext","createHigherOrderComponent","addFilter","getBlockSupport","getBlockType","hasBlockSupport","useSelect","BlockControls","BlockAlignmentToolbar","ALL_ALIGNMENTS","WIDE_ALIGNMENTS","getValidAlignments","blockAlign","hasWideBlockSupport","hasWideEnabled","validAlignments","Array","isArray","addAttribute","settings","attributes","align","type","enum","AlignmentHookSettings","AlignmentHookSettingsProvider","Provider","withToolbarControls","BlockEdit","props","isEmbedButton","blockName","name","updateAlignment","nextAlign","blockType","blockDefaultAlign","setAttributes","length","isSelected","withDataAlign","BlockListBlock","select","getSettings","alignWide","undefined","wrapperProps","includes","addAssignedAlign","isAlignValid","className"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { get, has, without } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createContext, useContext } from '@wordpress/element';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport { addFilter } from '@wordpress/hooks';\nimport {\n\tgetBlockSupport,\n\tgetBlockType,\n\thasBlockSupport,\n} from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { BlockControls, BlockAlignmentToolbar } from '../components';\n\n/**\n * An array which includes all possible valid alignments,\n * used to validate if an alignment is valid or not.\n *\n * @constant\n * @type {string[]}\n */\nconst ALL_ALIGNMENTS = [ 'left', 'center', 'right', 'wide', 'full' ];\n\n/**\n * An array which includes all wide alignments.\n * In order for this alignments to be valid they need to be supported by the block,\n * and by the theme.\n *\n * @constant\n * @type {string[]}\n */\nconst WIDE_ALIGNMENTS = [ 'wide', 'full' ];\n\n/**\n * Returns the valid alignments.\n * Takes into consideration the aligns supported by a block, if the block supports wide controls or not and if theme supports wide controls or not.\n * Exported just for testing purposes, not exported outside the module.\n *\n * @param {?boolean|string[]} blockAlign          Aligns supported by the block.\n * @param {?boolean}          hasWideBlockSupport True if block supports wide alignments. And False otherwise.\n * @param {?boolean}          hasWideEnabled      True if theme supports wide alignments. And False otherwise.\n *\n * @return {string[]} Valid alignments.\n */\nexport function getValidAlignments(\n\tblockAlign,\n\thasWideBlockSupport = true,\n\thasWideEnabled = true\n) {\n\tlet validAlignments;\n\tif ( Array.isArray( blockAlign ) ) {\n\t\tvalidAlignments = blockAlign;\n\t} else if ( blockAlign === true ) {\n\t\t// `true` includes all alignments...\n\t\tvalidAlignments = ALL_ALIGNMENTS;\n\t} else {\n\t\tvalidAlignments = [];\n\t}\n\n\tif (\n\t\t! hasWideEnabled ||\n\t\t( blockAlign === true && ! hasWideBlockSupport )\n\t) {\n\t\treturn without( validAlignments, ...WIDE_ALIGNMENTS );\n\t}\n\n\treturn validAlignments;\n}\n\n/**\n * Filters registered block settings, extending attributes to include `align`.\n *\n * @param  {Object} settings Original block settings\n * @return {Object}          Filtered block settings\n */\nexport function addAttribute( settings ) {\n\t// allow blocks to specify their own attribute definition with default values if needed.\n\tif ( has( settings.attributes, [ 'align', 'type' ] ) ) {\n\t\treturn settings;\n\t}\n\tif ( hasBlockSupport( settings, 'align' ) ) {\n\t\t// Gracefully handle if settings.attributes is undefined.\n\t\tsettings.attributes = {\n\t\t\t...settings.attributes,\n\t\t\talign: {\n\t\t\t\ttype: 'string',\n\t\t\t\t// Allow for '' since it is used by updateAlignment function\n\t\t\t\t// in withToolbarControls for special cases with defined default values.\n\t\t\t\tenum: [ ...ALL_ALIGNMENTS, '' ],\n\t\t\t},\n\t\t};\n\t}\n\n\treturn settings;\n}\n\nconst AlignmentHookSettings = createContext( {} );\n\n/**\n * Allows to pass additional settings to the alignment hook.\n */\nexport const AlignmentHookSettingsProvider = AlignmentHookSettings.Provider;\n\n/**\n * Override the default edit UI to include new toolbar controls for block\n * alignment, if block defines support.\n *\n * @param  {Function} BlockEdit Original component\n * @return {Function}           Wrapped component\n */\nexport const withToolbarControls = createHigherOrderComponent(\n\t( BlockEdit ) => ( props ) => {\n\t\tconst { isEmbedButton } = useContext( AlignmentHookSettings );\n\t\tconst { name: blockName } = props;\n\t\t// Compute valid alignments without taking into account,\n\t\t// if the theme supports wide alignments or not.\n\t\t// BlockAlignmentToolbar takes into account the theme support.\n\t\tconst validAlignments = isEmbedButton\n\t\t\t? []\n\t\t\t: getValidAlignments(\n\t\t\t\t\tgetBlockSupport( blockName, 'align' ),\n\t\t\t\t\thasBlockSupport( blockName, 'alignWide', true )\n\t\t\t  );\n\n\t\tconst updateAlignment = ( nextAlign ) => {\n\t\t\tif ( ! nextAlign ) {\n\t\t\t\tconst blockType = getBlockType( props.name );\n\t\t\t\tconst blockDefaultAlign = get( blockType, [\n\t\t\t\t\t'attributes',\n\t\t\t\t\t'align',\n\t\t\t\t\t'default',\n\t\t\t\t] );\n\t\t\t\tif ( blockDefaultAlign ) {\n\t\t\t\t\tnextAlign = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tprops.setAttributes( { align: nextAlign } );\n\t\t};\n\n\t\treturn [\n\t\t\tvalidAlignments.length > 0 && props.isSelected && (\n\t\t\t\t<BlockControls key=\"align-controls\">\n\t\t\t\t\t<BlockAlignmentToolbar\n\t\t\t\t\t\tvalue={ props.attributes.align }\n\t\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\t\tcontrols={ validAlignments }\n\t\t\t\t\t/>\n\t\t\t\t</BlockControls>\n\t\t\t),\n\t\t\t<BlockEdit key=\"edit\" { ...props } />,\n\t\t];\n\t},\n\t'withToolbarControls'\n);\n\n/**\n * Override the default block element to add alignment wrapper props.\n *\n * @param  {Function} BlockListBlock Original component\n * @return {Function}                Wrapped component\n */\nexport const withDataAlign = createHigherOrderComponent(\n\t( BlockListBlock ) => ( props ) => {\n\t\tconst { name, attributes } = props;\n\t\tconst { align } = attributes;\n\t\tconst hasWideEnabled = useSelect(\n\t\t\t( select ) =>\n\t\t\t\t!! select( 'core/block-editor' ).getSettings().alignWide,\n\t\t\t[]\n\t\t);\n\n\t\t// If an alignment is not assigned, there's no need to go through the\n\t\t// effort to validate or assign its value.\n\t\tif ( align === undefined ) {\n\t\t\treturn <BlockListBlock { ...props } />;\n\t\t}\n\n\t\tconst validAlignments = getValidAlignments(\n\t\t\tgetBlockSupport( name, 'align' ),\n\t\t\thasBlockSupport( name, 'alignWide', true ),\n\t\t\thasWideEnabled\n\t\t);\n\n\t\tlet wrapperProps = props.wrapperProps;\n\t\tif ( validAlignments.includes( align ) ) {\n\t\t\twrapperProps = { ...wrapperProps, 'data-align': align };\n\t\t}\n\n\t\treturn <BlockListBlock { ...props } wrapperProps={ wrapperProps } />;\n\t}\n);\n\n/**\n * Override props assigned to save component to inject alignment class name if\n * block supports it.\n *\n * @param  {Object} props      Additional props applied to save element\n * @param  {Object} blockType  Block type\n * @param  {Object} attributes Block attributes\n * @return {Object}            Filtered props applied to save element\n */\nexport function addAssignedAlign( props, blockType, attributes ) {\n\tconst { align } = attributes;\n\tconst blockAlign = getBlockSupport( blockType, 'align' );\n\tconst hasWideBlockSupport = hasBlockSupport( blockType, 'alignWide', true );\n\n\t// Compute valid alignments without taking into account if\n\t// the theme supports wide alignments or not.\n\t// This way changing themes does not impact the block save.\n\tconst isAlignValid = getValidAlignments(\n\t\tblockAlign,\n\t\thasWideBlockSupport\n\t).includes( align );\n\tif ( isAlignValid ) {\n\t\tprops.className = classnames( `align${ align }`, props.className );\n\t}\n\n\treturn props;\n}\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/align/addAttribute',\n\taddAttribute\n);\naddFilter(\n\t'editor.BlockListBlock',\n\t'core/editor/align/with-data-align',\n\twithDataAlign\n);\naddFilter(\n\t'editor.BlockEdit',\n\t'core/editor/align/with-toolbar-controls',\n\twithToolbarControls\n);\naddFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'core/align/addAssignedAlign',\n\taddAssignedAlign\n);\n"]}