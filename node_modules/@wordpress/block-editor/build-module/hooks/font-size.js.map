{"version":3,"sources":["@wordpress/block-editor/src/hooks/font-size.js"],"names":["addFilter","hasBlockSupport","useSelect","TokenList","getFontSize","getFontSizeClass","getFontSizeObjectByValue","FontSizePicker","cleanEmptyObject","createHigherOrderComponent","FONT_SIZE_SUPPORT_KEY","addAttributes","settings","attributes","fontSize","Object","assign","type","addSaveProps","props","blockType","classes","className","add","newClassName","value","undefined","addEditProps","existingGetEditWrapperProps","getEditWrapperProps","useFontSizes","select","getSettings","fontSizes","FontSizeEdit","style","setAttributes","isDisabled","useIsFontSizeDisabled","fontSizeObject","typography","onChange","fontSizeSlug","slug","size","blockName","name","hasFontSizes","length","withFontSizeInlineStyles","BlockListBlock","wrapperProps","newProps","fontSizeValue"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport { hasBlockSupport } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\nimport TokenList from '@wordpress/token-list';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetFontSize,\n\tgetFontSizeClass,\n\tgetFontSizeObjectByValue,\n\tFontSizePicker,\n} from '../components/font-sizes';\nimport { cleanEmptyObject } from './utils';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\nexport const FONT_SIZE_SUPPORT_KEY = '__experimentalFontSize';\n\n/**\n * Filters registered block settings, extending attributes to include\n * `fontSize` and `fontWeight` attributes.\n *\n * @param  {Object} settings Original block settings\n * @return {Object}          Filtered block settings\n */\nfunction addAttributes( settings ) {\n\tif ( ! hasBlockSupport( settings, FONT_SIZE_SUPPORT_KEY ) ) {\n\t\treturn settings;\n\t}\n\n\t// Allow blocks to specify a default value if needed.\n\tif ( ! settings.attributes.fontSize ) {\n\t\tObject.assign( settings.attributes, {\n\t\t\tfontSize: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override props assigned to save component to inject font size.\n *\n * @param  {Object} props      Additional props applied to save element\n * @param  {Object} blockType  Block type\n * @param  {Object} attributes Block attributes\n * @return {Object}            Filtered props applied to save element\n */\nfunction addSaveProps( props, blockType, attributes ) {\n\tif ( ! hasBlockSupport( blockType, FONT_SIZE_SUPPORT_KEY ) ) {\n\t\treturn props;\n\t}\n\n\t// Use TokenList to dedupe classes.\n\tconst classes = new TokenList( props.className );\n\tclasses.add( getFontSizeClass( attributes.fontSize ) );\n\tconst newClassName = classes.value;\n\tprops.className = newClassName ? newClassName : undefined;\n\n\treturn props;\n}\n\n/**\n * Filters registered block settings to expand the block edit wrapper\n * by applying the desired styles and classnames.\n *\n * @param  {Object} settings Original block settings\n * @return {Object}          Filtered block settings\n */\nfunction addEditProps( settings ) {\n\tif ( ! hasBlockSupport( settings, FONT_SIZE_SUPPORT_KEY ) ) {\n\t\treturn settings;\n\t}\n\n\tconst existingGetEditWrapperProps = settings.getEditWrapperProps;\n\tsettings.getEditWrapperProps = ( attributes ) => {\n\t\tlet props = {};\n\t\tif ( existingGetEditWrapperProps ) {\n\t\t\tprops = existingGetEditWrapperProps( attributes );\n\t\t}\n\t\treturn addSaveProps( props, settings, attributes );\n\t};\n\n\treturn settings;\n}\n\nfunction useFontSizes() {\n\treturn useSelect(\n\t\t( select ) => select( 'core/block-editor' ).getSettings().fontSizes\n\t);\n}\n\n/**\n * Inspector control panel containing the font size related configuration\n *\n * @param {Object} props\n *\n * @return {WPElement} Font size edit element.\n */\nexport function FontSizeEdit( props ) {\n\tconst {\n\t\tattributes: { fontSize, style },\n\t\tsetAttributes,\n\t} = props;\n\tconst isDisabled = useIsFontSizeDisabled( props );\n\tconst fontSizes = useFontSizes();\n\n\tif ( isDisabled ) {\n\t\treturn null;\n\t}\n\n\tconst fontSizeObject = getFontSize(\n\t\tfontSizes,\n\t\tfontSize,\n\t\tstyle?.typography?.fontSize\n\t);\n\tconst onChange = ( value ) => {\n\t\tconst fontSizeSlug = getFontSizeObjectByValue( fontSizes, value ).slug;\n\n\t\tsetAttributes( {\n\t\t\tstyle: cleanEmptyObject( {\n\t\t\t\t...style,\n\t\t\t\ttypography: {\n\t\t\t\t\t...style?.typography,\n\t\t\t\t\tfontSize: fontSizeSlug ? undefined : value,\n\t\t\t\t},\n\t\t\t} ),\n\t\t\tfontSize: fontSizeSlug,\n\t\t} );\n\t};\n\n\treturn (\n\t\t<FontSizePicker value={ fontSizeObject.size } onChange={ onChange } />\n\t);\n}\n\n/**\n * Custom hook that checks if font-size settings have been disabled.\n *\n * @param {string} name The name of the block.\n * @return {boolean} Whether setting is disabled.\n */\nexport function useIsFontSizeDisabled( { name: blockName } = {} ) {\n\tconst fontSizes = useFontSizes();\n\tconst hasFontSizes = fontSizes.length;\n\n\treturn (\n\t\t! hasBlockSupport( blockName, FONT_SIZE_SUPPORT_KEY ) || ! hasFontSizes\n\t);\n}\n\n/**\n * Add inline styles for font sizes.\n * Ideally, this is not needed and themes load the font-size classes on the\n * editor.\n *\n * @param  {Function} BlockListBlock Original component\n * @return {Function}                Wrapped component\n */\nconst withFontSizeInlineStyles = createHigherOrderComponent(\n\t( BlockListBlock ) => ( props ) => {\n\t\tconst fontSizes = useFontSizes();\n\t\tconst {\n\t\t\tname: blockName,\n\t\t\tattributes: { fontSize, style },\n\t\t\twrapperProps,\n\t\t} = props;\n\n\t\tconst newProps = { ...props };\n\n\t\t// Only add inline styles if the block supports font sizes, doesn't\n\t\t// already have an inline font size, and does have a class to extract\n\t\t// the font size from.\n\t\tif (\n\t\t\thasBlockSupport( blockName, FONT_SIZE_SUPPORT_KEY ) &&\n\t\t\tfontSize &&\n\t\t\t! style?.typography?.fontSize\n\t\t) {\n\t\t\tconst fontSizeValue = getFontSize(\n\t\t\t\tfontSizes,\n\t\t\t\tfontSize,\n\t\t\t\tstyle?.typography?.fontSize\n\t\t\t).size;\n\n\t\t\tnewProps.wrapperProps = {\n\t\t\t\t...wrapperProps,\n\t\t\t\tstyle: {\n\t\t\t\t\tfontSize: fontSizeValue,\n\t\t\t\t\t...wrapperProps?.style,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn <BlockListBlock { ...newProps } />;\n\t},\n\t'withFontSizeInlineStyles'\n);\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/font/addAttribute',\n\taddAttributes\n);\n\naddFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'core/font/addSaveProps',\n\taddSaveProps\n);\n\naddFilter( 'blocks.registerBlockType', 'core/font/addEditProps', addEditProps );\n\naddFilter(\n\t'editor.BlockListBlock',\n\t'core/font-size/with-font-size-inline-styles',\n\twithFontSizeInlineStyles\n);\n"]}