{"version":3,"sources":["@wordpress/block-editor/src/store/reducer.js"],"names":["flow","reduce","first","last","omit","without","mapValues","keys","isEqual","isEmpty","get","identity","difference","omitBy","pickBy","combineReducers","isReusableBlock","PREFERENCES_DEFAULTS","SETTINGS_DEFAULTS","insertAt","moveTo","mapBlockOrder","blocks","rootClientId","result","forEach","block","clientId","innerBlocks","push","Object","assign","mapBlockParents","flattenBlocks","transform","stack","length","shift","getFlattenedBlocksWithoutAttributes","getFlattenedBlockAttributes","attributes","getNestedBlockClientIds","blocksOrder","controlledInnerBlocks","getMutateSafeObject","original","working","hasSameKeys","a","b","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","clientIds","fillKeysWithEmptyObject","objectKeys","key","withBlockCache","reducer","state","newState","cache","getBlocksWithParentsClientIds","current","parents","updatedBlockUids","parentClientIds","replacedClientIds","removedClientIds","fromRootClientId","toRootClientId","byClientId","name","ref","updatedId","withPersistentBlockChange","markNextChangeAsNotPersistent","nextState","isExplicitPersistentChange","nextIsPersistentChange","isPersistentChange","withIgnoredBlockChange","IGNORED_ACTION_TYPES","Set","isIgnoredChange","has","withInnerBlocksRemoveCascade","getAllChildren","i","order","keepControlledInnerBlocks","withBlockReset","visibleClientIds","withReplaceInnerBlocks","nestedControllers","stateAfterBlocksRemoval","stateAfterInsert","index","value","withSaveReusableBlock","id","changes","updates","every","next","accumulator","subState","mappedBlocks","fromIndex","indexOf","firstClientId","firstIndex","lastClientId","hasControlledInnerBlocks","isTyping","draggedBlocks","isCaretWithinFormattedText","selection","updateSelection","indexToSelect","blockToSelect","initialPosition","selectionStart","attributeKey","offset","startOffset","start","selectionEnd","endOffset","end","isMultiSelecting","isSelectionEnabled","blocksMode","insertionPoint","template","isValid","settings","preferences","prevState","insert","insertUsage","time","count","blockListSettings","hasOwnProperty","isNavigationMode","hasBlockMovingClientId","lastBlockAttributesChange","automaticChangeStatus","highlightedBlock","isHighlighted"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tflow,\n\treduce,\n\tfirst,\n\tlast,\n\tomit,\n\twithout,\n\tmapValues,\n\tkeys,\n\tisEqual,\n\tisEmpty,\n\tget,\n\tidentity,\n\tdifference,\n\tomitBy,\n\tpickBy,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\nimport { isReusableBlock } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS, SETTINGS_DEFAULTS } from './defaults';\nimport { insertAt, moveTo } from './array';\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = { [ rootClientId ]: [] };\n\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\n\t\tresult[ rootClientId ].push( clientId );\n\n\t\tObject.assign( result, mapBlockOrder( innerBlocks, clientId ) );\n\t} );\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object where each key contains\n * the clientId of the block and the value is the parent of the block.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n\treturn blocks.reduce(\n\t\t( result, block ) =>\n\t\t\tObject.assign(\n\t\t\t\tresult,\n\t\t\t\t{ [ block.clientId ]: rootClientId },\n\t\t\t\tmapBlockParents( block.innerBlocks, block.clientId )\n\t\t\t),\n\t\t{}\n\t);\n}\n\n/**\n * Helper method to iterate through all blocks, recursing into inner blocks,\n * applying a transformation function to each one.\n * Returns a flattened object with the transformed blocks.\n *\n * @param {Array} blocks Blocks to flatten.\n * @param {Function} transform Transforming function to be applied to each block.\n *\n * @return {Object} Flattened object.\n */\nfunction flattenBlocks( blocks, transform = identity ) {\n\tconst result = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult[ block.clientId ] = transform( block );\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, without\n * attributes, recursing into inner blocks. Keys correspond to the block client\n * ID, the value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => omit( block, 'attributes' ) );\n}\n\n/**\n * Given an array of blocks, returns an object containing all block attributes,\n * recursing into inner blocks. Keys correspond to the block client ID, the\n * value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlockAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\n}\n\n/**\n * Given a block order map object, returns *all* of the block client IDs that are\n * a descendant of the given root client ID.\n *\n * Calling this with `rootClientId` set to `''` results in a list of client IDs\n * that are in the post. That is, it excludes blocks like fetched reusable\n * blocks which are stored into state but not visible. It also excludes\n * InnerBlocks controllers, like template parts.\n *\n * It is important to exclude the full inner block controller and not just the\n * inner blocks because in many cases, we need to persist the previous value of\n * an inner block controller. To do so, it must be excluded from the list of\n * client IDs which are considered to be part of the top-level entity.\n *\n * @param {Object}  blocksOrder  Object that maps block client IDs to a list of\n *                               nested block client IDs.\n * @param {?string} rootClientId The root client ID to search. Defaults to ''.\n * @param {?Object} controlledInnerBlocks The InnerBlocks controller state.\n *\n * @return {Array} List of descendant client IDs.\n */\nfunction getNestedBlockClientIds(\n\tblocksOrder,\n\trootClientId = '',\n\tcontrolledInnerBlocks = {}\n) {\n\treturn reduce(\n\t\tblocksOrder[ rootClientId ],\n\t\t( result, clientId ) => {\n\t\t\tif ( !! controlledInnerBlocks[ clientId ] ) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn [\n\t\t\t\t...result,\n\t\t\t\tclientId,\n\t\t\t\t...getNestedBlockClientIds( blocksOrder, clientId ),\n\t\t\t];\n\t\t},\n\t\t[]\n\t);\n}\n\n/**\n * Returns an object against which it is safe to perform mutating operations,\n * given the original object and its current working copy.\n *\n * @param {Object} original Original object.\n * @param {Object} working  Working object.\n *\n * @return {Object} Mutation-safe object.\n */\nfunction getMutateSafeObject( original, working ) {\n\tif ( original === working ) {\n\t\treturn { ...original };\n\t}\n\n\treturn working;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( keys( a ), keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action     Currently dispatching action.\n * @param {Object} lastAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tlastAction !== undefined &&\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tisEqual( action.clientIds, lastAction.clientIds ) &&\n\t\thasSameKeys( action.attributes, lastAction.attributes )\n\t);\n}\n\n/**\n * Utility returning an object with an empty object value for each key.\n *\n * @param {Array} objectKeys Keys to fill.\n * @return {Object} Object filled with empty object as values for each clientId.\n */\nconst fillKeysWithEmptyObject = ( objectKeys ) => {\n\treturn objectKeys.reduce( ( result, key ) => {\n\t\tresult[ key ] = {};\n\t\treturn result;\n\t}, {} );\n};\n\n/**\n * Higher-order reducer intended to compute a cache key for each block in the post.\n * A new instance of the cache key (empty object) is created each time the block object\n * needs to be refreshed (for any change in the block or its children).\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockCache = ( reducer ) => ( state = {}, action ) => {\n\tconst newState = reducer( state, action );\n\n\tif ( newState === state ) {\n\t\treturn state;\n\t}\n\tnewState.cache = state.cache ? state.cache : {};\n\n\t/**\n\t * For each clientId provided, traverses up parents, adding the provided clientIds\n\t * and each parent's clientId to the returned array.\n\t *\n\t * When calling this function consider that it uses the old state, so any state\n\t * modifications made by the `reducer` will not be present.\n\t *\n\t * @param {Array} clientIds an Array of block clientIds.\n\t *\n\t * @return {Array} The provided clientIds and all of their parent clientIds.\n\t */\n\tconst getBlocksWithParentsClientIds = ( clientIds ) => {\n\t\treturn clientIds.reduce( ( result, clientId ) => {\n\t\t\tlet current = clientId;\n\t\t\tdo {\n\t\t\t\tresult.push( current );\n\t\t\t\tcurrent = state.parents[ current ];\n\t\t\t} while ( current && ! state.controlledInnerBlocks[ current ] );\n\t\t\treturn result;\n\t\t}, [] );\n\t};\n\n\tswitch ( action.type ) {\n\t\tcase 'RESET_BLOCKS':\n\t\t\tnewState.cache = mapValues(\n\t\t\t\tflattenBlocks( action.blocks ),\n\t\t\t\t() => ( {} )\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'RECEIVE_BLOCKS':\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tconst updatedBlockUids = keys( flattenBlocks( action.blocks ) );\n\t\t\tif (\n\t\t\t\taction.rootClientId &&\n\t\t\t\t! state.controlledInnerBlocks[ action.rootClientId ]\n\t\t\t) {\n\t\t\t\tupdatedBlockUids.push( action.rootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( [ action.clientId ] )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( action.clientIds )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\tconst parentClientIds = fillKeysWithEmptyObject(\n\t\t\t\tgetBlocksWithParentsClientIds( action.replacedClientIds )\n\t\t\t);\n\n\t\t\tnewState.cache = {\n\t\t\t\t...omit( newState.cache, action.replacedClientIds ),\n\t\t\t\t...omit( parentClientIds, action.replacedClientIds ),\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tkeys( flattenBlocks( action.blocks ) )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\tnewState.cache = {\n\t\t\t\t...omit( newState.cache, action.removedClientIds ),\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tdifference(\n\t\t\t\t\t\tgetBlocksWithParentsClientIds( action.clientIds ),\n\t\t\t\t\t\taction.clientIds\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\tconst updatedBlockUids = [ ...action.clientIds ];\n\t\t\tif ( action.fromRootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.fromRootClientId );\n\t\t\t}\n\t\t\tif ( action.toRootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.toRootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'MOVE_BLOCKS_UP':\n\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\tconst updatedBlockUids = [];\n\t\t\tif ( action.rootClientId ) {\n\t\t\t\tupdatedBlockUids.push( action.rootClientId );\n\t\t\t}\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t\tbreak;\n\t\t}\n\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\tconst updatedBlockUids = keys(\n\t\t\t\tomitBy( newState.attributes, ( attributes, clientId ) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tnewState.byClientId[ clientId ].name !== 'core/block' ||\n\t\t\t\t\t\tattributes.ref !== action.updatedId\n\t\t\t\t\t);\n\t\t\t\t} )\n\t\t\t);\n\n\t\t\tnewState.cache = {\n\t\t\t\t...newState.cache,\n\t\t\t\t...fillKeysWithEmptyObject(\n\t\t\t\t\tgetBlocksWithParentsClientIds( updatedBlockUids )\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t}\n\n\treturn newState;\n};\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isPersistentChange` property value corresponding to whether a change in\n * state can be considered as persistent. All changes are considered persistent\n * except when updating the same block attribute as in the previous action.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withPersistentBlockChange( reducer ) {\n\tlet lastAction;\n\tlet markNextChangeAsNotPersistent = false;\n\n\treturn ( state, action ) => {\n\t\tlet nextState = reducer( state, action );\n\n\t\tconst isExplicitPersistentChange =\n\t\t\taction.type === 'MARK_LAST_CHANGE_AS_PERSISTENT' ||\n\t\t\tmarkNextChangeAsNotPersistent;\n\n\t\t// Defer to previous state value (or default) unless changing or\n\t\t// explicitly marking as persistent.\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\n\t\t\tmarkNextChangeAsNotPersistent =\n\t\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\t\tconst nextIsPersistentChange = get(\n\t\t\t\tstate,\n\t\t\t\t[ 'isPersistentChange' ],\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tif ( state.isPersistentChange === nextIsPersistentChange ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t};\n\t\t}\n\n\t\tnextState = {\n\t\t\t...nextState,\n\t\t\tisPersistentChange: isExplicitPersistentChange\n\t\t\t\t? ! markNextChangeAsNotPersistent\n\t\t\t\t: ! isUpdatingSameBlockAttribute( action, lastAction ),\n\t\t};\n\n\t\t// In comparing against the previous action, consider only those which\n\t\t// would have qualified as one which would have been ignored or not\n\t\t// have resulted in a changed state.\n\t\tlastAction = action;\n\t\tmarkNextChangeAsNotPersistent =\n\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isIgnoredChange` property value corresponding to whether a change in state\n * can be considered as ignored. A change is considered ignored when the result\n * of an action not incurred by direct user interaction.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withIgnoredBlockChange( reducer ) {\n\t/**\n\t * Set of action types for which a blocks state change should be ignored.\n\t *\n\t * @type {Set}\n\t */\n\tconst IGNORED_ACTION_TYPES = new Set( [ 'RECEIVE_BLOCKS' ] );\n\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( nextState !== state ) {\n\t\t\tnextState.isIgnoredChange = IGNORED_ACTION_TYPES.has( action.type );\n\t\t}\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer targeting the combined blocks reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\t// Gets all children which need to be removed.\n\tconst getAllChildren = ( clientIds ) => {\n\t\tlet result = clientIds;\n\t\tfor ( let i = 0; i < result.length; i++ ) {\n\t\t\tif (\n\t\t\t\t! state.order[ result[ i ] ] ||\n\t\t\t\t( action.keepControlledInnerBlocks &&\n\t\t\t\t\taction.keepControlledInnerBlocks[ result[ i ] ] )\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( result === clientIds ) {\n\t\t\t\tresult = [ ...result ];\n\t\t\t}\n\n\t\t\tresult.push( ...state.order[ result[ i ] ] );\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( state ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\tremovedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\treplacedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\n * reusable blocks and blocks controlled by inner blocks controllers) alone.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockReset = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'RESET_BLOCKS' ) {\n\t\t/**\n\t\t * A list of client IDs associated with the top level entity (like a\n\t\t * post or template). It excludes the client IDs of blocks associated\n\t\t * with other entities, like inner block controllers or reusable blocks.\n\t\t */\n\t\tconst visibleClientIds = getNestedBlockClientIds(\n\t\t\tstate.order,\n\t\t\t'',\n\t\t\tstate.controlledInnerBlocks\n\t\t);\n\n\t\t// pickBy returns only the truthy values from controlledInnerBlocks\n\t\tconst controlledInnerBlocks = Object.keys(\n\t\t\tpickBy( state.controlledInnerBlocks )\n\t\t);\n\n\t\t/**\n\t\t * Each update operation consists of a few parts:\n\t\t * 1. First, the client IDs associated with the top level entity are\n\t\t *    removed from the existing state key, leaving in place controlled\n\t\t *    blocks (like reusable blocks and inner block controllers).\n\t\t * 2. Second, the blocks from the reset action are used to calculate the\n\t\t *    individual state keys. This will re-populate the clientIDs which\n\t\t *    were removed in step 1.\n\t\t * 3. In some cases, we remove the recalculated inner block controllers,\n\t\t *    letting their old values persist. We need to do this because the\n\t\t *    reset block action from a top-level entity is not aware of any\n\t\t *    inner blocks inside InnerBlock controllers. So if the new values\n\t\t *    were used, it would not take into account the existing InnerBlocks\n\t\t *    which already exist in the state for inner block controllers. For\n\t\t *    example, `attributes` uses the newly computed value for controllers\n\t\t *    since attributes are stored in the top-level entity. But `order`\n\t\t *    uses the previous value for the controllers since the new value\n\t\t *    does not include the order of controlled inner blocks. So if the\n\t\t *    new value was used, template parts would disappear from the editor\n\t\t *    whenever you try to undo a change in the top level entity.\n\t\t */\n\t\treturn {\n\t\t\t...state,\n\t\t\tbyClientId: {\n\t\t\t\t...omit( state.byClientId, visibleClientIds ),\n\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t},\n\t\t\tattributes: {\n\t\t\t\t...omit( state.attributes, visibleClientIds ),\n\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t},\n\t\t\torder: {\n\t\t\t\t...omit( state.order, visibleClientIds ),\n\t\t\t\t...omit(\n\t\t\t\t\tmapBlockOrder( action.blocks ),\n\t\t\t\t\tcontrolledInnerBlocks\n\t\t\t\t),\n\t\t\t},\n\t\t\tparents: {\n\t\t\t\t...omit( state.parents, visibleClientIds ),\n\t\t\t\t...mapBlockParents( action.blocks ),\n\t\t\t},\n\t\t\tcache: {\n\t\t\t\t...omit( state.cache, visibleClientIds ),\n\t\t\t\t...omit(\n\t\t\t\t\tmapValues( flattenBlocks( action.blocks ), () => ( {} ) ),\n\t\t\t\t\tcontrolledInnerBlocks\n\t\t\t\t),\n\t\t\t},\n\t\t};\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state\n * should become equivalent to the execution of a `REMOVE_BLOCKS` action\n * containing all the child's of the root block followed by the execution of\n * `INSERT_BLOCKS` with the new blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\n\t\treturn reducer( state, action );\n\t}\n\n\t// Finds every nested inner block controller. We must check the action blocks\n\t// and not just the block parent state because some inner block controllers\n\t// should be deleted if specified, whereas others should not be deleted. If\n\t// a controlled should not be deleted, then we need to avoid deleting its\n\t// inner blocks from the block state because its inner blocks will not be\n\t// attached to the block in the action.\n\tconst nestedControllers = {};\n\tif ( Object.keys( state.controlledInnerBlocks ).length ) {\n\t\tconst stack = [ ...action.blocks ];\n\t\twhile ( stack.length ) {\n\t\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\t\tstack.push( ...innerBlocks );\n\t\t\tif ( !! state.controlledInnerBlocks[ block.clientId ] ) {\n\t\t\t\tnestedControllers[ block.clientId ] = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// The `keepControlledInnerBlocks` prop will keep the inner blocks of the\n\t// marked block in the block state so that they can be reattached to the\n\t// marked block when we re-insert everything a few lines below.\n\tlet stateAfterBlocksRemoval = state;\n\tif ( state.order[ action.rootClientId ] ) {\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\n\t\t\ttype: 'REMOVE_BLOCKS',\n\t\t\tkeepControlledInnerBlocks: nestedControllers,\n\t\t\tclientIds: state.order[ action.rootClientId ],\n\t\t} );\n\t}\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\n\tif ( action.blocks.length ) {\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\n\t\t\t...action,\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tindex: 0,\n\t\t} );\n\n\t\t// We need to re-attach the block order of the controlled inner blocks.\n\t\t// Otherwise, an inner block controller's blocks will be deleted entirely\n\t\t// from its entity..\n\t\tstateAfterInsert.order = {\n\t\t\t...stateAfterInsert.order,\n\t\t\t...reduce(\n\t\t\t\tnestedControllers,\n\t\t\t\t( result, value, key ) => {\n\t\t\t\t\tif ( state.order[ key ] ) {\n\t\t\t\t\t\tresult[ key ] = state.order[ key ];\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t),\n\t\t};\n\t}\n\treturn stateAfterInsert;\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\n * regular reducers and needs a higher-order reducer since it needs access to\n * both `byClientId` and `attributes` simultaneously.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\n\t\tconst { id, updatedId } = action;\n\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\tif ( id === updatedId ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate = { ...state };\n\n\t\tstate.attributes = mapValues(\n\t\t\tstate.attributes,\n\t\t\t( attributes, clientId ) => {\n\t\t\t\tconst { name } = state.byClientId[ clientId ];\n\t\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...attributes,\n\t\t\t\t\t\tref: updatedId,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn attributes;\n\t\t\t}\n\t\t);\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Reducer returning the blocks state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blocks = flow(\n\tcombineReducers,\n\twithSaveReusableBlock, // needs to be before withBlockCache\n\twithBlockCache, // needs to be before withInnerBlocksRemoveCascade\n\twithInnerBlocksRemoveCascade,\n\twithReplaceInnerBlocks, // needs to be after withInnerBlocksRemoveCascade\n\twithBlockReset,\n\twithPersistentBlockChange,\n\twithIgnoredBlockChange\n)( {\n\tbyClientId( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlocksWithoutAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Do nothing if only attributes change.\n\t\t\t\tconst changes = omit( action.updates, 'attributes' );\n\t\t\t\tif ( isEmpty( changes ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...changes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tattributes( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn getFlattenedBlockAttributes( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\n\t\t\t\tif (\n\t\t\t\t\t! state[ action.clientId ] ||\n\t\t\t\t\t! action.updates.attributes\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...action.updates.attributes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\t// Avoid a state change if none of the block IDs are known.\n\t\t\t\tif ( action.clientIds.every( ( id ) => ! state[ id ] ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst next = action.clientIds.reduce(\n\t\t\t\t\t( accumulator, id ) => ( {\n\t\t\t\t\t\t...accumulator,\n\t\t\t\t\t\t[ id ]: reduce(\n\t\t\t\t\t\t\taction.attributes,\n\t\t\t\t\t\t\t( result, value, key ) => {\n\t\t\t\t\t\t\t\t// Consider as updates only changed values.\n\t\t\t\t\t\t\t\tif ( value !== result[ key ] ) {\n\t\t\t\t\t\t\t\t\tresult = getMutateSafeObject(\n\t\t\t\t\t\t\t\t\t\tstate[ id ],\n\t\t\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstate[ id ]\n\t\t\t\t\t\t),\n\t\t\t\t\t} ),\n\t\t\t\t\t{}\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\taction.clientIds.every(\n\t\t\t\t\t\t( id ) => next[ id ] === state[ id ]\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn { ...state, ...next };\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\torder( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn mapBlockOrder( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...omit( mapBlockOrder( action.blocks ), '' ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst { rootClientId = '' } = action;\n\t\t\t\tconst subState = state[ rootClientId ] || [];\n\t\t\t\tconst mappedBlocks = mapBlockOrder(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\t\tconst { index = subState.length } = action;\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mappedBlocks,\n\t\t\t\t\t[ rootClientId ]: insertAt(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tmappedBlocks[ rootClientId ],\n\t\t\t\t\t\tindex\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst {\n\t\t\t\t\tfromRootClientId = '',\n\t\t\t\t\ttoRootClientId = '',\n\t\t\t\t\tclientIds,\n\t\t\t\t} = action;\n\t\t\t\tconst { index = state[ toRootClientId ].length } = action;\n\n\t\t\t\t// Moving inside the same parent block\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\tconst subState = state[ toRootClientId ];\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientIds[ 0 ] );\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ toRootClientId ]: moveTo(\n\t\t\t\t\t\t\tstate[ toRootClientId ],\n\t\t\t\t\t\t\tfromIndex,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Moving from a parent block to another\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ fromRootClientId ]: without(\n\t\t\t\t\t\tstate[ fromRootClientId ],\n\t\t\t\t\t\t...clientIds\n\t\t\t\t\t),\n\t\t\t\t\t[ toRootClientId ]: insertAt(\n\t\t\t\t\t\tstate[ toRootClientId ],\n\t\t\t\t\t\tclientIds,\n\t\t\t\t\t\tindex\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif (\n\t\t\t\t\t! subState.length ||\n\t\t\t\t\tfirstClientId === first( subState )\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex - 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\tconst lastClientId = last( clientIds );\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif ( ! subState.length || lastClientId === last( subState ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex + 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst { clientIds } = action;\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\n\n\t\t\t\treturn flow( [\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tomit( nextState, action.replacedClientIds ),\n\t\t\t\t\t( nextState ) => ( {\n\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\t...omit( mappedBlocks, '' ),\n\t\t\t\t\t} ),\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tmapValues( nextState, ( subState ) =>\n\t\t\t\t\t\t\treduce(\n\t\t\t\t\t\t\t\tsubState,\n\t\t\t\t\t\t\t\t( result, clientId ) => {\n\t\t\t\t\t\t\t\t\tif ( clientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t\t\t...mappedBlocks[ '' ],\n\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tclientIds.indexOf( clientId ) === -1\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tresult.push( clientId );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t] )( state );\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn flow( [\n\t\t\t\t\t// Remove inner block ordering for removed blocks\n\t\t\t\t\t( nextState ) => omit( nextState, action.removedClientIds ),\n\n\t\t\t\t\t// Remove deleted blocks from other blocks' orderings\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tmapValues( nextState, ( subState ) =>\n\t\t\t\t\t\t\twithout( subState, ...action.removedClientIds )\n\t\t\t\t\t\t),\n\t\t\t\t] )( state );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// While technically redundant data as the inverse of `order`, it serves as\n\t// an optimization for the selectors which derive the ancestry of a block.\n\tparents( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\treturn mapBlockParents( action.blocks );\n\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents(\n\t\t\t\t\t\taction.blocks,\n\t\t\t\t\t\taction.rootClientId || ''\n\t\t\t\t\t),\n\t\t\t\t};\n\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...action.clientIds.reduce( ( accumulator, id ) => {\n\t\t\t\t\t\taccumulator[ id ] = action.toRootClientId || '';\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}, {} ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...mapBlockParents(\n\t\t\t\t\t\taction.blocks,\n\t\t\t\t\t\tstate[ action.clientIds[ 0 ] ]\n\t\t\t\t\t),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tcontrolledInnerBlocks(\n\t\tstate = {},\n\t\t{ type, clientId, hasControlledInnerBlocks }\n\t) {\n\t\tif ( type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: hasControlledInnerBlocks,\n\t\t\t};\n\t\t}\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning dragged block client id.\n *\n * @param {string[]} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {string[]} Updated state.\n */\nexport function draggedBlocks( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_DRAGGING_BLOCKS':\n\t\t\treturn action.clientIds;\n\n\t\tcase 'STOP_DRAGGING_BLOCKS':\n\t\t\treturn [];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the caret is within formatted text.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isCaretWithinFormattedText( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENTER_FORMATTED_TEXT':\n\t\t\treturn true;\n\n\t\tcase 'EXIT_FORMATTED_TEXT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Internal helper reducer for selectionStart and selectionEnd. Can hold a block\n * selection, represented by an object with property clientId.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction selection( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK': {\n\t\t\tif ( state.clientId ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.clientId };\n\t\tcase 'REPLACE_INNER_BLOCKS': // REPLACE_INNER_BLOCKS and INSERT_BLOCKS should follow the same logic.\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\t// REPLACE_INNER_BLOCKS can be called with an empty array.\n\t\t\tif ( ! action.updateSelection || ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.blocks[ 0 ].clientId };\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif (\n\t\t\t\t! action.clientIds ||\n\t\t\t\t! action.clientIds.length ||\n\t\t\t\taction.clientIds.indexOf( state.clientId ) === -1\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {};\n\t\tcase 'REPLACE_BLOCKS': {\n\t\t\tif ( action.clientIds.indexOf( state.clientId ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst indexToSelect =\n\t\t\t\taction.indexToSelect || action.blocks.length - 1;\n\t\t\tconst blockToSelect = action.blocks[ indexToSelect ];\n\n\t\t\tif ( ! blockToSelect ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif ( blockToSelect.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst newState = { clientId: blockToSelect.clientId };\n\t\t\tif ( typeof action.initialPosition === 'number' ) {\n\t\t\t\tnewState.initialPosition = action.initialPosition;\n\t\t\t}\n\t\t\treturn newState;\n\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block selection's start.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function selectionStart( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SELECTION_CHANGE':\n\t\t\treturn {\n\t\t\t\tclientId: action.clientId,\n\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\toffset: action.startOffset,\n\t\t\t};\n\t\tcase 'RESET_SELECTION':\n\t\t\treturn action.selectionStart;\n\t\tcase 'MULTI_SELECT':\n\t\t\treturn { clientId: action.start };\n\t}\n\n\treturn selection( state, action );\n}\n\n/**\n * Reducer returning the block selection's end.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function selectionEnd( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SELECTION_CHANGE':\n\t\t\treturn {\n\t\t\t\tclientId: action.clientId,\n\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\toffset: action.endOffset,\n\t\t\t};\n\t\tcase 'RESET_SELECTION':\n\t\t\treturn action.selectionEnd;\n\t\tcase 'MULTI_SELECT':\n\t\t\treturn { clientId: action.end };\n\t}\n\n\treturn selection( state, action );\n}\n\n/**\n * Reducer returning whether the user is multi-selecting.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isMultiSelecting( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_MULTI_SELECT':\n\t\t\treturn true;\n\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether selection is enabled.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isSelectionEnabled( state = true, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn action.isSelectionEnabled;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the intial block selection.\n *\n * Currently this in only used to restore the selection after block deletion and\n * pasting new content.This reducer should eventually be removed in favour of setting\n * selection directly.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {?number} Initial position: -1 or undefined.\n */\nexport function initialPosition( state, action ) {\n\tif (\n\t\taction.type === 'REPLACE_BLOCKS' &&\n\t\ttypeof action.initialPosition === 'number'\n\t) {\n\t\treturn action.initialPosition;\n\t} else if ( action.type === 'SELECT_BLOCK' ) {\n\t\treturn action.initialPosition;\n\t} else if ( action.type === 'REMOVE_BLOCKS' ) {\n\t\treturn state;\n\t} else if ( action.type === 'START_TYPING' ) {\n\t\treturn state;\n\t}\n\n\t// Reset the state by default (for any action not handled).\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]:\n\t\t\t\tstate[ clientId ] && state[ clientId ] === 'html'\n\t\t\t\t\t? 'visual'\n\t\t\t\t\t: 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT':\n\t\t\tconst { rootClientId, index } = action;\n\t\t\treturn { rootClientId, index };\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object}  state                 Current state.\n * @param {Object}  action                Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tlet id = block.name;\n\t\t\t\tconst insert = { name: block.name };\n\t\t\t\tif ( isReusableBlock( block ) ) {\n\t\t\t\t\tinsert.ref = block.attributes.ref;\n\t\t\t\t\tid += '/' + block.attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ]\n\t\t\t\t\t\t\t\t? prevState.insertUsage[ id ].count + 1\n\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t\tinsert,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS':\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\treturn omit( state, clientId );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( isEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning whether the navigation mode is enabled or not.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function isNavigationMode( state = false, action ) {\n\t// Let inserting block always trigger Edit mode.\n\tif ( action.type === 'INSERT_BLOCKS' ) {\n\t\treturn false;\n\t}\n\n\tif ( action.type === 'SET_NAVIGATION_MODE' ) {\n\t\treturn action.isNavigationMode;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the block moving mode is enabled or not.\n *\n * @param {string|null} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string|null} Updated state.\n */\nexport function hasBlockMovingClientId( state = null, action ) {\n\t// Let inserting block always trigger Edit mode.\n\n\tif ( action.type === 'SET_BLOCK_MOVING_MODE' ) {\n\t\treturn action.hasBlockMovingClientId;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer return an updated state representing the most recent block attribute\n * update. The state is structured as an object where the keys represent the\n * client IDs of blocks, the values a subset of attributes from the most recent\n * block update. The state is always reset to null if the last action is\n * anything other than an attributes update.\n *\n * @param {Object<string,Object>} state  Current state.\n * @param {Object}                action Action object.\n *\n * @return {[string,Object]} Updated state.\n */\nexport function lastBlockAttributesChange( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tif ( ! action.updates.attributes ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn { [ action.clientId ]: action.updates.attributes };\n\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\treturn action.clientIds.reduce(\n\t\t\t\t( accumulator, id ) => ( {\n\t\t\t\t\t...accumulator,\n\t\t\t\t\t[ id ]: action.attributes,\n\t\t\t\t} ),\n\t\t\t\t{}\n\t\t\t);\n\t}\n\n\treturn null;\n}\n\n/**\n * Reducer returning automatic change state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function automaticChangeStatus( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'MARK_AUTOMATIC_CHANGE':\n\t\t\treturn 'pending';\n\t\tcase 'MARK_AUTOMATIC_CHANGE_FINAL':\n\t\t\tif ( state === 'pending' ) {\n\t\t\t\treturn 'final';\n\t\t\t}\n\n\t\t\treturn;\n\t\tcase 'SELECTION_CHANGE':\n\t\t\t// As long as the state is not final, ignore any selection changes.\n\t\t\tif ( state !== 'final' ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn;\n\t\t// Undoing an automatic change should still be possible after mouse\n\t\t// move.\n\t\tcase 'STOP_TYPING':\n\t\t\treturn state;\n\t}\n\n\t// Reset the state by default (for any action not handled).\n}\n\n/**\n * Reducer returning current highlighted block.\n *\n * @param {boolean} state  Current highlighted block.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function highlightedBlock( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_BLOCK_HIGHLIGHT':\n\t\t\tconst { clientId, isHighlighted } = action;\n\n\t\t\tif ( isHighlighted ) {\n\t\t\t\treturn clientId;\n\t\t\t} else if ( state === clientId ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn state;\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId !== state ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( {\n\tblocks,\n\tisTyping,\n\tdraggedBlocks,\n\tisCaretWithinFormattedText,\n\tselectionStart,\n\tselectionEnd,\n\tisMultiSelecting,\n\tisSelectionEnabled,\n\tinitialPosition,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\ttemplate,\n\tsettings,\n\tpreferences,\n\tlastBlockAttributesChange,\n\tisNavigationMode,\n\thasBlockMovingClientId,\n\tautomaticChangeStatus,\n\thighlightedBlock,\n} );\n"]}