{"version":3,"sources":["@wordpress/block-editor/src/utils/get-paste-event-data.js"],"names":["getPasteEventData","clipboardData","items","files","plainText","html","getData","error1","error2","Array","from","forEach","item","getAsFile","file","name","type","size","push","filter","test","length","map","join"],"mappings":";;;;;;;AAGA;;AAKA;;AARA;;;;AAKA;;;AAKO,SAASA,iBAAT,OAAgD;AAAA,MAAlBC,aAAkB,QAAlBA,aAAkB;AAAA,MAChDC,KADgD,GAC/BD,aAD+B,CAChDC,KADgD;AAAA,MACzCC,KADyC,GAC/BF,aAD+B,CACzCE,KADyC,EAGtD;AACA;;AACAD,EAAAA,KAAK,GAAG,mBAAOA,KAAP,IAAiB,EAAjB,GAAsBA,KAA9B;AACAC,EAAAA,KAAK,GAAG,mBAAOA,KAAP,IAAiB,EAAjB,GAAsBA,KAA9B;AAEA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,IAAI,GAAG,EAAX,CATsD,CAWtD;AACA;AACA;;AACA,MAAI;AACHD,IAAAA,SAAS,GAAGH,aAAa,CAACK,OAAd,CAAuB,YAAvB,CAAZ;AACAD,IAAAA,IAAI,GAAGJ,aAAa,CAACK,OAAd,CAAuB,WAAvB,CAAP;AACA,GAHD,CAGE,OAAQC,MAAR,EAAiB;AAClB,QAAI;AACHF,MAAAA,IAAI,GAAGJ,aAAa,CAACK,OAAd,CAAuB,MAAvB,CAAP;AACA,KAFD,CAEE,OAAQE,MAAR,EAAiB;AAClB;AACA;AACA;AACA;AACA;AACD;;AAEDL,EAAAA,KAAK,GAAGM,KAAK,CAACC,IAAN,CAAYP,KAAZ,CAAR;AAEAM,EAAAA,KAAK,CAACC,IAAN,CAAYR,KAAZ,EAAoBS,OAApB,CAA6B,UAAEC,IAAF,EAAY;AACxC,QAAK,CAAEA,IAAI,CAACC,SAAZ,EAAwB;AACvB;AACA;;AAED,QAAMC,IAAI,GAAGF,IAAI,CAACC,SAAL,EAAb;;AAEA,QAAK,CAAEC,IAAP,EAAc;AACb;AACA;;AATuC,QAWhCC,IAXgC,GAWXD,IAXW,CAWhCC,IAXgC;AAAA,QAW1BC,IAX0B,GAWXF,IAXW,CAW1BE,IAX0B;AAAA,QAWpBC,IAXoB,GAWXH,IAXW,CAWpBG,IAXoB;;AAaxC,QAAK,CAAE,kBAAMd,KAAN,EAAa;AAAEY,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,IAAI,EAAJA,IAAR;AAAcC,MAAAA,IAAI,EAAJA;AAAd,KAAb,CAAP,EAA6C;AAC5Cd,MAAAA,KAAK,CAACe,IAAN,CAAYJ,IAAZ;AACA;AACD,GAhBD;AAkBAX,EAAAA,KAAK,GAAGA,KAAK,CAACgB,MAAN,CAAc;AAAA,QAAIH,IAAJ,SAAIA,IAAJ;AAAA,WACrB,6BAA6BI,IAA7B,CAAmCJ,IAAnC,CADqB;AAAA,GAAd,CAAR,CAhDsD,CAoDtD;AACA;;AACA,MAAKb,KAAK,CAACkB,MAAN,IAAgB,CAAEhB,IAAvB,EAA8B;AAC7BA,IAAAA,IAAI,GAAGF,KAAK,CACVmB,GADK,CACA,UAAER,IAAF;AAAA,kCAA0B,yBAAeA,IAAf,CAA1B;AAAA,KADA,EAELS,IAFK,CAEC,EAFD,CAAP;AAGAnB,IAAAA,SAAS,GAAG,EAAZ;AACA;;AAED,SAAO;AAAEC,IAAAA,IAAI,EAAJA,IAAF;AAAQD,IAAAA,SAAS,EAATA;AAAR,GAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { find, isNil } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createBlobURL } from '@wordpress/blob';\n\nexport function getPasteEventData( { clipboardData } ) {\n\tlet { items, files } = clipboardData;\n\n\t// In Edge these properties can be null instead of undefined, so a more\n\t// rigorous test is required over using default values.\n\titems = isNil( items ) ? [] : items;\n\tfiles = isNil( files ) ? [] : files;\n\n\tlet plainText = '';\n\tlet html = '';\n\n\t// IE11 only supports `Text` as an argument for `getData` and will\n\t// otherwise throw an invalid argument error, so we try the standard\n\t// arguments first, then fallback to `Text` if they fail.\n\ttry {\n\t\tplainText = clipboardData.getData( 'text/plain' );\n\t\thtml = clipboardData.getData( 'text/html' );\n\t} catch ( error1 ) {\n\t\ttry {\n\t\t\thtml = clipboardData.getData( 'Text' );\n\t\t} catch ( error2 ) {\n\t\t\t// Some browsers like UC Browser paste plain text by default and\n\t\t\t// don't support clipboardData at all, so allow default\n\t\t\t// behaviour.\n\t\t\treturn;\n\t\t}\n\t}\n\n\tfiles = Array.from( files );\n\n\tArray.from( items ).forEach( ( item ) => {\n\t\tif ( ! item.getAsFile ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst file = item.getAsFile();\n\n\t\tif ( ! file ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { name, type, size } = file;\n\n\t\tif ( ! find( files, { name, type, size } ) ) {\n\t\t\tfiles.push( file );\n\t\t}\n\t} );\n\n\tfiles = files.filter( ( { type } ) =>\n\t\t/^image\\/(?:jpe?g|png|gif)$/.test( type )\n\t);\n\n\t// Only process files if no HTML is present.\n\t// A pasted file may have the URL as plain text.\n\tif ( files.length && ! html ) {\n\t\thtml = files\n\t\t\t.map( ( file ) => `<img src=\"${ createBlobURL( file ) }\">` )\n\t\t\t.join( '' );\n\t\tplainText = '';\n\t}\n\n\treturn { html, plainText };\n}\n"]}