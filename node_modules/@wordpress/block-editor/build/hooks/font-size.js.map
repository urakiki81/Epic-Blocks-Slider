{"version":3,"sources":["@wordpress/block-editor/src/hooks/font-size.js"],"names":["FONT_SIZE_SUPPORT_KEY","addAttributes","settings","attributes","fontSize","Object","assign","type","addSaveProps","props","blockType","classes","TokenList","className","add","newClassName","value","undefined","addEditProps","existingGetEditWrapperProps","getEditWrapperProps","useFontSizes","select","getSettings","fontSizes","FontSizeEdit","style","setAttributes","isDisabled","useIsFontSizeDisabled","fontSizeObject","typography","onChange","fontSizeSlug","slug","size","blockName","name","hasFontSizes","length","withFontSizeInlineStyles","BlockListBlock","wrapperProps","newProps","fontSizeValue"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport { hasBlockSupport } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\nimport TokenList from '@wordpress/token-list';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetFontSize,\n\tgetFontSizeClass,\n\tgetFontSizeObjectByValue,\n\tFontSizePicker,\n} from '../components/font-sizes';\nimport { cleanEmptyObject } from './utils';\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\nexport const FONT_SIZE_SUPPORT_KEY = '__experimentalFontSize';\n\n/**\n * Filters registered block settings, extending attributes to include\n * `fontSize` and `fontWeight` attributes.\n *\n * @param  {Object} settings Original block settings\n * @return {Object}          Filtered block settings\n */\nfunction addAttributes( settings ) {\n\tif ( ! hasBlockSupport( settings, FONT_SIZE_SUPPORT_KEY ) ) {\n\t\treturn settings;\n\t}\n\n\t// Allow blocks to specify a default value if needed.\n\tif ( ! settings.attributes.fontSize ) {\n\t\tObject.assign( settings.attributes, {\n\t\t\tfontSize: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override props assigned to save component to inject font size.\n *\n * @param  {Object} props      Additional props applied to save element\n * @param  {Object} blockType  Block type\n * @param  {Object} attributes Block attributes\n * @return {Object}            Filtered props applied to save element\n */\nfunction addSaveProps( props, blockType, attributes ) {\n\tif ( ! hasBlockSupport( blockType, FONT_SIZE_SUPPORT_KEY ) ) {\n\t\treturn props;\n\t}\n\n\t// Use TokenList to dedupe classes.\n\tconst classes = new TokenList( props.className );\n\tclasses.add( getFontSizeClass( attributes.fontSize ) );\n\tconst newClassName = classes.value;\n\tprops.className = newClassName ? newClassName : undefined;\n\n\treturn props;\n}\n\n/**\n * Filters registered block settings to expand the block edit wrapper\n * by applying the desired styles and classnames.\n *\n * @param  {Object} settings Original block settings\n * @return {Object}          Filtered block settings\n */\nfunction addEditProps( settings ) {\n\tif ( ! hasBlockSupport( settings, FONT_SIZE_SUPPORT_KEY ) ) {\n\t\treturn settings;\n\t}\n\n\tconst existingGetEditWrapperProps = settings.getEditWrapperProps;\n\tsettings.getEditWrapperProps = ( attributes ) => {\n\t\tlet props = {};\n\t\tif ( existingGetEditWrapperProps ) {\n\t\t\tprops = existingGetEditWrapperProps( attributes );\n\t\t}\n\t\treturn addSaveProps( props, settings, attributes );\n\t};\n\n\treturn settings;\n}\n\nfunction useFontSizes() {\n\treturn useSelect(\n\t\t( select ) => select( 'core/block-editor' ).getSettings().fontSizes\n\t);\n}\n\n/**\n * Inspector control panel containing the font size related configuration\n *\n * @param {Object} props\n *\n * @return {WPElement} Font size edit element.\n */\nexport function FontSizeEdit( props ) {\n\tconst {\n\t\tattributes: { fontSize, style },\n\t\tsetAttributes,\n\t} = props;\n\tconst isDisabled = useIsFontSizeDisabled( props );\n\tconst fontSizes = useFontSizes();\n\n\tif ( isDisabled ) {\n\t\treturn null;\n\t}\n\n\tconst fontSizeObject = getFontSize(\n\t\tfontSizes,\n\t\tfontSize,\n\t\tstyle?.typography?.fontSize\n\t);\n\tconst onChange = ( value ) => {\n\t\tconst fontSizeSlug = getFontSizeObjectByValue( fontSizes, value ).slug;\n\n\t\tsetAttributes( {\n\t\t\tstyle: cleanEmptyObject( {\n\t\t\t\t...style,\n\t\t\t\ttypography: {\n\t\t\t\t\t...style?.typography,\n\t\t\t\t\tfontSize: fontSizeSlug ? undefined : value,\n\t\t\t\t},\n\t\t\t} ),\n\t\t\tfontSize: fontSizeSlug,\n\t\t} );\n\t};\n\n\treturn (\n\t\t<FontSizePicker value={ fontSizeObject.size } onChange={ onChange } />\n\t);\n}\n\n/**\n * Custom hook that checks if font-size settings have been disabled.\n *\n * @param {string} name The name of the block.\n * @return {boolean} Whether setting is disabled.\n */\nexport function useIsFontSizeDisabled( { name: blockName } = {} ) {\n\tconst fontSizes = useFontSizes();\n\tconst hasFontSizes = fontSizes.length;\n\n\treturn (\n\t\t! hasBlockSupport( blockName, FONT_SIZE_SUPPORT_KEY ) || ! hasFontSizes\n\t);\n}\n\n/**\n * Add inline styles for font sizes.\n * Ideally, this is not needed and themes load the font-size classes on the\n * editor.\n *\n * @param  {Function} BlockListBlock Original component\n * @return {Function}                Wrapped component\n */\nconst withFontSizeInlineStyles = createHigherOrderComponent(\n\t( BlockListBlock ) => ( props ) => {\n\t\tconst fontSizes = useFontSizes();\n\t\tconst {\n\t\t\tname: blockName,\n\t\t\tattributes: { fontSize, style },\n\t\t\twrapperProps,\n\t\t} = props;\n\n\t\tconst newProps = { ...props };\n\n\t\t// Only add inline styles if the block supports font sizes, doesn't\n\t\t// already have an inline font size, and does have a class to extract\n\t\t// the font size from.\n\t\tif (\n\t\t\thasBlockSupport( blockName, FONT_SIZE_SUPPORT_KEY ) &&\n\t\t\tfontSize &&\n\t\t\t! style?.typography?.fontSize\n\t\t) {\n\t\t\tconst fontSizeValue = getFontSize(\n\t\t\t\tfontSizes,\n\t\t\t\tfontSize,\n\t\t\t\tstyle?.typography?.fontSize\n\t\t\t).size;\n\n\t\t\tnewProps.wrapperProps = {\n\t\t\t\t...wrapperProps,\n\t\t\t\tstyle: {\n\t\t\t\t\tfontSize: fontSizeValue,\n\t\t\t\t\t...wrapperProps?.style,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn <BlockListBlock { ...newProps } />;\n\t},\n\t'withFontSizeInlineStyles'\n);\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/font/addAttribute',\n\taddAttributes\n);\n\naddFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'core/font/addSaveProps',\n\taddSaveProps\n);\n\naddFilter( 'blocks.registerBlockType', 'core/font/addEditProps', addEditProps );\n\naddFilter(\n\t'editor.BlockListBlock',\n\t'core/font-size/with-font-size-inline-styles',\n\twithFontSizeInlineStyles\n);\n"]}