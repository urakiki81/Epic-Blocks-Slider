{"version":3,"sources":["@wordpress/block-editor/src/components/block-controls/index.js"],"names":["Fill","Slot","BlockControlsSlot","__experimentalIsExpanded","props","accessibleToolbarState","ToolbarContext","buildSlotName","BlockControlsFill","controls","children","fillProps","value","isExpanded","BlockControls"],"mappings":";;;;;;;;;AAQA;;;;;;AALA;;AAMA;;AASA;;AAlBA;;;;AAKA;;;;AAUA;;;sBAKuB,gCAAgB,eAAhB,C;IAAfA,I,mBAAAA,I;IAAMC,I,mBAAAA,I;;AAEd,SAASC,iBAAT,OAA6E;AAAA,mCAA/CC,wBAA+C;AAAA,MAA/CA,wBAA+C,sCAApB,KAAoB;AAAA,MAAVC,KAAU;;AAC5E,MAAMC,sBAAsB,GAAG,yBAAYC,wCAAZ,CAA/B;AACA,SACC,4BAAC,IAAD;AACC,IAAA,IAAI,EAAGC,aAAa,CAAEJ,wBAAF;AADrB,KAEMC,KAFN;AAGC,IAAA,SAAS,EAAGC;AAHb,KADD;AAOA;;AAED,SAASG,iBAAT,QAA+E;AAAA,MAAjDC,QAAiD,SAAjDA,QAAiD;AAAA,MAAvCN,wBAAuC,SAAvCA,wBAAuC;AAAA,MAAbO,QAAa,SAAbA,QAAa;;AAC9E,MAAK,CAAE,uCAAP,EAAmC;AAClC,WAAO,IAAP;AACA;;AAED,SACC,4BAAC,IAAD;AAAM,IAAA,IAAI,EAAGH,aAAa,CAAEJ,wBAAF;AAA1B,KACG,UAAEQ,SAAF,EAAiB;AAClB;AACA;AACA;AACA,QAAMC,KAAK,GAAG,CAAE,qBAASD,SAAT,CAAF,GAAyBA,SAAzB,GAAqC,IAAnD;AACA,WACC,4BAAC,wCAAD,CAAgB,QAAhB;AAAyB,MAAA,KAAK,EAAGC;AAAjC,OACC,4BAAC,wBAAD;AAAc,MAAA,QAAQ,EAAGH;AAAzB,MADD,EAEGC,QAFH,CADD;AAMA,GAZF,CADD;AAgBA;;AAED,IAAMH,aAAa,GAAG,SAAhBA,aAAgB,CAAEM,UAAF;AAAA,gCACJA,UAAU,GAAG,WAAH,GAAiB,EADvB;AAAA,CAAtB;;AAGA,IAAMC,aAAa,GAAGN,iBAAtB;AAEAM,aAAa,CAACb,IAAd,GAAqBC,iBAArB;eAEeY,a","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useContext } from '@wordpress/element';\nimport {\n\t__experimentalToolbarContext as ToolbarContext,\n\tcreateSlotFill,\n\tToolbarGroup,\n} from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport useDisplayBlockControls from '../use-display-block-controls';\n\nconst { Fill, Slot } = createSlotFill( 'BlockControls' );\n\nfunction BlockControlsSlot( { __experimentalIsExpanded = false, ...props } ) {\n\tconst accessibleToolbarState = useContext( ToolbarContext );\n\treturn (\n\t\t<Slot\n\t\t\tname={ buildSlotName( __experimentalIsExpanded ) }\n\t\t\t{ ...props }\n\t\t\tfillProps={ accessibleToolbarState }\n\t\t/>\n\t);\n}\n\nfunction BlockControlsFill( { controls, __experimentalIsExpanded, children } ) {\n\tif ( ! useDisplayBlockControls() ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<Fill name={ buildSlotName( __experimentalIsExpanded ) }>\n\t\t\t{ ( fillProps ) => {\n\t\t\t\t// Children passed to BlockControlsFill will not have access to any\n\t\t\t\t// React Context whose Provider is part of the BlockControlsSlot tree.\n\t\t\t\t// So we re-create the Provider in this subtree.\n\t\t\t\tconst value = ! isEmpty( fillProps ) ? fillProps : null;\n\t\t\t\treturn (\n\t\t\t\t\t<ToolbarContext.Provider value={ value }>\n\t\t\t\t\t\t<ToolbarGroup controls={ controls } />\n\t\t\t\t\t\t{ children }\n\t\t\t\t\t</ToolbarContext.Provider>\n\t\t\t\t);\n\t\t\t} }\n\t\t</Fill>\n\t);\n}\n\nconst buildSlotName = ( isExpanded ) =>\n\t`BlockControls${ isExpanded ? '-expanded' : '' }`;\n\nconst BlockControls = BlockControlsFill;\n\nBlockControls.Slot = BlockControlsSlot;\n\nexport default BlockControls;\n"]}