{"version":3,"sources":["@wordpress/block-editor/src/components/inserter/search-items.js"],"names":["defaultGetName","item","name","defaultGetTitle","title","defaultGetKeywords","keywords","defaultGetCategory","category","defaultGetCollection","normalizeSearchInput","input","replace","toLowerCase","getNormalizedSearchTerms","removeMatchingTerms","unmatchedTerms","unprocessedTerms","unmatchedTerm","unprocessedTerm","includes","searchBlockItems","items","categories","collections","searchInput","normalizedSearchTerms","length","config","getCategory","slug","getCollection","split","getVariations","variations","Array","from","reduce","accumulator","add","forEach","keyword","Set","searchItems","rankedItems","map","getItemSearchRank","filter","rank","sort","rank1","rank2","searchTerm","getName","getTitle","getKeywords","collection","normalizedSearchInput","normalizedTitle","startsWith","terms","join"],"mappings":";;;;;;;;;;;;;;AAGA;;AAHA;;;AAKA;AACA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAEC,IAAF;AAAA,SAAYA,IAAI,CAACC,IAAL,IAAa,EAAzB;AAAA,CAAvB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAEF,IAAF;AAAA,SAAYA,IAAI,CAACG,KAAjB;AAAA,CAAxB;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAEJ,IAAF;AAAA,SAAYA,IAAI,CAACK,QAAL,IAAiB,EAA7B;AAAA,CAA3B;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAEN,IAAF;AAAA,SAAYA,IAAI,CAACO,QAAjB;AAAA,CAA3B;;AACA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,SAAM,IAAN;AAAA,CAA7B;AAEA;;;;;;;;;AAOA,SAASC,oBAAT,GAA4C;AAAA,MAAbC,KAAa,uEAAL,EAAK;AAC3C;AACA;AACAA,EAAAA,KAAK,GAAG,oBAAQA,KAAR,CAAR,CAH2C,CAK3C;AACA;;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACC,OAAN,CAAe,KAAf,EAAsB,EAAtB,CAAR,CAP2C,CAS3C;AACA;;AACAD,EAAAA,KAAK,GAAGA,KAAK,CAACE,WAAN,EAAR;AAEA,SAAOF,KAAP;AACA;AAED;;;;;;;;;AAOO,IAAMG,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAkB;AAAA,MAAhBH,KAAgB,uEAAR,EAAQ;AACzD;AACA,SAAO,mBAAOD,oBAAoB,CAAEC,KAAF,CAA3B,CAAP;AACA,CAHM;;;;AAKP,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAEC,cAAF,EAAkBC,gBAAlB,EAAwC;AACnE,SAAO,4BACND,cADM,EAENF,wBAAwB,CAAEG,gBAAF,CAFlB,EAGN,UAAEC,aAAF,EAAiBC,eAAjB;AAAA,WACCA,eAAe,CAACC,QAAhB,CAA0BF,aAA1B,CADD;AAAA,GAHM,CAAP;AAMA,CAPD;;AASO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC/BC,KAD+B,EAE/BC,UAF+B,EAG/BC,WAH+B,EAI/BC,WAJ+B,EAK3B;AACJ,MAAMC,qBAAqB,GAAGZ,wBAAwB,CAAEW,WAAF,CAAtD;;AACA,MAAKC,qBAAqB,CAACC,MAAtB,KAAiC,CAAtC,EAA0C;AACzC,WAAOL,KAAP;AACA;;AAED,MAAMM,MAAM,GAAG;AACdC,IAAAA,WAAW,EAAE,qBAAE5B,IAAF;AAAA;;AAAA,sBACZ,kBAAMsB,UAAN,EAAkB;AAAEO,QAAAA,IAAI,EAAE7B,IAAI,CAACO;AAAb,OAAlB,CADY,0CACZ,MAA6CJ,KADjC;AAAA,KADC;AAGd2B,IAAAA,aAAa,EAAE,uBAAE9B,IAAF;AAAA;;AAAA,sCACduB,WAAW,CAAEvB,IAAI,CAACC,IAAL,CAAU8B,KAAV,CAAiB,GAAjB,EAAwB,CAAxB,CAAF,CADG,0DACd,sBAA4C5B,KAD9B;AAAA,KAHD;AAKd6B,IAAAA,aAAa,EAAE;AAAA,iCAAIC,UAAJ;AAAA,UAAIA,UAAJ,gCAAiB,EAAjB;AAAA,aACdC,KAAK,CAACC,IAAN,CACCF,UAAU,CAACG,MAAX,CACC,UAAEC,WAAF,SAA6C;AAAA,YAA5BlC,KAA4B,SAA5BA,KAA4B;AAAA,mCAArBE,QAAqB;AAAA,YAArBA,QAAqB,+BAAV,EAAU;AAC5CgC,QAAAA,WAAW,CAACC,GAAZ,CAAiBnC,KAAjB;AACAE,QAAAA,QAAQ,CAACkC,OAAT,CAAkB,UAAEC,OAAF;AAAA,iBACjBH,WAAW,CAACC,GAAZ,CAAiBE,OAAjB,CADiB;AAAA,SAAlB;AAGA,eAAOH,WAAP;AACA,OAPF,EAQC,IAAII,GAAJ,EARD,CADD,CADc;AAAA;AALD,GAAf;AAoBA,SAAOC,WAAW,CAAErB,KAAF,EAASG,WAAT,EAAsBG,MAAtB,CAAlB;AACA,CAhCM;AAkCP;;;;;;;;;;;;AAQO,IAAMe,WAAW,GAAG,SAAdA,WAAc,GAAiD;AAAA,MAA/CrB,KAA+C,uEAAvC,EAAuC;AAAA,MAAnCG,WAAmC,uEAArB,EAAqB;AAAA,MAAjBG,MAAiB,uEAAR,EAAQ;AAC3E,MAAMF,qBAAqB,GAAGZ,wBAAwB,CAAEW,WAAF,CAAtD;;AACA,MAAKC,qBAAqB,CAACC,MAAtB,KAAiC,CAAtC,EAA0C;AACzC,WAAOL,KAAP;AACA;;AAED,MAAMsB,WAAW,GAAGtB,KAAK,CACvBuB,GADkB,CACb,UAAE5C,IAAF,EAAY;AACjB,WAAO,CAAEA,IAAF,EAAQ6C,iBAAiB,CAAE7C,IAAF,EAAQwB,WAAR,EAAqBG,MAArB,CAAzB,CAAP;AACA,GAHkB,EAIlBmB,MAJkB,CAIV;AAAA;AAAA,QAAMC,IAAN;;AAAA,WAAkBA,IAAI,GAAG,CAAzB;AAAA,GAJU,CAApB;AAMAJ,EAAAA,WAAW,CAACK,IAAZ,CAAkB;AAAA;AAAA,QAAMC,KAAN;;AAAA;AAAA,QAAmBC,KAAnB;;AAAA,WAAgCA,KAAK,GAAGD,KAAxC;AAAA,GAAlB;AACA,SAAON,WAAW,CAACC,GAAZ,CAAiB;AAAA;AAAA,QAAI5C,IAAJ;;AAAA,WAAgBA,IAAhB;AAAA,GAAjB,CAAP;AACA,CAdM;AAgBP;;;;;;;;;;;;;;AAUO,SAAS6C,iBAAT,CAA4B7C,IAA5B,EAAkCmD,UAAlC,EAA4D;AAAA,MAAdxB,MAAc,uEAAL,EAAK;AAAA,wBAO9DA,MAP8D,CAEjEyB,OAFiE;AAAA,MAEjEA,OAFiE,gCAEvDrD,cAFuD;AAAA,yBAO9D4B,MAP8D,CAGjE0B,QAHiE;AAAA,MAGjEA,QAHiE,iCAGtDnD,eAHsD;AAAA,4BAO9DyB,MAP8D,CAIjE2B,WAJiE;AAAA,MAIjEA,WAJiE,oCAInDlD,kBAJmD;AAAA,4BAO9DuB,MAP8D,CAKjEC,WALiE;AAAA,MAKjEA,WALiE,oCAKnDtB,kBALmD;AAAA,8BAO9DqB,MAP8D,CAMjEG,aANiE;AAAA,MAMjEA,aANiE,sCAMjDtB,oBANiD;AASlE,MAAMP,IAAI,GAAGmD,OAAO,CAAEpD,IAAF,CAApB;AACA,MAAMG,KAAK,GAAGkD,QAAQ,CAAErD,IAAF,CAAtB;AACA,MAAMK,QAAQ,GAAGiD,WAAW,CAAEtD,IAAF,CAA5B;AACA,MAAMO,QAAQ,GAAGqB,WAAW,CAAE5B,IAAF,CAA5B;AACA,MAAMuD,UAAU,GAAGzB,aAAa,CAAE9B,IAAF,CAAhC;AAEA,MAAMwD,qBAAqB,GAAG/C,oBAAoB,CAAE0C,UAAF,CAAlD;AACA,MAAMM,eAAe,GAAGhD,oBAAoB,CAAEN,KAAF,CAA5C;AAEA,MAAI4C,IAAI,GAAG,CAAX,CAlBkE,CAoBlE;AACA;AACA;;AACA,MAAKS,qBAAqB,KAAKC,eAA/B,EAAiD;AAChDV,IAAAA,IAAI,IAAI,EAAR;AACA,GAFD,MAEO,IAAKU,eAAe,CAACC,UAAhB,CAA4BF,qBAA5B,CAAL,EAA2D;AACjET,IAAAA,IAAI,IAAI,EAAR;AACA,GAFM,MAEA;AACN,QAAMY,KAAK,GAAG,CAAE1D,IAAF,EAAQE,KAAR,0CAAkBE,QAAlB,IAA4BE,QAA5B,EAAsCgD,UAAtC,GAAmDK,IAAnD,CACb,GADa,CAAd;AAGA,QAAMnC,qBAAqB,GAAG,mBAAO+B,qBAAP,CAA9B;AACA,QAAMzC,cAAc,GAAGD,mBAAmB,CACzCW,qBADyC,EAEzCkC,KAFyC,CAA1C;;AAKA,QAAK5C,cAAc,CAACW,MAAf,KAA0B,CAA/B,EAAmC;AAClCqB,MAAAA,IAAI,IAAI,EAAR;AACA;AACD,GAxCiE,CA0ClE;;;AACA,MAAKA,IAAI,KAAK,CAAT,IAAc9C,IAAI,CAACyD,UAAL,CAAiB,OAAjB,CAAnB,EAAgD;AAC/CX,IAAAA,IAAI;AACJ;;AAED,SAAOA,IAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { deburr, differenceWith, find, words } from 'lodash';\n\n// Default search helpers\nconst defaultGetName = ( item ) => item.name || '';\nconst defaultGetTitle = ( item ) => item.title;\nconst defaultGetKeywords = ( item ) => item.keywords || [];\nconst defaultGetCategory = ( item ) => item.category;\nconst defaultGetCollection = () => null;\n\n/**\n * Sanitizes the search input string.\n *\n * @param {string} input The search input to normalize.\n *\n * @return {string} The normalized search input.\n */\nfunction normalizeSearchInput( input = '' ) {\n\t// Disregard diacritics.\n\t//  Input: \"mÃ©dia\"\n\tinput = deburr( input );\n\n\t// Accommodate leading slash, matching autocomplete expectations.\n\t//  Input: \"/media\"\n\tinput = input.replace( /^\\//, '' );\n\n\t// Lowercase.\n\t//  Input: \"MEDIA\"\n\tinput = input.toLowerCase();\n\n\treturn input;\n}\n\n/**\n * Converts the search term into a list of normalized terms.\n *\n * @param {string} input The search term to normalize.\n *\n * @return {string[]} The normalized list of search terms.\n */\nexport const getNormalizedSearchTerms = ( input = '' ) => {\n\t// Extract words.\n\treturn words( normalizeSearchInput( input ) );\n};\n\nconst removeMatchingTerms = ( unmatchedTerms, unprocessedTerms ) => {\n\treturn differenceWith(\n\t\tunmatchedTerms,\n\t\tgetNormalizedSearchTerms( unprocessedTerms ),\n\t\t( unmatchedTerm, unprocessedTerm ) =>\n\t\t\tunprocessedTerm.includes( unmatchedTerm )\n\t);\n};\n\nexport const searchBlockItems = (\n\titems,\n\tcategories,\n\tcollections,\n\tsearchInput\n) => {\n\tconst normalizedSearchTerms = getNormalizedSearchTerms( searchInput );\n\tif ( normalizedSearchTerms.length === 0 ) {\n\t\treturn items;\n\t}\n\n\tconst config = {\n\t\tgetCategory: ( item ) =>\n\t\t\tfind( categories, { slug: item.category } )?.title,\n\t\tgetCollection: ( item ) =>\n\t\t\tcollections[ item.name.split( '/' )[ 0 ] ]?.title,\n\t\tgetVariations: ( { variations = [] } ) =>\n\t\t\tArray.from(\n\t\t\t\tvariations.reduce(\n\t\t\t\t\t( accumulator, { title, keywords = [] } ) => {\n\t\t\t\t\t\taccumulator.add( title );\n\t\t\t\t\t\tkeywords.forEach( ( keyword ) =>\n\t\t\t\t\t\t\taccumulator.add( keyword )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t},\n\t\t\t\t\tnew Set()\n\t\t\t\t)\n\t\t\t),\n\t};\n\n\treturn searchItems( items, searchInput, config );\n};\n\n/**\n * Filters an item list given a search term.\n *\n * @param {Array}  items       Item list\n * @param {string} searchInput Search input.\n * @param {Object} config      Search Config.\n * @return {Array}             Filtered item list.\n */\nexport const searchItems = ( items = [], searchInput = '', config = {} ) => {\n\tconst normalizedSearchTerms = getNormalizedSearchTerms( searchInput );\n\tif ( normalizedSearchTerms.length === 0 ) {\n\t\treturn items;\n\t}\n\n\tconst rankedItems = items\n\t\t.map( ( item ) => {\n\t\t\treturn [ item, getItemSearchRank( item, searchInput, config ) ];\n\t\t} )\n\t\t.filter( ( [ , rank ] ) => rank > 0 );\n\n\trankedItems.sort( ( [ , rank1 ], [ , rank2 ] ) => rank2 - rank1 );\n\treturn rankedItems.map( ( [ item ] ) => item );\n};\n\n/**\n * Get the search rank for a given item and a specific search term.\n * The better the match, the higher the rank.\n * If the rank equals 0, it should be excluded from the results.\n *\n * @param {Object} item       Item to filter.\n * @param {string} searchTerm Search term.\n * @param {Object} config     Search Config.\n * @return {number}           Search Rank.\n */\nexport function getItemSearchRank( item, searchTerm, config = {} ) {\n\tconst {\n\t\tgetName = defaultGetName,\n\t\tgetTitle = defaultGetTitle,\n\t\tgetKeywords = defaultGetKeywords,\n\t\tgetCategory = defaultGetCategory,\n\t\tgetCollection = defaultGetCollection,\n\t} = config;\n\n\tconst name = getName( item );\n\tconst title = getTitle( item );\n\tconst keywords = getKeywords( item );\n\tconst category = getCategory( item );\n\tconst collection = getCollection( item );\n\n\tconst normalizedSearchInput = normalizeSearchInput( searchTerm );\n\tconst normalizedTitle = normalizeSearchInput( title );\n\n\tlet rank = 0;\n\n\t// Prefers exact matches\n\t// Then prefers if the beginning of the title matches the search term\n\t// name, keywords, categories, collection, variations match come later.\n\tif ( normalizedSearchInput === normalizedTitle ) {\n\t\trank += 30;\n\t} else if ( normalizedTitle.startsWith( normalizedSearchInput ) ) {\n\t\trank += 20;\n\t} else {\n\t\tconst terms = [ name, title, ...keywords, category, collection ].join(\n\t\t\t' '\n\t\t);\n\t\tconst normalizedSearchTerms = words( normalizedSearchInput );\n\t\tconst unmatchedTerms = removeMatchingTerms(\n\t\t\tnormalizedSearchTerms,\n\t\t\tterms\n\t\t);\n\n\t\tif ( unmatchedTerms.length === 0 ) {\n\t\t\trank += 10;\n\t\t}\n\t}\n\n\t// Give a better rank to \"core\" namespaced items.\n\tif ( rank !== 0 && name.startsWith( 'core/' ) ) {\n\t\trank++;\n\t}\n\n\treturn rank;\n}\n"]}