{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/block-html.js"],"names":["BlockHTML","clientId","html","setHtml","block","select","getBlock","updateBlock","onChange","blockType","name","attributes","content","isValid","originalContent","event","target","value"],"mappings":";;;;;;;;;AAQA;;;;AALA;;AAMA;;AACA;;AAVA;;;;AAKA;;;AAaA,SAASA,SAAT,OAAmC;AAAA,MAAbC,QAAa,QAAbA,QAAa;;AAAA,kBACR,uBAAU,EAAV,CADQ;AAAA;AAAA,MAC1BC,IAD0B;AAAA,MACpBC,OADoB;;AAElC,MAAMC,KAAK,GAAG,qBACb,UAAEC,MAAF;AAAA,WAAcA,MAAM,CAAE,mBAAF,CAAN,CAA8BC,QAA9B,CAAwCL,QAAxC,CAAd;AAAA,GADa,EAEb,CAAEA,QAAF,CAFa,CAAd;;AAFkC,qBAMV,uBAAa,mBAAb,CANU;AAAA,MAM1BM,WAN0B,gBAM1BA,WAN0B;;AAOlC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtB,QAAMC,SAAS,GAAG,0BAAcL,KAAK,CAACM,IAApB,CAAlB;AACA,QAAMC,UAAU,GAAG,gCAClBF,SADkB,EAElBP,IAFkB,EAGlBE,KAAK,CAACO,UAHY,CAAnB,CAFsB,CAQtB;;AACA,QAAMC,OAAO,GAAGV,IAAI,GAAGA,IAAH,GAAU,4BAAgBO,SAAhB,EAA2BE,UAA3B,CAA9B;AACA,QAAME,OAAO,GAAGX,IAAI,GACjB,iCAAqBO,SAArB,EAAgCE,UAAhC,EAA4CC,OAA5C,CADiB,GAEjB,IAFH;AAIAL,IAAAA,WAAW,CAAEN,QAAF,EAAY;AACtBU,MAAAA,UAAU,EAAVA,UADsB;AAEtBG,MAAAA,eAAe,EAAEF,OAFK;AAGtBC,MAAAA,OAAO,EAAPA;AAHsB,KAAZ,CAAX,CAdsB,CAoBtB;;AACA,QAAK,CAAEX,IAAP,EAAc;AACbC,MAAAA,OAAO,CAAE;AAAES,QAAAA,OAAO,EAAPA;AAAF,OAAF,CAAP;AACA;AACD,GAxBD;;AA0BA,0BAAW,YAAM;AAChBT,IAAAA,OAAO,CAAE,6BAAiBC,KAAjB,CAAF,CAAP;AACA,GAFD,EAEG,CAAEA,KAAF,CAFH;AAIA,SACC,4BAAC,8BAAD;AACC,IAAA,SAAS,EAAC,8CADX;AAEC,IAAA,KAAK,EAAGF,IAFT;AAGC,IAAA,MAAM,EAAGM,QAHV;AAIC,IAAA,QAAQ,EAAG,kBAAEO,KAAF;AAAA,aAAaZ,OAAO,CAAEY,KAAK,CAACC,MAAN,CAAaC,KAAf,CAApB;AAAA;AAJZ,IADD;AAQA;;eAEcjB,S","sourcesContent":["/**\n * External dependencies\n */\nimport TextareaAutosize from 'react-autosize-textarea';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect, useState } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n\tgetBlockAttributes,\n\tgetBlockContent,\n\tgetBlockType,\n\tisValidBlockContent,\n\tgetSaveContent,\n} from '@wordpress/blocks';\n\nfunction BlockHTML( { clientId } ) {\n\tconst [ html, setHtml ] = useState( '' );\n\tconst block = useSelect(\n\t\t( select ) => select( 'core/block-editor' ).getBlock( clientId ),\n\t\t[ clientId ]\n\t);\n\tconst { updateBlock } = useDispatch( 'core/block-editor' );\n\tconst onChange = () => {\n\t\tconst blockType = getBlockType( block.name );\n\t\tconst attributes = getBlockAttributes(\n\t\t\tblockType,\n\t\t\thtml,\n\t\t\tblock.attributes\n\t\t);\n\n\t\t// If html is empty  we reset the block to the default HTML and mark it as valid to avoid triggering an error\n\t\tconst content = html ? html : getSaveContent( blockType, attributes );\n\t\tconst isValid = html\n\t\t\t? isValidBlockContent( blockType, attributes, content )\n\t\t\t: true;\n\n\t\tupdateBlock( clientId, {\n\t\t\tattributes,\n\t\t\toriginalContent: content,\n\t\t\tisValid,\n\t\t} );\n\n\t\t// Ensure the state is updated if we reset so it displays the default content\n\t\tif ( ! html ) {\n\t\t\tsetHtml( { content } );\n\t\t}\n\t};\n\n\tuseEffect( () => {\n\t\tsetHtml( getBlockContent( block ) );\n\t}, [ block ] );\n\n\treturn (\n\t\t<TextareaAutosize\n\t\t\tclassName=\"block-editor-block-list__block-html-textarea\"\n\t\t\tvalue={ html }\n\t\t\tonBlur={ onChange }\n\t\t\tonChange={ ( event ) => setHtml( event.target.value ) }\n\t\t/>\n\t);\n}\n\nexport default BlockHTML;\n"]}