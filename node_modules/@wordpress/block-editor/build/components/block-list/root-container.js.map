{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/root-container.js"],"names":["Context","BlockNodes","SetBlockNodes","selector","select","getSelectedBlockClientId","hasMultiSelection","selectedBlockClientId","onDragStart","event","target","preventDefault","RootContainer","ref","children","className","selectBlock","onSelectionStart","onFocus","clientId","blockNodes","setBlockNodes"],"mappings":";;;;;;;;;AAQA;;;;AALA;;AAMA;;AAKA;;AACA;;AACA;;AACA;;AAjBA;;;;AAKA;;;;AAMA;;;;AAQA;AAEO,IAAMA,OAAO,GAAG,6BAAhB;;AACA,IAAMC,UAAU,GAAG,6BAAnB;;AACA,IAAMC,aAAa,GAAG,6BAAtB;;;AAEP,SAASC,QAAT,CAAmBC,MAAnB,EAA4B;AAAA,gBAC6BA,MAAM,CAC7D,mBAD6D,CADnC;AAAA,MACnBC,wBADmB,WACnBA,wBADmB;AAAA,MACOC,iBADP,WACOA,iBADP;;AAK3B,SAAO;AACNC,IAAAA,qBAAqB,EAAEF,wBAAwB,EADzC;AAENC,IAAAA,iBAAiB,EAAEA,iBAAiB;AAF9B,GAAP;AAIA;AAED;;;;;;;;;;AAQA,SAASE,WAAT,CAAsBC,KAAtB,EAA8B;AAC7B;AACA,MAAK,2BAAkBA,KAAK,CAACC,MAAxB,CAAL,EAAwC;AACvCD,IAAAA,KAAK,CAACE,cAAN;AACA;AACD;;AAED,SAASC,aAAT,OAAiDC,GAAjD,EAAuD;AAAA,MAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,MAAnBC,SAAmB,QAAnBA,SAAmB;;AAAA,mBACD,qBACpDZ,QADoD,EAEpD,EAFoD,CADC;AAAA,MAC9CI,qBAD8C,cAC9CA,qBAD8C;AAAA,MACvBD,iBADuB,cACvBA,iBADuB;;AAAA,qBAK9B,uBAAa,mBAAb,CAL8B;AAAA,MAK9CU,WAL8C,gBAK9CA,WAL8C;;AAMtD,MAAMC,gBAAgB,GAAG,gCAAmBJ,GAAnB,CAAzB;AAEA;;;;;;;;AAOA,WAASK,OAAT,CAAkBT,KAAlB,EAA0B;AACzB,QAAKH,iBAAL,EAAyB;AACxB;AACA;;AAED,QAAMa,QAAQ,GAAG,2BAAkBV,KAAK,CAACC,MAAxB,CAAjB;;AAEA,QAAKS,QAAQ,IAAIA,QAAQ,KAAKZ,qBAA9B,EAAsD;AACrDS,MAAAA,WAAW,CAAEG,QAAF,CAAX;AACA;AACD;;AAzBqD,kBA2BhB,uBAAU,EAAV,CA3BgB;AAAA;AAAA,MA2B9CC,UA3B8C;AAAA,MA2BlCC,aA3BkC;;AA6BtD,SACC,4BAAC,uBAAD;AAAgB,IAAA,YAAY,EAAGR;AAA/B,KACC,4BAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAGO;AAA7B,KACC,4BAAC,qBAAD,OADD,EAEC;AACC,IAAA,GAAG,EAAGP,GADP;AAEC,IAAA,SAAS,EAAG,yBAAYE,SAAZ,EAAuB,mBAAvB,CAFb;AAGC,IAAA,OAAO,EAAGG,OAHX;AAIC,IAAA,WAAW,EAAGV;AAJf,KAMC,4BAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAGa;AAAhC,KACC,4BAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAGJ;AAA1B,KACGH,QADH,CADD,CAND,CAFD,CADD,CADD;AAmBA;;eAEc,yBAAYF,aAAZ,C","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { createContext, forwardRef, useState } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport useMultiSelection from './use-multi-selection';\nimport { getBlockClientId } from '../../utils/dom';\nimport InsertionPoint from './insertion-point';\nimport BlockPopover from './block-popover';\n\n/** @typedef {import('@wordpress/element').WPSyntheticEvent} WPSyntheticEvent */\n\nexport const Context = createContext();\nexport const BlockNodes = createContext();\nexport const SetBlockNodes = createContext();\n\nfunction selector( select ) {\n\tconst { getSelectedBlockClientId, hasMultiSelection } = select(\n\t\t'core/block-editor'\n\t);\n\n\treturn {\n\t\tselectedBlockClientId: getSelectedBlockClientId(),\n\t\thasMultiSelection: hasMultiSelection(),\n\t};\n}\n\n/**\n * Prevents default dragging behavior within a block.\n * To do: we must handle this in the future and clean up the drag target.\n * Previously dragging was prevented for multi-selected, but this is no longer\n * needed.\n *\n * @param {WPSyntheticEvent} event Synthetic drag event.\n */\nfunction onDragStart( event ) {\n\t// Ensure we target block content, not block controls.\n\tif ( getBlockClientId( event.target ) ) {\n\t\tevent.preventDefault();\n\t}\n}\n\nfunction RootContainer( { children, className }, ref ) {\n\tconst { selectedBlockClientId, hasMultiSelection } = useSelect(\n\t\tselector,\n\t\t[]\n\t);\n\tconst { selectBlock } = useDispatch( 'core/block-editor' );\n\tconst onSelectionStart = useMultiSelection( ref );\n\n\t/**\n\t * Marks the block as selected when focused and not already selected. This\n\t * specifically handles the case where block does not set focus on its own\n\t * (via `setFocus`), typically if there is no focusable input in the block.\n\t *\n\t * @param {WPSyntheticEvent} event\n\t */\n\tfunction onFocus( event ) {\n\t\tif ( hasMultiSelection ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst clientId = getBlockClientId( event.target );\n\n\t\tif ( clientId && clientId !== selectedBlockClientId ) {\n\t\t\tselectBlock( clientId );\n\t\t}\n\t}\n\n\tconst [ blockNodes, setBlockNodes ] = useState( {} );\n\n\treturn (\n\t\t<InsertionPoint containerRef={ ref }>\n\t\t\t<BlockNodes.Provider value={ blockNodes }>\n\t\t\t\t<BlockPopover />\n\t\t\t\t<div\n\t\t\t\t\tref={ ref }\n\t\t\t\t\tclassName={ classnames( className, 'is-root-container' ) }\n\t\t\t\t\tonFocus={ onFocus }\n\t\t\t\t\tonDragStart={ onDragStart }\n\t\t\t\t>\n\t\t\t\t\t<SetBlockNodes.Provider value={ setBlockNodes }>\n\t\t\t\t\t\t<Context.Provider value={ onSelectionStart }>\n\t\t\t\t\t\t\t{ children }\n\t\t\t\t\t\t</Context.Provider>\n\t\t\t\t\t</SetBlockNodes.Provider>\n\t\t\t\t</div>\n\t\t\t</BlockNodes.Provider>\n\t\t</InsertionPoint>\n\t);\n}\n\nexport default forwardRef( RootContainer );\n"]}