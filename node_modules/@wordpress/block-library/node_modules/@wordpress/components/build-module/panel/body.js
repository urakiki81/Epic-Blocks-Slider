import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
import { noop } from 'lodash';
import mergeRefs from 'react-merge-refs';
/**
 * WordPress dependencies
 */

import { useReducedMotion } from '@wordpress/compose';
import { forwardRef, useRef } from '@wordpress/element';
import { chevronUp, chevronDown } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import Button from '../button';
import Icon from '../icon';
import { useControlledState, useUpdateEffect } from '../utils';
export function PanelBody(_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      icon = _ref.icon,
      initialOpen = _ref.initialOpen,
      _ref$onToggle = _ref.onToggle,
      onToggle = _ref$onToggle === void 0 ? noop : _ref$onToggle,
      opened = _ref.opened,
      title = _ref.title;

  var _useControlledState = useControlledState(opened, {
    initial: initialOpen === undefined ? true : initialOpen
  }),
      _useControlledState2 = _slicedToArray(_useControlledState, 2),
      isOpened = _useControlledState2[0],
      setIsOpened = _useControlledState2[1];

  var nodeRef = useRef(); // Defaults to 'smooth' scrolling
  // https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView

  var scrollBehavior = useReducedMotion() ? 'auto' : 'smooth';

  var handleOnToggle = function handleOnToggle(event) {
    event.preventDefault();
    var next = !isOpened;
    setIsOpened(next);
    onToggle(next);
  }; // Runs after initial render


  useUpdateEffect(function () {
    if (isOpened) {
      /*
       * Scrolls the content into view when visible.
       * This improves the UX when there are multiple stacking <PanelBody />
       * components in a scrollable container.
       */
      if (nodeRef.current.scrollIntoView) {
        nodeRef.current.scrollIntoView({
          inline: 'nearest',
          block: 'nearest',
          behavior: scrollBehavior
        });
      }
    }
  }, [isOpened, scrollBehavior]);
  var classes = classnames('components-panel__body', className, {
    'is-opened': isOpened
  });
  return createElement("div", {
    className: classes,
    ref: mergeRefs([nodeRef, ref])
  }, createElement(PanelBodyTitle, {
    icon: icon,
    isOpened: isOpened,
    onClick: handleOnToggle,
    title: title
  }), isOpened && children);
}
var PanelBodyTitle = forwardRef(function (_ref2, ref) {
  var isOpened = _ref2.isOpened,
      icon = _ref2.icon,
      title = _ref2.title,
      props = _objectWithoutProperties(_ref2, ["isOpened", "icon", "title"]);

  if (!title) return null;
  return createElement("h2", {
    className: "components-panel__body-title"
  }, createElement(Button, _extends({
    className: "components-panel__body-toggle",
    "aria-expanded": isOpened,
    ref: ref
  }, props), createElement("span", {
    "aria-hidden": "true"
  }, createElement(Icon, {
    className: "components-panel__arrow",
    icon: isOpened ? chevronUp : chevronDown
  })), title, icon && createElement(Icon, {
    icon: icon,
    className: "components-panel__icon",
    size: 20
  })));
});
var ForwardedComponent = forwardRef(PanelBody);
ForwardedComponent.displayName = 'PanelBody';
export default ForwardedComponent;
//# sourceMappingURL=body.js.map