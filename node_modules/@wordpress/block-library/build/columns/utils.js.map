{"version":3,"sources":["@wordpress/block-library/src/columns/utils.js"],"names":["toWidthPrecision","value","Number","isFinite","parseFloat","toFixed","undefined","getEffectiveColumnWidth","block","totalBlockCount","attributes","width","getTotalColumnsWidth","blocks","length","getColumnWidths","reduce","accumulator","Object","assign","clientId","getRedistributedColumnWidths","availableWidth","totalWidth","difference","adjustment","hasExplicitColumnWidths","every","getMappedColumnWidths","widths","map"],"mappings":";;;;;;;;;;;;;;;;;AAGA;;AAHA;;;;AAKA;;;;;;;;AAQO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAEC,KAAF;AAAA,SAC/BC,MAAM,CAACC,QAAP,CAAiBF,KAAjB,IAA2BG,UAAU,CAAEH,KAAK,CAACI,OAAN,CAAe,CAAf,CAAF,CAArC,GAA8DC,SAD/B;AAAA,CAAzB;AAGP;;;;;;;;;;;;;AASO,SAASC,uBAAT,CAAkCC,KAAlC,EAAyCC,eAAzC,EAA2D;AAAA,8BACvBD,KAAK,CAACE,UADiB,CACzDC,KADyD;AAAA,MACzDA,KADyD,sCACjD,MAAMF,eAD2C;AAEjE,SAAOT,gBAAgB,CAAEW,KAAF,CAAvB;AACA;AAED;;;;;;;;;;;AASO,SAASC,oBAAT,CACNC,MADM,EAGL;AAAA,MADDJ,eACC,uEADiBI,MAAM,CAACC,MACxB;AACD,SAAO,mBAAOD,MAAP,EAAe,UAAEL,KAAF;AAAA,WACrBD,uBAAuB,CAAEC,KAAF,EAASC,eAAT,CADF;AAAA,GAAf,CAAP;AAGA;AAED;;;;;;;;;;;AASO,SAASM,eAAT,CAA0BF,MAA1B,EAAoE;AAAA,MAAlCJ,eAAkC,uEAAhBI,MAAM,CAACC,MAAS;AAC1E,SAAOD,MAAM,CAACG,MAAP,CAAe,UAAEC,WAAF,EAAeT,KAAf,EAA0B;AAC/C,QAAMG,KAAK,GAAGJ,uBAAuB,CAAEC,KAAF,EAASC,eAAT,CAArC;AACA,WAAOS,MAAM,CAACC,MAAP,CAAeF,WAAf,oCAAgCT,KAAK,CAACY,QAAtC,EAAkDT,KAAlD,EAAP;AACA,GAHM,EAGJ,EAHI,CAAP;AAIA;AAED;;;;;;;;;;;;;;AAYO,SAASU,4BAAT,CACNR,MADM,EAENS,cAFM,EAIL;AAAA,MADDb,eACC,uEADiBI,MAAM,CAACC,MACxB;AACD,MAAMS,UAAU,GAAGX,oBAAoB,CAAEC,MAAF,EAAUJ,eAAV,CAAvC;AACA,MAAMe,UAAU,GAAGF,cAAc,GAAGC,UAApC;AACA,MAAME,UAAU,GAAGD,UAAU,GAAGX,MAAM,CAACC,MAAvC;AAEA,SAAO,uBAAWC,eAAe,CAAEF,MAAF,EAAUJ,eAAV,CAA1B,EAAuD,UAAEE,KAAF;AAAA,WAC7DX,gBAAgB,CAAEW,KAAK,GAAGc,UAAV,CAD6C;AAAA,GAAvD,CAAP;AAGA;AAED;;;;;;;;;;AAQO,SAASC,uBAAT,CAAkCb,MAAlC,EAA2C;AACjD,SAAOA,MAAM,CAACc,KAAP,CAAc,UAAEnB,KAAF;AAAA,WACpBN,MAAM,CAACC,QAAP,CAAiBK,KAAK,CAACE,UAAN,CAAiBC,KAAlC,CADoB;AAAA,GAAd,CAAP;AAGA;AAED;;;;;;;;;;;AASO,SAASiB,qBAAT,CAAgCf,MAAhC,EAAwCgB,MAAxC,EAAiD;AACvD,SAAOhB,MAAM,CAACiB,GAAP,CAAY,UAAEtB,KAAF;AAAA,WAClB,mBAAO,EAAP,EAAWA,KAAX,EAAkB;AACjBE,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAEkB,MAAM,CAAErB,KAAK,CAACY,QAAR;AADF;AADK,KAAlB,CADkB;AAAA,GAAZ,CAAP;AAOA","sourcesContent":["/**\n * External dependencies\n */\nimport { sumBy, merge, mapValues } from 'lodash';\n\n/**\n * Returns a column width attribute value rounded to standard precision.\n * Returns `undefined` if the value is not a valid finite number.\n *\n * @param {?number} value Raw value.\n *\n * @return {number} Value rounded to standard precision.\n */\nexport const toWidthPrecision = ( value ) =>\n\tNumber.isFinite( value ) ? parseFloat( value.toFixed( 2 ) ) : undefined;\n\n/**\n * Returns an effective width for a given block. An effective width is equal to\n * its attribute value if set, or a computed value assuming equal distribution.\n *\n * @param {WPBlock} block           Block object.\n * @param {number}  totalBlockCount Total number of blocks in Columns.\n *\n * @return {number} Effective column width.\n */\nexport function getEffectiveColumnWidth( block, totalBlockCount ) {\n\tconst { width = 100 / totalBlockCount } = block.attributes;\n\treturn toWidthPrecision( width );\n}\n\n/**\n * Returns the total width occupied by the given set of column blocks.\n *\n * @param {WPBlock[]} blocks          Block objects.\n * @param {?number}   totalBlockCount Total number of blocks in Columns.\n *                                    Defaults to number of blocks passed.\n *\n * @return {number} Total width occupied by blocks.\n */\nexport function getTotalColumnsWidth(\n\tblocks,\n\ttotalBlockCount = blocks.length\n) {\n\treturn sumBy( blocks, ( block ) =>\n\t\tgetEffectiveColumnWidth( block, totalBlockCount )\n\t);\n}\n\n/**\n * Returns an object of `clientId` → `width` of effective column widths.\n *\n * @param {WPBlock[]} blocks          Block objects.\n * @param {?number}   totalBlockCount Total number of blocks in Columns.\n *                                    Defaults to number of blocks passed.\n *\n * @return {Object<string,number>} Column widths.\n */\nexport function getColumnWidths( blocks, totalBlockCount = blocks.length ) {\n\treturn blocks.reduce( ( accumulator, block ) => {\n\t\tconst width = getEffectiveColumnWidth( block, totalBlockCount );\n\t\treturn Object.assign( accumulator, { [ block.clientId ]: width } );\n\t}, {} );\n}\n\n/**\n * Returns an object of `clientId` → `width` of column widths as redistributed\n * proportional to their current widths, constrained or expanded to fit within\n * the given available width.\n *\n * @param {WPBlock[]} blocks          Block objects.\n * @param {number}    availableWidth  Maximum width to fit within.\n * @param {?number}   totalBlockCount Total number of blocks in Columns.\n *                                    Defaults to number of blocks passed.\n *\n * @return {Object<string,number>} Redistributed column widths.\n */\nexport function getRedistributedColumnWidths(\n\tblocks,\n\tavailableWidth,\n\ttotalBlockCount = blocks.length\n) {\n\tconst totalWidth = getTotalColumnsWidth( blocks, totalBlockCount );\n\tconst difference = availableWidth - totalWidth;\n\tconst adjustment = difference / blocks.length;\n\n\treturn mapValues( getColumnWidths( blocks, totalBlockCount ), ( width ) =>\n\t\ttoWidthPrecision( width + adjustment )\n\t);\n}\n\n/**\n * Returns true if column blocks within the provided set are assigned with\n * explicit widths, or false otherwise.\n *\n * @param {WPBlock[]} blocks Block objects.\n *\n * @return {boolean} Whether columns have explicit widths.\n */\nexport function hasExplicitColumnWidths( blocks ) {\n\treturn blocks.every( ( block ) =>\n\t\tNumber.isFinite( block.attributes.width )\n\t);\n}\n\n/**\n * Returns a copy of the given set of blocks with new widths assigned from the\n * provided object of redistributed column widths.\n *\n * @param {WPBlock[]}             blocks Block objects.\n * @param {Object<string,number>} widths Redistributed column widths.\n *\n * @return {WPBlock[]} blocks Mapped block objects.\n */\nexport function getMappedColumnWidths( blocks, widths ) {\n\treturn blocks.map( ( block ) =>\n\t\tmerge( {}, block, {\n\t\t\tattributes: {\n\t\t\t\twidth: widths[ block.clientId ],\n\t\t\t},\n\t\t} )\n\t);\n}\n"]}