{"version":3,"sources":["@wordpress/block-library/src/columns/edit.native.js"],"names":["ALLOWED_BLOCKS","DEFAULT_COLUMNS_NUM","MIN_COLUMNS_NUM","MAX_COLUMNS_NUM_IN_ROW","BREAKPOINTS","mobile","large","ColumnsEditContainer","attributes","updateAlignment","updateColumns","columnCount","isSelected","onAddNextColumn","onDeleteBlock","innerColumns","updateInnerColumnWidth","resizeListener","sizes","columnsInRow","setColumnsInRow","verticalAlignment","width","newColumnCount","getColumnsInRow","contentStyle","minWidth","Math","min","styles","columnsContainer","maxWidth","columnBaseWidth","columnWidth","margins","columnMargin","marginLeft","containerWidth","columnsNumber","max","renderAppender","getColumnsSliders","columnWidths","Object","values","map","column","index","value","clientId","cellContainerStyle","innerBlocksSelected","undefined","ColumnsEditContainerWrapper","dispatch","ownProps","registry","setAttributes","updateBlockAttributes","select","getBlockOrder","innerBlockClientIds","forEach","innerBlockClientId","columnId","updateBlockSettings","settings","updateBlockListSettings","previousColumns","newColumns","replaceInnerBlocks","getBlocks","getBlockAttributes","innerBlocks","isAddingColumn","selectBlock","insertedBlock","removeBlock","ColumnsEdit","props","getBlockCount","getBlock","block","isContentEmpty","innerBlock","length","isDefaultColumns","isVisible","setIsVisible","variations"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { View } from 'react-native';\nimport { dropRight, times, map, compact, delay } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport {\n\tPanelBody,\n\tRangeControl,\n\tFooterMessageControl,\n} from '@wordpress/components';\nimport {\n\tInspectorControls,\n\tInnerBlocks,\n\tBlockControls,\n\tBlockVerticalAlignmentToolbar,\n\tBlockVariationPicker,\n} from '@wordpress/block-editor';\nimport { withDispatch, useSelect } from '@wordpress/data';\nimport { useEffect, useState, useMemo } from '@wordpress/element';\nimport { useResizeObserver } from '@wordpress/compose';\nimport { createBlock } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport variations from './variations';\nimport styles from './editor.scss';\nimport { getColumnWidths } from './utils';\nimport ColumnsPreview from '../column/column-preview';\n\n/**\n * Allowed blocks constant is passed to InnerBlocks precisely as specified here.\n * The contents of the array should never change.\n * The array should contain the name of each block that is allowed.\n * In columns block, the only block we allow is 'core/column'.\n *\n * @constant\n * @type {string[]}\n */\nconst ALLOWED_BLOCKS = [ 'core/column' ];\n\n/**\n * Number of columns to assume for template in case the user opts to skip\n * template option selection.\n *\n * @type {number}\n */\nconst DEFAULT_COLUMNS_NUM = 2;\n\n/**\n * Minimum number of columns in a row\n *\n * @type {number}\n */\nconst MIN_COLUMNS_NUM = 1;\n\n/**\n * Maximum number of columns in a row\n *\n * @type {number}\n */\nconst MAX_COLUMNS_NUM_IN_ROW = 3;\n\nconst BREAKPOINTS = {\n\tmobile: 480,\n\tlarge: 768,\n};\n\nfunction ColumnsEditContainer( {\n\tattributes,\n\tupdateAlignment,\n\tupdateColumns,\n\tcolumnCount,\n\tisSelected,\n\tonAddNextColumn,\n\tonDeleteBlock,\n\tinnerColumns,\n\tupdateInnerColumnWidth,\n} ) {\n\tconst [ resizeListener, sizes ] = useResizeObserver();\n\tconst [ columnsInRow, setColumnsInRow ] = useState( MIN_COLUMNS_NUM );\n\n\tconst { verticalAlignment } = attributes;\n\tconst { width } = sizes || {};\n\n\tconst newColumnCount = columnCount || DEFAULT_COLUMNS_NUM;\n\n\tuseEffect( () => {\n\t\tupdateColumns( columnCount, newColumnCount );\n\t}, [] );\n\n\tuseEffect( () => {\n\t\tif ( width ) {\n\t\t\tsetColumnsInRow( getColumnsInRow( width, newColumnCount ) );\n\t\t}\n\t}, [ columnCount ] );\n\n\tuseEffect( () => {\n\t\tif ( width ) {\n\t\t\tsetColumnsInRow( getColumnsInRow( width, columnCount ) );\n\t\t}\n\t}, [ width ] );\n\n\tconst contentStyle = useMemo( () => {\n\t\tconst minWidth = Math.min( width, styles.columnsContainer.maxWidth );\n\t\tconst columnBaseWidth = minWidth / columnsInRow;\n\n\t\tlet columnWidth = columnBaseWidth;\n\t\tif ( columnsInRow > 1 ) {\n\t\t\tconst margins =\n\t\t\t\tcolumnsInRow *\n\t\t\t\tMath.min( columnsInRow, MAX_COLUMNS_NUM_IN_ROW ) *\n\t\t\t\tstyles.columnMargin.marginLeft;\n\t\t\tcolumnWidth = ( minWidth - margins ) / columnsInRow;\n\t\t}\n\t\treturn { width: columnWidth };\n\t}, [ width, columnsInRow ] );\n\n\tconst getColumnsInRow = ( containerWidth, columnsNumber ) => {\n\t\tif ( containerWidth < BREAKPOINTS.mobile ) {\n\t\t\t// show only 1 Column in row for mobile breakpoint container width\n\t\t\treturn 1;\n\t\t} else if ( containerWidth < BREAKPOINTS.large ) {\n\t\t\t// show the maximum number of columns in a row for large breakpoint container width\n\t\t\treturn Math.min(\n\t\t\t\tMath.max( 1, columnCount ),\n\t\t\t\tMAX_COLUMNS_NUM_IN_ROW\n\t\t\t);\n\t\t}\n\t\t// show all Column in one row\n\t\treturn Math.max( 1, columnsNumber );\n\t};\n\n\tconst renderAppender = () => {\n\t\tif ( isSelected ) {\n\t\t\treturn (\n\t\t\t\t<View style={ columnCount === 0 && { width } }>\n\t\t\t\t\t<InnerBlocks.ButtonBlockAppender\n\t\t\t\t\t\tonAddBlock={ onAddNextColumn }\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t};\n\n\tconst getColumnsSliders = () => {\n\t\tconst columnWidths = Object.values(\n\t\t\tgetColumnWidths( innerColumns, columnCount )\n\t\t);\n\n\t\treturn innerColumns.map( ( column, index ) => {\n\t\t\treturn (\n\t\t\t\t<RangeControl\n\t\t\t\t\tmin={ 1 }\n\t\t\t\t\tmax={ 100 }\n\t\t\t\t\tstep={ 0.1 }\n\t\t\t\t\tvalue={ columnWidths[ index ] }\n\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\tupdateInnerColumnWidth( value, column.clientId )\n\t\t\t\t\t}\n\t\t\t\t\tcellContainerStyle={ styles.cellContainerStyle }\n\t\t\t\t\ttoFixed={ 1 }\n\t\t\t\t\trangePreview={\n\t\t\t\t\t\t<ColumnsPreview\n\t\t\t\t\t\t\tcolumnWidths={ columnWidths }\n\t\t\t\t\t\t\tselectedColumnIndex={ index }\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\tkey={ column.clientId }\n\t\t\t\t\tshouldDisplayTextInput={ false }\n\t\t\t\t/>\n\t\t\t);\n\t\t} );\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Columns Settings' ) }>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tlabel={ __( 'Number of columns' ) }\n\t\t\t\t\t\ticon=\"columns\"\n\t\t\t\t\t\tvalue={ columnCount }\n\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\tupdateColumns( columnCount, value )\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmin={ MIN_COLUMNS_NUM }\n\t\t\t\t\t\tmax={ columnCount + 1 }\n\t\t\t\t\t\ttype=\"stepper\"\n\t\t\t\t\t/>\n\t\t\t\t\t{ getColumnsSliders() }\n\t\t\t\t</PanelBody>\n\t\t\t\t<PanelBody>\n\t\t\t\t\t<FooterMessageControl\n\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t'Note: Column layout may vary between themes and screen sizes'\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<BlockControls>\n\t\t\t\t<BlockVerticalAlignmentToolbar\n\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\tvalue={ verticalAlignment }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<View style={ isSelected && styles.innerBlocksSelected }>\n\t\t\t\t{ resizeListener }\n\t\t\t\t{ width && (\n\t\t\t\t\t<InnerBlocks\n\t\t\t\t\t\trenderAppender={ renderAppender }\n\t\t\t\t\t\torientation={\n\t\t\t\t\t\t\tcolumnsInRow > 1 ? 'horizontal' : undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\thorizontal={ true }\n\t\t\t\t\t\tallowedBlocks={ ALLOWED_BLOCKS }\n\t\t\t\t\t\tcontentResizeMode=\"stretch\"\n\t\t\t\t\t\tonAddBlock={ onAddNextColumn }\n\t\t\t\t\t\tonDeleteBlock={\n\t\t\t\t\t\t\tcolumnCount === 1 ? onDeleteBlock : undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontentStyle={ contentStyle }\n\t\t\t\t\t\tparentWidth={ width }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</View>\n\t\t</>\n\t);\n}\n\nconst ColumnsEditContainerWrapper = withDispatch(\n\t( dispatch, ownProps, registry ) => ( {\n\t\t/**\n\t\t * Update all child Column blocks with a new vertical alignment setting\n\t\t * based on whatever alignment is passed in. This allows change to parent\n\t\t * to overide anything set on a individual column basis.\n\t\t *\n\t\t * @param {string} verticalAlignment the vertical alignment setting\n\t\t */\n\t\tupdateAlignment( verticalAlignment ) {\n\t\t\tconst { clientId, setAttributes } = ownProps;\n\t\t\tconst { updateBlockAttributes } = dispatch( 'core/block-editor' );\n\t\t\tconst { getBlockOrder } = registry.select( 'core/block-editor' );\n\n\t\t\t// Update own alignment.\n\t\t\tsetAttributes( { verticalAlignment } );\n\n\t\t\t// Update all child Column Blocks to match\n\t\t\tconst innerBlockClientIds = getBlockOrder( clientId );\n\t\t\tinnerBlockClientIds.forEach( ( innerBlockClientId ) => {\n\t\t\t\tupdateBlockAttributes( innerBlockClientId, {\n\t\t\t\t\tverticalAlignment,\n\t\t\t\t} );\n\t\t\t} );\n\t\t},\n\t\tupdateInnerColumnWidth( value, columnId ) {\n\t\t\tconst { updateBlockAttributes } = dispatch( 'core/block-editor' );\n\n\t\t\tupdateBlockAttributes( columnId, {\n\t\t\t\twidth: value,\n\t\t\t} );\n\t\t},\n\t\tupdateBlockSettings( settings ) {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { updateBlockListSettings } = dispatch( 'core/block-editor' );\n\t\t\tupdateBlockListSettings( clientId, settings );\n\t\t},\n\t\t/**\n\t\t * Updates the column columnCount, including necessary revisions to child Column\n\t\t * blocks to grant required or redistribute available space.\n\t\t *\n\t\t * @param {number} previousColumns Previous column columnCount.\n\t\t * @param {number} newColumns      New column columnCount.\n\t\t */\n\t\tupdateColumns( previousColumns, newColumns ) {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { replaceInnerBlocks } = dispatch( 'core/block-editor' );\n\t\t\tconst { getBlocks, getBlockAttributes } = registry.select(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\n\t\t\tlet innerBlocks = getBlocks( clientId );\n\n\t\t\t// Redistribute available width for existing inner blocks.\n\t\t\tconst isAddingColumn = newColumns > previousColumns;\n\n\t\t\tif ( isAddingColumn ) {\n\t\t\t\t// Get verticalAlignment from Columns block to set the same to new Column\n\t\t\t\tconst { verticalAlignment } =\n\t\t\t\t\tgetBlockAttributes( clientId ) || {};\n\n\t\t\t\tinnerBlocks = [\n\t\t\t\t\t...innerBlocks,\n\t\t\t\t\t...times( newColumns - previousColumns, () => {\n\t\t\t\t\t\treturn createBlock( 'core/column', {\n\t\t\t\t\t\t\tverticalAlignment,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} ),\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\t// The removed column will be the last of the inner blocks.\n\t\t\t\tinnerBlocks = dropRight(\n\t\t\t\t\tinnerBlocks,\n\t\t\t\t\tpreviousColumns - newColumns\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treplaceInnerBlocks( clientId, innerBlocks, false );\n\t\t},\n\t\tonAddNextColumn: () => {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { replaceInnerBlocks, selectBlock } = dispatch(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\t\t\tconst { getBlocks, getBlockAttributes } = registry.select(\n\t\t\t\t'core/block-editor'\n\t\t\t);\n\n\t\t\t// Get verticalAlignment from Columns block to set the same to new Column\n\t\t\tconst { verticalAlignment } = getBlockAttributes( clientId );\n\n\t\t\tconst innerBlocks = getBlocks( clientId );\n\n\t\t\tconst insertedBlock = createBlock( 'core/column', {\n\t\t\t\tverticalAlignment,\n\t\t\t} );\n\n\t\t\treplaceInnerBlocks(\n\t\t\t\tclientId,\n\t\t\t\t[ ...innerBlocks, insertedBlock ],\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tselectBlock( insertedBlock.clientId );\n\t\t},\n\t\tonDeleteBlock: () => {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { removeBlock } = dispatch( 'core/block-editor' );\n\t\t\tremoveBlock( clientId );\n\t\t},\n\t} )\n)( ColumnsEditContainer );\n\nconst ColumnsEdit = ( props ) => {\n\tconst { clientId, isSelected } = props;\n\tconst { columnCount, isDefaultColumns, innerColumns = [] } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockCount, getBlock } = select( 'core/block-editor' );\n\t\t\tconst block = getBlock( clientId );\n\t\t\tconst innerBlocks = block?.innerBlocks;\n\t\t\tconst isContentEmpty = map(\n\t\t\t\tinnerBlocks,\n\t\t\t\t( innerBlock ) => innerBlock.innerBlocks.length\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tcolumnCount: getBlockCount( clientId ),\n\t\t\t\tisDefaultColumns: ! compact( isContentEmpty ).length,\n\t\t\t\tinnerColumns: innerBlocks,\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst [ isVisible, setIsVisible ] = useState( false );\n\n\tuseEffect( () => {\n\t\tif ( isSelected && isDefaultColumns ) {\n\t\t\tdelay( () => setIsVisible( true ), 100 );\n\t\t}\n\t}, [] );\n\n\treturn (\n\t\t<>\n\t\t\t<ColumnsEditContainerWrapper\n\t\t\t\tcolumnCount={ columnCount }\n\t\t\t\tinnerColumns={ innerColumns }\n\t\t\t\t{ ...props }\n\t\t\t/>\n\t\t\t<BlockVariationPicker\n\t\t\t\tvariations={ variations }\n\t\t\t\tonClose={ () => setIsVisible( false ) }\n\t\t\t\tclientId={ clientId }\n\t\t\t\tisVisible={ isVisible }\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default ColumnsEdit;\n"]}