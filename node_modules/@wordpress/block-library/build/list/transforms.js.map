{"version":3,"sources":["@wordpress/block-library/src/list/transforms.js"],"names":["getListContentSchema","phrasingContentSchema","listContentSchema","ul","ol","attributes","forEach","tag","children","li","transforms","from","type","isMultiBlock","blocks","transform","blockAttributes","values","value","map","content","html","length","__UNSTABLE_LINE_SEPARATOR","multilineTag","anchor","selector","schema","args","node","ordered","nodeName","id","undefined","getAttribute","reversed","start","parseInt","isNaN","outerHTML","prefix","to","multilineWrapperTags","piece"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createBlock, getBlockAttributes } from '@wordpress/blocks';\nimport {\n\t__UNSTABLE_LINE_SEPARATOR,\n\tcreate,\n\tjoin,\n\treplace,\n\tsplit,\n\ttoHTMLString,\n} from '@wordpress/rich-text';\n\nfunction getListContentSchema( { phrasingContentSchema } ) {\n\tconst listContentSchema = {\n\t\t...phrasingContentSchema,\n\t\tul: {},\n\t\tol: { attributes: [ 'type', 'start', 'reversed' ] },\n\t};\n\n\t// Recursion is needed.\n\t// Possible: ul > li > ul.\n\t// Impossible: ul > ul.\n\t[ 'ul', 'ol' ].forEach( ( tag ) => {\n\t\tlistContentSchema[ tag ].children = {\n\t\t\tli: {\n\t\t\t\tchildren: listContentSchema,\n\t\t\t},\n\t\t};\n\t} );\n\n\treturn listContentSchema;\n}\n\nconst transforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tisMultiBlock: true,\n\t\t\tblocks: [ 'core/paragraph', 'core/heading' ],\n\t\t\ttransform: ( blockAttributes ) => {\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\tvalues: toHTMLString( {\n\t\t\t\t\t\tvalue: join(\n\t\t\t\t\t\t\tblockAttributes.map( ( { content } ) => {\n\t\t\t\t\t\t\t\tconst value = create( { html: content } );\n\n\t\t\t\t\t\t\t\tif ( blockAttributes.length > 1 ) {\n\t\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// When converting only one block, transform\n\t\t\t\t\t\t\t\t// every line to a list item.\n\t\t\t\t\t\t\t\treturn replace(\n\t\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t\t/\\n/g,\n\t\t\t\t\t\t\t\t\t__UNSTABLE_LINE_SEPARATOR\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} ),\n\t\t\t\t\t\t\t__UNSTABLE_LINE_SEPARATOR\n\t\t\t\t\t\t),\n\t\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\t} ),\n\t\t\t\t\tanchor: blockAttributes.anchor,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/quote', 'core/pullquote' ],\n\t\t\ttransform: ( { value, anchor } ) => {\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\tvalues: toHTMLString( {\n\t\t\t\t\t\tvalue: create( { html: value, multilineTag: 'p' } ),\n\t\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\t} ),\n\t\t\t\t\tanchor,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'raw',\n\t\t\tselector: 'ol,ul',\n\t\t\tschema: ( args ) => ( {\n\t\t\t\tol: getListContentSchema( args ).ol,\n\t\t\t\tul: getListContentSchema( args ).ul,\n\t\t\t} ),\n\t\t\ttransform( node ) {\n\t\t\t\tconst attributes = {\n\t\t\t\t\tordered: node.nodeName === 'OL',\n\t\t\t\t\tanchor: node.id === '' ? undefined : node.id,\n\t\t\t\t};\n\n\t\t\t\tif ( attributes.ordered ) {\n\t\t\t\t\tconst type = node.getAttribute( 'type' );\n\n\t\t\t\t\tif ( type ) {\n\t\t\t\t\t\tattributes.type = type;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( node.getAttribute( 'reversed' ) !== null ) {\n\t\t\t\t\t\tattributes.reversed = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst start = parseInt( node.getAttribute( 'start' ), 10 );\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t! isNaN( start ) &&\n\t\t\t\t\t\t// start=1 only makes sense if the list is reversed.\n\t\t\t\t\t\t( start !== 1 || attributes.reversed )\n\t\t\t\t\t) {\n\t\t\t\t\t\tattributes.start = start;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\t...getBlockAttributes( 'core/list', node.outerHTML ),\n\t\t\t\t\t...attributes,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t...[ '*', '-' ].map( ( prefix ) => ( {\n\t\t\ttype: 'prefix',\n\t\t\tprefix,\n\t\t\ttransform( content ) {\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\tvalues: `<li>${ content }</li>`,\n\t\t\t\t} );\n\t\t\t},\n\t\t} ) ),\n\t\t...[ '1.', '1)' ].map( ( prefix ) => ( {\n\t\t\ttype: 'prefix',\n\t\t\tprefix,\n\t\t\ttransform( content ) {\n\t\t\t\treturn createBlock( 'core/list', {\n\t\t\t\t\tordered: true,\n\t\t\t\t\tvalues: `<li>${ content }</li>`,\n\t\t\t\t} );\n\t\t\t},\n\t\t} ) ),\n\t],\n\tto: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/paragraph' ],\n\t\t\ttransform: ( { values } ) =>\n\t\t\t\tsplit(\n\t\t\t\t\tcreate( {\n\t\t\t\t\t\thtml: values,\n\t\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\t\tmultilineWrapperTags: [ 'ul', 'ol' ],\n\t\t\t\t\t} ),\n\t\t\t\t\t__UNSTABLE_LINE_SEPARATOR\n\t\t\t\t).map( ( piece ) =>\n\t\t\t\t\tcreateBlock( 'core/paragraph', {\n\t\t\t\t\t\tcontent: toHTMLString( { value: piece } ),\n\t\t\t\t\t} )\n\t\t\t\t),\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/heading' ],\n\t\t\ttransform: ( { values } ) =>\n\t\t\t\tsplit(\n\t\t\t\t\tcreate( {\n\t\t\t\t\t\thtml: values,\n\t\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\t\tmultilineWrapperTags: [ 'ul', 'ol' ],\n\t\t\t\t\t} ),\n\t\t\t\t\t__UNSTABLE_LINE_SEPARATOR\n\t\t\t\t).map( ( piece ) =>\n\t\t\t\t\tcreateBlock( 'core/heading', {\n\t\t\t\t\t\tcontent: toHTMLString( { value: piece } ),\n\t\t\t\t\t} )\n\t\t\t\t),\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/quote' ],\n\t\t\ttransform: ( { values, anchor } ) => {\n\t\t\t\treturn createBlock( 'core/quote', {\n\t\t\t\t\tvalue: toHTMLString( {\n\t\t\t\t\t\tvalue: create( {\n\t\t\t\t\t\t\thtml: values,\n\t\t\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\t\t\tmultilineWrapperTags: [ 'ul', 'ol' ],\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\tmultilineTag: 'p',\n\t\t\t\t\t} ),\n\t\t\t\t\tanchor,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/pullquote' ],\n\t\t\ttransform: ( { values, anchor } ) => {\n\t\t\t\treturn createBlock( 'core/pullquote', {\n\t\t\t\t\tvalue: toHTMLString( {\n\t\t\t\t\t\tvalue: create( {\n\t\t\t\t\t\t\thtml: values,\n\t\t\t\t\t\t\tmultilineTag: 'li',\n\t\t\t\t\t\t\tmultilineWrapperTags: [ 'ul', 'ol' ],\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\tmultilineTag: 'p',\n\t\t\t\t\t} ),\n\t\t\t\t\tanchor,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t],\n};\n\nexport default transforms;\n"]}