{"version":3,"sources":["@wordpress/block-library/src/embed/util.js"],"names":["DEFAULT_EMBED_BLOCK","metadata","name","getEmbedInfoByProvider","provider","find","matchesPatterns","url","patterns","some","pattern","match","findMoreSuitableBlock","isFromWordPress","html","includes","getPhotoHtml","photo","imageUrl","thumbnail_url","photoPreview","title","createUpgradedEmbedBlock","props","attributesFromPreview","preview","attributes","providerNameSlug","type","matchedBlock","isCurrentBlockWP","WP_EMBED_TYPE","shouldCreateNewBlock","wpVariation","getClassNames","existingClassNames","allowResponsive","aspectRatioClassNames","ASPECT_RATIOS","forEach","className","previewDocument","document","implementation","createHTMLDocument","body","innerHTML","iframe","querySelector","height","width","aspectRatio","toFixed","ratioIndex","length","potentialRatio","ratio","fallback","onReplace","link","content","getAttributesFromPreview","currentClassNames","isResponsive","providerName","provider_name","toLowerCase"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\nimport { ASPECT_RATIOS, WP_EMBED_TYPE } from './constants';\n\n/**\n * External dependencies\n */\nimport { kebabCase } from 'lodash';\nimport classnames from 'classnames/dedupe';\nimport memoize from 'memize';\n\n/**\n * WordPress dependencies\n */\nimport { renderToString } from '@wordpress/element';\nimport {\n\tcreateBlock,\n\tgetBlockType,\n\tgetBlockVariations,\n} from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport metadata from './block.json';\n\nconst { name: DEFAULT_EMBED_BLOCK } = metadata;\n\n/** @typedef {import('@wordpress/blocks').WPBlockVariation} WPBlockVariation */\n\n/**\n * Returns the embed block's information by matching the provided service provider\n *\n * @param {string} provider The embed block's provider\n * @return {WPBlockVariation} The embed block's information\n */\nexport const getEmbedInfoByProvider = ( provider ) =>\n\tgetBlockVariations( DEFAULT_EMBED_BLOCK )?.find(\n\t\t( { name } ) => name === provider\n\t);\n\n/**\n * Returns true if any of the regular expressions match the URL.\n *\n * @param {string}   url      The URL to test.\n * @param {Array}    patterns The list of regular expressions to test agains.\n * @return {boolean} True if any of the regular expressions match the URL.\n */\nexport const matchesPatterns = ( url, patterns = [] ) =>\n\tpatterns.some( ( pattern ) => url.match( pattern ) );\n\n/**\n * Finds the block variation that should be used for the URL,\n * based on the provided URL and the variation's patterns.\n *\n * @param {string}  url The URL to test.\n * @return {WPBlockVariation} The block variation that should be used for this URL\n */\nexport const findMoreSuitableBlock = ( url ) =>\n\tgetBlockVariations( DEFAULT_EMBED_BLOCK )?.find( ( { patterns } ) =>\n\t\tmatchesPatterns( url, patterns )\n\t);\n\nexport const isFromWordPress = ( html ) =>\n\thtml && html.includes( 'class=\"wp-embedded-content\"' );\n\nexport const getPhotoHtml = ( photo ) => {\n\t// 100% width for the preview so it fits nicely into the document, some \"thumbnails\" are\n\t// actually the full size photo. If thumbnails not found, use full image.\n\tconst imageUrl = photo.thumbnail_url || photo.url;\n\tconst photoPreview = (\n\t\t<p>\n\t\t\t<img src={ imageUrl } alt={ photo.title } width=\"100%\" />\n\t\t</p>\n\t);\n\treturn renderToString( photoPreview );\n};\n\n/**\n * Creates a more suitable embed block based on the passed in props\n * and attributes generated from an embed block's preview.\n *\n * We require `attributesFromPreview` to be generated from the latest attributes\n * and preview, and because of the way the react lifecycle operates, we can't\n * guarantee that the attributes contained in the block's props are the latest\n * versions, so we require that these are generated separately.\n * See `getAttributesFromPreview` in the generated embed edit component.\n *\n * @param {Object} props                  The block's props.\n * @param {Object} [attributesFromPreview]  Attributes generated from the block's most up to date preview.\n * @return {Object|undefined} A more suitable embed block if one exists.\n */\nexport const createUpgradedEmbedBlock = (\n\tprops,\n\tattributesFromPreview = {}\n) => {\n\tconst { preview, attributes: { url, providerNameSlug, type } = {} } = props;\n\n\tif ( ! url || ! getBlockType( DEFAULT_EMBED_BLOCK ) ) return;\n\n\tconst matchedBlock = findMoreSuitableBlock( url );\n\n\t// WordPress blocks can work on multiple sites, and so don't have patterns,\n\t// so if we're in a WordPress block, assume the user has chosen it for a WordPress URL.\n\tconst isCurrentBlockWP =\n\t\tproviderNameSlug === 'wordpress' || type === WP_EMBED_TYPE;\n\t// if current block is not WordPress and a more suitable block found\n\t// that is different from the current one, create the new matched block\n\tconst shouldCreateNewBlock =\n\t\t! isCurrentBlockWP &&\n\t\tmatchedBlock &&\n\t\t( matchedBlock.attributes.providerNameSlug !== providerNameSlug ||\n\t\t\t! providerNameSlug );\n\tif ( shouldCreateNewBlock ) {\n\t\treturn createBlock( DEFAULT_EMBED_BLOCK, {\n\t\t\turl,\n\t\t\t...matchedBlock.attributes,\n\t\t} );\n\t}\n\n\tconst wpVariation = getBlockVariations( DEFAULT_EMBED_BLOCK )?.find(\n\t\t( { name } ) => name === 'wordpress'\n\t);\n\n\t// We can't match the URL for WordPress embeds, we have to check the HTML instead.\n\tif (\n\t\t! wpVariation ||\n\t\t! preview ||\n\t\t! isFromWordPress( preview.html ) ||\n\t\tisCurrentBlockWP\n\t) {\n\t\treturn;\n\t}\n\n\t// This is not the WordPress embed block so transform it into one.\n\treturn createBlock( DEFAULT_EMBED_BLOCK, {\n\t\turl,\n\t\t...wpVariation.attributes,\n\t\t// By now we have the preview, but when the new block first renders, it\n\t\t// won't have had all the attributes set, and so won't get the correct\n\t\t// type and it won't render correctly. So, we pass through the current attributes\n\t\t// here so that the initial render works when we switch to the WordPress\n\t\t// block. This only affects the WordPress block because it can't be\n\t\t// rendered in the usual Sandbox (it has a sandbox of its own) and it\n\t\t// relies on the preview to set the correct render type.\n\t\t...attributesFromPreview,\n\t} );\n};\n\n/**\n * Returns class names with any relevant responsive aspect ratio names.\n *\n * @param {string}  html               The preview HTML that possibly contains an iframe with width and height set.\n * @param {string}  existingClassNames Any existing class names.\n * @param {boolean} allowResponsive    If the responsive class names should be added, or removed.\n * @return {string} Deduped class names.\n */\nexport function getClassNames(\n\thtml,\n\texistingClassNames = '',\n\tallowResponsive = true\n) {\n\tif ( ! allowResponsive ) {\n\t\t// Remove all of the aspect ratio related class names.\n\t\tconst aspectRatioClassNames = {\n\t\t\t'wp-has-aspect-ratio': false,\n\t\t};\n\t\tASPECT_RATIOS.forEach( ( { className } ) => {\n\t\t\taspectRatioClassNames[ className ] = false;\n\t\t} );\n\t\treturn classnames( existingClassNames, aspectRatioClassNames );\n\t}\n\n\tconst previewDocument = document.implementation.createHTMLDocument( '' );\n\tpreviewDocument.body.innerHTML = html;\n\tconst iframe = previewDocument.body.querySelector( 'iframe' );\n\n\t// If we have a fixed aspect iframe, and it's a responsive embed block.\n\tif ( iframe && iframe.height && iframe.width ) {\n\t\tconst aspectRatio = ( iframe.width / iframe.height ).toFixed( 2 );\n\t\t// Given the actual aspect ratio, find the widest ratio to support it.\n\t\tfor (\n\t\t\tlet ratioIndex = 0;\n\t\t\tratioIndex < ASPECT_RATIOS.length;\n\t\t\tratioIndex++\n\t\t) {\n\t\t\tconst potentialRatio = ASPECT_RATIOS[ ratioIndex ];\n\t\t\tif ( aspectRatio >= potentialRatio.ratio ) {\n\t\t\t\treturn classnames(\n\t\t\t\t\texistingClassNames,\n\t\t\t\t\tpotentialRatio.className,\n\t\t\t\t\t'wp-has-aspect-ratio'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn existingClassNames;\n}\n\n/**\n * Fallback behaviour for unembeddable URLs.\n * Creates a paragraph block containing a link to the URL, and calls `onReplace`.\n *\n * @param {string}   url       The URL that could not be embedded.\n * @param {Function} onReplace Function to call with the created fallback block.\n */\nexport function fallback( url, onReplace ) {\n\tconst link = <a href={ url }>{ url }</a>;\n\tonReplace(\n\t\tcreateBlock( 'core/paragraph', { content: renderToString( link ) } )\n\t);\n}\n\n/***\n * Gets block attributes based on the preview and responsive state.\n *\n * @param {Object} preview The preview data.\n * @param {string} title The block's title, e.g. Twitter.\n * @param {Object} currentClassNames The block's current class names.\n * @param {boolean} isResponsive Boolean indicating if the block supports responsive content.\n * @param {boolean} allowResponsive Apply responsive classes to fixed size content.\n * @return {Object} Attributes and values.\n */\nexport const getAttributesFromPreview = memoize(\n\t(\n\t\tpreview,\n\t\ttitle,\n\t\tcurrentClassNames,\n\t\tisResponsive,\n\t\tallowResponsive = true\n\t) => {\n\t\tif ( ! preview ) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst attributes = {};\n\t\t// Some plugins only return HTML with no type info, so default this to 'rich'.\n\t\tlet { type = 'rich' } = preview;\n\t\t// If we got a provider name from the API, use it for the slug, otherwise we use the title,\n\t\t// because not all embed code gives us a provider name.\n\t\tconst { html, provider_name: providerName } = preview;\n\t\tconst providerNameSlug = kebabCase(\n\t\t\t( providerName || title ).toLowerCase()\n\t\t);\n\n\t\tif ( isFromWordPress( html ) ) {\n\t\t\ttype = WP_EMBED_TYPE;\n\t\t}\n\n\t\tif ( html || 'photo' === type ) {\n\t\t\tattributes.type = type;\n\t\t\tattributes.providerNameSlug = providerNameSlug;\n\t\t}\n\n\t\tattributes.className = getClassNames(\n\t\t\thtml,\n\t\t\tcurrentClassNames,\n\t\t\tisResponsive && allowResponsive\n\t\t);\n\n\t\treturn attributes;\n\t}\n);\n"]}