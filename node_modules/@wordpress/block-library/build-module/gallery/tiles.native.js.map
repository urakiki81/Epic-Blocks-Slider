{"version":3,"sources":["@wordpress/block-library/src/gallery/tiles.native.js"],"names":["View","StyleSheet","Children","styles","Tiles","props","columns","children","spacing","style","compose","tileCount","count","lastTile","lastRow","Math","floor","wrappedChildren","map","child","index","row","rowLength","indexInRow","tileStyle","width","paddingLeft","paddingRight","paddingTop","paddingBottom","containerStyle"],"mappings":";;AAAA;;;AAGA,SAASA,IAAT,EAAeC,UAAf,QAAiC,cAAjC;AAEA;;;;AAGA,SAASC,QAAT,QAAyB,oBAAzB;AAEA;;;;AAGA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,SAASC,KAAT,CAAgBC,KAAhB,EAAwB;AAAA,MACfC,OADe,GAC4BD,KAD5B,CACfC,OADe;AAAA,MACNC,QADM,GAC4BF,KAD5B,CACNE,QADM;AAAA,uBAC4BF,KAD5B,CACIG,OADJ;AAAA,MACIA,OADJ,+BACc,EADd;AAAA,MACkBC,KADlB,GAC4BJ,KAD5B,CACkBI,KADlB;AAAA,MAGfC,OAHe,GAGHT,UAHG,CAGfS,OAHe;AAKvB,MAAMC,SAAS,GAAGT,QAAQ,CAACU,KAAT,CAAgBL,QAAhB,CAAlB;AACA,MAAMM,QAAQ,GAAGF,SAAS,GAAG,CAA7B;AACA,MAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYH,QAAQ,GAAGP,OAAvB,CAAhB;AAEA,MAAMW,eAAe,GAAGf,QAAQ,CAACgB,GAAT,CAAcX,QAAd,EAAwB,UAAEY,KAAF,EAASC,KAAT,EAAoB;AACnE;;;;;;;;;;;;;;;;;;;;;;AAuBA,QAAMC,GAAG,GAAGN,IAAI,CAACC,KAAL,CAAYI,KAAK,GAAGd,OAApB,CAAZ;AACA,QAAMgB,SAAS,GACdD,GAAG,KAAKP,OAAR,GAAoBD,QAAQ,GAAGP,OAAb,GAAyB,CAA3C,GAA+CA,OADhD;AAEA,QAAMiB,UAAU,GAAGH,KAAK,GAAGd,OAA3B;AAEA,WACC,cAAC,IAAD;AACC,MAAA,KAAK,EAAG,CACPH,MAAM,CAACqB,SADA,EAEP;AACCC,QAAAA,KAAK,YAAM,MAAMH,SAAZ,MADN;AAECI,QAAAA,WAAW,EAAElB,OAAO,IAAKe,UAAU,GAAGD,SAAlB,CAFrB;AAGCK,QAAAA,YAAY,EACXnB,OAAO,IAAK,IAAI,CAAEe,UAAU,GAAG,CAAf,IAAqBD,SAA9B,CAJT;AAKCM,QAAAA,UAAU,EAAEP,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgBb,OAAO,GAAG,CALvC;AAMCqB,QAAAA,aAAa,EAAER,GAAG,KAAKP,OAAR,GAAkB,CAAlB,GAAsBN,OAAO,GAAG;AANhD,OAFO;AADT,OAaGW,KAbH,CADD;AAiBA,GA9CuB,CAAxB;AAgDA,MAAMW,cAAc,GAAGpB,OAAO,CAAEP,MAAM,CAAC2B,cAAT,EAAyBrB,KAAzB,CAA9B;AAEA,SAAO,cAAC,IAAD;AAAM,IAAA,KAAK,EAAGqB;AAAd,KAAiCb,eAAjC,CAAP;AACA;;AAED,eAAeb,KAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { View, StyleSheet } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { Children } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport styles from './tiles-styles.scss';\n\nfunction Tiles( props ) {\n\tconst { columns, children, spacing = 10, style } = props;\n\n\tconst { compose } = StyleSheet;\n\n\tconst tileCount = Children.count( children );\n\tconst lastTile = tileCount - 1;\n\tconst lastRow = Math.floor( lastTile / columns );\n\n\tconst wrappedChildren = Children.map( children, ( child, index ) => {\n\t\t/** Since we don't have `calc()`, we must calculate our spacings here in\n\t\t * order to preserve even spacing between tiles and equal width for tiles\n\t\t * in a given row.\n\t\t *\n\t\t * In order to ensure equal sizing of tile contents, we distribute the\n\t\t * spacing such that each tile has an equal \"share\" of the fixed spacing. To\n\t\t * keep the tiles properly aligned within their rows, we calculate the left\n\t\t * and right paddings based on the tile's relative position within the row.\n\t\t *\n\t\t * Note: we use padding instead of margins so that the fixed spacing is\n\t\t * included within the relative spacing (i.e. width percentage), and\n\t\t * wrapping behavior is preserved.\n\t\t *\n\t\t *  - The left most tile in a row must have left padding of zero.\n\t\t *  - The right most tile in a row must have a right padding of zero.\n\t\t *\n\t\t * The values of these left and right paddings are interpolated for tiles in\n\t\t * between. The right padding is complementary with the left padding of the\n\t\t * next tile (i.e. the right padding of [tile n] + the left padding of\n\t\t * [tile n + 1] will be equal for all tiles except the last one in a given\n\t\t * row).\n\t\t */\n\n\t\tconst row = Math.floor( index / columns );\n\t\tconst rowLength =\n\t\t\trow === lastRow ? ( lastTile % columns ) + 1 : columns;\n\t\tconst indexInRow = index % columns;\n\n\t\treturn (\n\t\t\t<View\n\t\t\t\tstyle={ [\n\t\t\t\t\tstyles.tileStyle,\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: `${ 100 / rowLength }%`,\n\t\t\t\t\t\tpaddingLeft: spacing * ( indexInRow / rowLength ),\n\t\t\t\t\t\tpaddingRight:\n\t\t\t\t\t\t\tspacing * ( 1 - ( indexInRow + 1 ) / rowLength ),\n\t\t\t\t\t\tpaddingTop: row === 0 ? 0 : spacing / 2,\n\t\t\t\t\t\tpaddingBottom: row === lastRow ? 0 : spacing / 2,\n\t\t\t\t\t},\n\t\t\t\t] }\n\t\t\t>\n\t\t\t\t{ child }\n\t\t\t</View>\n\t\t);\n\t} );\n\n\tconst containerStyle = compose( styles.containerStyle, style );\n\n\treturn <View style={ containerStyle }>{ wrappedChildren }</View>;\n}\n\nexport default Tiles;\n"]}