{"version":3,"sources":["@wordpress/block-library/src/post-comments-count/edit.js"],"names":["classnames","AlignmentToolbar","BlockControls","Warning","__experimentalBlock","Block","useState","useEffect","apiFetch","addQueryArgs","__","PostCommentsCountEdit","attributes","context","setAttributes","textAlign","postId","commentsCount","setCommentsCount","currentPostId","path","post","parse","then","res","headers","get","nextAlign","undefined"],"mappings":";;;;AAAA;;;AAGA,OAAOA,UAAP,MAAuB,YAAvB;AAEA;;;;AAGA,SACCC,gBADD,EAECC,aAFD,EAGCC,OAHD,EAICC,mBAAmB,IAAIC,KAJxB,QAKO,yBALP;AAMA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,EAAT,QAAmB,iBAAnB;AAEA,eAAe,SAASC,qBAAT,OAIX;AAAA,MAHHC,UAGG,QAHHA,UAGG;AAAA,MAFHC,OAEG,QAFHA,OAEG;AAAA,MADHC,aACG,QADHA,aACG;AAAA,MACKC,SADL,GACmBH,UADnB,CACKG,SADL;AAAA,MAEKC,MAFL,GAEgBH,OAFhB,CAEKG,MAFL;;AAAA,kBAGyCV,QAAQ,EAHjD;AAAA;AAAA,MAGKW,aAHL;AAAA,MAGoBC,gBAHpB;;AAIHX,EAAAA,SAAS,CAAE,YAAM;AAChB,QAAK,CAAES,MAAP,EAAgB;AACf;AACA;;AACD,QAAMG,aAAa,GAAGH,MAAtB;AACAR,IAAAA,QAAQ,CAAE;AACTY,MAAAA,IAAI,EAAEX,YAAY,CAAE,iBAAF,EAAqB;AACtCY,QAAAA,IAAI,EAAEL;AADgC,OAArB,CADT;AAITM,MAAAA,KAAK,EAAE;AAJE,KAAF,CAAR,CAKIC,IALJ,CAKU,UAAEC,GAAF,EAAW;AACpB;AACA,UAAKL,aAAa,KAAKH,MAAvB,EAAgC;AAC/BE,QAAAA,gBAAgB,CAAEM,GAAG,CAACC,OAAJ,CAAYC,GAAZ,CAAiB,YAAjB,CAAF,CAAhB;AACA;AACD,KAVD;AAWA,GAhBQ,EAgBN,CAAEV,MAAF,CAhBM,CAAT;AAkBA,SACC,8BACC,cAAC,aAAD,QACC,cAAC,gBAAD;AACC,IAAA,KAAK,EAAGD,SADT;AAEC,IAAA,QAAQ,EAAG,kBAAEY,SAAF,EAAiB;AAC3Bb,MAAAA,aAAa,CAAE;AAAEC,QAAAA,SAAS,EAAEY;AAAb,OAAF,CAAb;AACA;AAJF,IADD,CADD,EASC,cAAC,KAAD,CAAO,GAAP;AACC,IAAA,SAAS,EAAG3B,UAAU,8CACAe,SADA,GACgBA,SADhB;AADvB,KAKGC,MAAM,IAAIC,aAAa,KAAKW,SAA5B,GACDX,aADC,GAGD,cAAC,OAAD,QACGP,EAAE,CAAE,4CAAF,CADL,CARF,CATD,CADD;AAyBA","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tAlignmentToolbar,\n\tBlockControls,\n\tWarning,\n\t__experimentalBlock as Block,\n} from '@wordpress/block-editor';\nimport { useState, useEffect } from '@wordpress/element';\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport { __ } from '@wordpress/i18n';\n\nexport default function PostCommentsCountEdit( {\n\tattributes,\n\tcontext,\n\tsetAttributes,\n} ) {\n\tconst { textAlign } = attributes;\n\tconst { postId } = context;\n\tconst [ commentsCount, setCommentsCount ] = useState();\n\tuseEffect( () => {\n\t\tif ( ! postId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst currentPostId = postId;\n\t\tapiFetch( {\n\t\t\tpath: addQueryArgs( '/wp/v2/comments', {\n\t\t\t\tpost: postId,\n\t\t\t} ),\n\t\t\tparse: false,\n\t\t} ).then( ( res ) => {\n\t\t\t// Stale requests will have the `currentPostId` of an older closure.\n\t\t\tif ( currentPostId === postId ) {\n\t\t\t\tsetCommentsCount( res.headers.get( 'X-WP-Total' ) );\n\t\t\t}\n\t\t} );\n\t}, [ postId ] );\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls>\n\t\t\t\t<AlignmentToolbar\n\t\t\t\t\tvalue={ textAlign }\n\t\t\t\t\tonChange={ ( nextAlign ) => {\n\t\t\t\t\t\tsetAttributes( { textAlign: nextAlign } );\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<Block.div\n\t\t\t\tclassName={ classnames( {\n\t\t\t\t\t[ `has-text-align-${ textAlign }` ]: textAlign,\n\t\t\t\t} ) }\n\t\t\t>\n\t\t\t\t{ postId && commentsCount !== undefined ? (\n\t\t\t\t\tcommentsCount\n\t\t\t\t) : (\n\t\t\t\t\t<Warning>\n\t\t\t\t\t\t{ __( 'Post Comments Count block: post not found.' ) }\n\t\t\t\t\t</Warning>\n\t\t\t\t) }\n\t\t\t</Block.div>\n\t\t</>\n\t);\n}\n"]}