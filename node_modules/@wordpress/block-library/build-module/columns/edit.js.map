{"version":3,"sources":["@wordpress/block-library/src/columns/edit.js"],"names":["classnames","dropRight","get","map","times","__","PanelBody","RangeControl","Notice","InspectorControls","InnerBlocks","BlockControls","BlockVerticalAlignmentToolbar","__experimentalBlockVariationPicker","__experimentalBlock","Block","withDispatch","useDispatch","useSelect","createBlock","hasExplicitColumnWidths","getMappedColumnWidths","getRedistributedColumnWidths","toWidthPrecision","ALLOWED_BLOCKS","ColumnsEditContainer","attributes","updateAlignment","updateColumns","clientId","verticalAlignment","select","count","getBlockCount","classes","value","Math","max","div","className","ColumnsEditContainerWrapper","dispatch","ownProps","registry","setAttributes","updateBlockAttributes","getBlockOrder","innerBlockClientIds","forEach","innerBlockClientId","previousColumns","newColumns","replaceInnerBlocks","getBlocks","innerBlocks","hasExplicitWidths","isAddingColumn","newColumnWidth","widths","width","createBlocksFromInnerBlocksTemplate","innerBlocksTemplate","name","ColumnsEdit","props","getBlockVariations","getBlockType","getDefaultBlockVariation","blockType","defaultVariation","hasInnerBlocks","length","variations","nextVariation"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { dropRight, get, map, times } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { PanelBody, RangeControl, Notice } from '@wordpress/components';\n\nimport {\n\tInspectorControls,\n\tInnerBlocks,\n\tBlockControls,\n\tBlockVerticalAlignmentToolbar,\n\t__experimentalBlockVariationPicker,\n\t__experimentalBlock as Block,\n} from '@wordpress/block-editor';\nimport { withDispatch, useDispatch, useSelect } from '@wordpress/data';\nimport { createBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport {\n\thasExplicitColumnWidths,\n\tgetMappedColumnWidths,\n\tgetRedistributedColumnWidths,\n\ttoWidthPrecision,\n} from './utils';\n\n/**\n * Allowed blocks constant is passed to InnerBlocks precisely as specified here.\n * The contents of the array should never change.\n * The array should contain the name of each block that is allowed.\n * In columns block, the only block we allow is 'core/column'.\n *\n * @constant\n * @type {string[]}\n */\nconst ALLOWED_BLOCKS = [ 'core/column' ];\n\nfunction ColumnsEditContainer( {\n\tattributes,\n\tupdateAlignment,\n\tupdateColumns,\n\tclientId,\n} ) {\n\tconst { verticalAlignment } = attributes;\n\n\tconst { count } = useSelect(\n\t\t( select ) => {\n\t\t\treturn {\n\t\t\t\tcount: select( 'core/block-editor' ).getBlockCount( clientId ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst classes = classnames( {\n\t\t[ `are-vertically-aligned-${ verticalAlignment }` ]: verticalAlignment,\n\t} );\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls>\n\t\t\t\t<BlockVerticalAlignmentToolbar\n\t\t\t\t\tonChange={ updateAlignment }\n\t\t\t\t\tvalue={ verticalAlignment }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tlabel={ __( 'Columns' ) }\n\t\t\t\t\t\tvalue={ count }\n\t\t\t\t\t\tonChange={ ( value ) => updateColumns( count, value ) }\n\t\t\t\t\t\tmin={ 2 }\n\t\t\t\t\t\tmax={ Math.max( 6, count ) }\n\t\t\t\t\t/>\n\t\t\t\t\t{ count > 6 && (\n\t\t\t\t\t\t<Notice status=\"warning\" isDismissible={ false }>\n\t\t\t\t\t\t\t{ __(\n\t\t\t\t\t\t\t\t'This column count exceeds the recommended amount and may cause visual breakage.'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t</Notice>\n\t\t\t\t\t) }\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<InnerBlocks\n\t\t\t\tallowedBlocks={ ALLOWED_BLOCKS }\n\t\t\t\torientation=\"horizontal\"\n\t\t\t\t__experimentalTagName={ Block.div }\n\t\t\t\t__experimentalPassedProps={ {\n\t\t\t\t\tclassName: classes,\n\t\t\t\t} }\n\t\t\t\trenderAppender={ false }\n\t\t\t/>\n\t\t</>\n\t);\n}\n\nconst ColumnsEditContainerWrapper = withDispatch(\n\t( dispatch, ownProps, registry ) => ( {\n\t\t/**\n\t\t * Update all child Column blocks with a new vertical alignment setting\n\t\t * based on whatever alignment is passed in. This allows change to parent\n\t\t * to overide anything set on a individual column basis.\n\t\t *\n\t\t * @param {string} verticalAlignment the vertical alignment setting\n\t\t */\n\t\tupdateAlignment( verticalAlignment ) {\n\t\t\tconst { clientId, setAttributes } = ownProps;\n\t\t\tconst { updateBlockAttributes } = dispatch( 'core/block-editor' );\n\t\t\tconst { getBlockOrder } = registry.select( 'core/block-editor' );\n\n\t\t\t// Update own alignment.\n\t\t\tsetAttributes( { verticalAlignment } );\n\n\t\t\t// Update all child Column Blocks to match\n\t\t\tconst innerBlockClientIds = getBlockOrder( clientId );\n\t\t\tinnerBlockClientIds.forEach( ( innerBlockClientId ) => {\n\t\t\t\tupdateBlockAttributes( innerBlockClientId, {\n\t\t\t\t\tverticalAlignment,\n\t\t\t\t} );\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Updates the column count, including necessary revisions to child Column\n\t\t * blocks to grant required or redistribute available space.\n\t\t *\n\t\t * @param {number} previousColumns Previous column count.\n\t\t * @param {number} newColumns      New column count.\n\t\t */\n\t\tupdateColumns( previousColumns, newColumns ) {\n\t\t\tconst { clientId } = ownProps;\n\t\t\tconst { replaceInnerBlocks } = dispatch( 'core/block-editor' );\n\t\t\tconst { getBlocks } = registry.select( 'core/block-editor' );\n\n\t\t\tlet innerBlocks = getBlocks( clientId );\n\t\t\tconst hasExplicitWidths = hasExplicitColumnWidths( innerBlocks );\n\n\t\t\t// Redistribute available width for existing inner blocks.\n\t\t\tconst isAddingColumn = newColumns > previousColumns;\n\n\t\t\tif ( isAddingColumn && hasExplicitWidths ) {\n\t\t\t\t// If adding a new column, assign width to the new column equal to\n\t\t\t\t// as if it were `1 / columns` of the total available space.\n\t\t\t\tconst newColumnWidth = toWidthPrecision( 100 / newColumns );\n\n\t\t\t\t// Redistribute in consideration of pending block insertion as\n\t\t\t\t// constraining the available working width.\n\t\t\t\tconst widths = getRedistributedColumnWidths(\n\t\t\t\t\tinnerBlocks,\n\t\t\t\t\t100 - newColumnWidth\n\t\t\t\t);\n\n\t\t\t\tinnerBlocks = [\n\t\t\t\t\t...getMappedColumnWidths( innerBlocks, widths ),\n\t\t\t\t\t...times( newColumns - previousColumns, () => {\n\t\t\t\t\t\treturn createBlock( 'core/column', {\n\t\t\t\t\t\t\twidth: newColumnWidth,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} ),\n\t\t\t\t];\n\t\t\t} else if ( isAddingColumn ) {\n\t\t\t\tinnerBlocks = [\n\t\t\t\t\t...innerBlocks,\n\t\t\t\t\t...times( newColumns - previousColumns, () => {\n\t\t\t\t\t\treturn createBlock( 'core/column' );\n\t\t\t\t\t} ),\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\t// The removed column will be the last of the inner blocks.\n\t\t\t\tinnerBlocks = dropRight(\n\t\t\t\t\tinnerBlocks,\n\t\t\t\t\tpreviousColumns - newColumns\n\t\t\t\t);\n\n\t\t\t\tif ( hasExplicitWidths ) {\n\t\t\t\t\t// Redistribute as if block is already removed.\n\t\t\t\t\tconst widths = getRedistributedColumnWidths(\n\t\t\t\t\t\tinnerBlocks,\n\t\t\t\t\t\t100\n\t\t\t\t\t);\n\n\t\t\t\t\tinnerBlocks = getMappedColumnWidths( innerBlocks, widths );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treplaceInnerBlocks( clientId, innerBlocks, false );\n\t\t},\n\t} )\n)( ColumnsEditContainer );\n\nconst createBlocksFromInnerBlocksTemplate = ( innerBlocksTemplate ) => {\n\treturn map(\n\t\tinnerBlocksTemplate,\n\t\t( [ name, attributes, innerBlocks = [] ] ) =>\n\t\t\tcreateBlock(\n\t\t\t\tname,\n\t\t\t\tattributes,\n\t\t\t\tcreateBlocksFromInnerBlocksTemplate( innerBlocks )\n\t\t\t)\n\t);\n};\n\nconst ColumnsEdit = ( props ) => {\n\tconst { clientId, name } = props;\n\tconst {\n\t\tblockType,\n\t\tdefaultVariation,\n\t\thasInnerBlocks,\n\t\tvariations,\n\t} = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockVariations,\n\t\t\t\tgetBlockType,\n\t\t\t\tgetDefaultBlockVariation,\n\t\t\t} = select( 'core/blocks' );\n\n\t\t\treturn {\n\t\t\t\tblockType: getBlockType( name ),\n\t\t\t\tdefaultVariation: getDefaultBlockVariation( name, 'block' ),\n\t\t\t\thasInnerBlocks:\n\t\t\t\t\tselect( 'core/block-editor' ).getBlocks( clientId ).length >\n\t\t\t\t\t0,\n\t\t\t\tvariations: getBlockVariations( name, 'block' ),\n\t\t\t};\n\t\t},\n\t\t[ clientId, name ]\n\t);\n\n\tconst { replaceInnerBlocks } = useDispatch( 'core/block-editor' );\n\n\tif ( hasInnerBlocks ) {\n\t\treturn <ColumnsEditContainerWrapper { ...props } />;\n\t}\n\n\treturn (\n\t\t<Block.div>\n\t\t\t<__experimentalBlockVariationPicker\n\t\t\t\ticon={ get( blockType, [ 'icon', 'src' ] ) }\n\t\t\t\tlabel={ get( blockType, [ 'title' ] ) }\n\t\t\t\tvariations={ variations }\n\t\t\t\tonSelect={ ( nextVariation = defaultVariation ) => {\n\t\t\t\t\tif ( nextVariation.attributes ) {\n\t\t\t\t\t\tprops.setAttributes( nextVariation.attributes );\n\t\t\t\t\t}\n\t\t\t\t\tif ( nextVariation.innerBlocks ) {\n\t\t\t\t\t\treplaceInnerBlocks(\n\t\t\t\t\t\t\tprops.clientId,\n\t\t\t\t\t\t\tcreateBlocksFromInnerBlocksTemplate(\n\t\t\t\t\t\t\t\tnextVariation.innerBlocks\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} }\n\t\t\t\tallowSkip\n\t\t\t/>\n\t\t</Block.div>\n\t);\n};\n\nexport default ColumnsEdit;\n"]}