{"version":3,"sources":["@wordpress/block-library/src/post-tags/edit.js"],"names":["classnames","useEntityProp","BlockControls","Warning","__experimentalBlock","Block","AlignmentToolbar","useSelect","__","PostTagsEdit","context","attributes","setAttributes","textAlign","postType","postId","tags","tagLinks","select","getEntityRecord","loaded","links","map","tagId","tag","link","name","display","length","reduce","prev","curr","nextAlign"],"mappings":";;;;AAAA;;;AAGA,OAAOA,UAAP,MAAuB,YAAvB;AAEA;;;;AAGA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SACCC,aADD,EAECC,OAFD,EAGCC,mBAAmB,IAAIC,KAHxB,EAICC,gBAJD,QAKO,yBALP;AAMA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,EAAT,QAAmB,iBAAnB;AAEA,eAAe,SAASC,YAAT,OAAgE;AAAA,MAAvCC,OAAuC,QAAvCA,OAAuC;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,MAAlBC,aAAkB,QAAlBA,aAAkB;AAAA,MACtEC,SADsE,GACxDF,UADwD,CACtEE,SADsE;;AAAA,uBAG7DZ,aAAa,CAC7B,UAD6B,EAE7BS,OAAO,CAACI,QAFqB,EAG7B,MAH6B,EAI7BJ,OAAO,CAACK,MAJqB,CAHgD;AAAA;AAAA,MAGtEC,IAHsE;;AAS9E,MAAMC,QAAQ,GAAGV,SAAS,CACzB,UAAEW,MAAF,EAAc;AAAA,kBACeA,MAAM,CAAE,MAAF,CADrB;AAAA,QACLC,eADK,WACLA,eADK;;AAEb,QAAIC,MAAM,GAAG,IAAb;AAEA,QAAMC,KAAK,GAAGL,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEM,GAAN,CAAW,UAAEC,KAAF,EAAa;AACrC,UAAMC,GAAG,GAAGL,eAAe,CAAE,UAAF,EAAc,UAAd,EAA0BI,KAA1B,CAA3B;;AACA,UAAK,CAAEC,GAAP,EAAa;AACZ,eAASJ,MAAM,GAAG,KAAlB;AACA;;AACD,aACC;AAAG,QAAA,GAAG,EAAGG,KAAT;AAAiB,QAAA,IAAI,EAAGC,GAAG,CAACC;AAA5B,SACGD,GAAG,CAACE,IADP,CADD;AAKA,KAVa,CAAd;AAYA,WAAON,MAAM,IAAIC,KAAjB;AACA,GAlBwB,EAmBzB,CAAEL,IAAF,CAnByB,CAA1B;AAsBA,MAAIW,OAAO,GACVV,QAAQ,KACNA,QAAQ,CAACW,MAAT,KAAoB,CAApB,GACCpB,EAAE,CAAE,UAAF,CADH,GAECS,QAAQ,CAACY,MAAT,CAAiB,UAAEC,IAAF,EAAQC,IAAR;AAAA,WAAkB,CAAED,IAAF,EAAQ,KAAR,EAAeC,IAAf,CAAlB;AAAA,GAAjB,CAHK,CADT;;AAMA,MAAK,CAAErB,OAAO,CAACI,QAAV,IAAsB,CAAEJ,OAAO,CAACK,MAArC,EAA8C;AAC7CY,IAAAA,OAAO,GACN,cAAC,OAAD,QACGnB,EAAE,CAAE,gDAAF,CADL,CADD;AAKA,GAND,MAMO,IAAKE,OAAO,CAACI,QAAR,KAAqB,MAA1B,EAAmC;AACzC;;;;;;;;AAQAa,IAAAA,OAAO,GACN,cAAC,OAAD,QACGnB,EAAE,CACH,6DADG,CADL,CADD;AAOA;;AAED,SACC,8BACC,cAAC,aAAD,QACC,cAAC,gBAAD;AACC,IAAA,KAAK,EAAGK,SADT;AAEC,IAAA,QAAQ,EAAG,kBAAEmB,SAAF,EAAiB;AAC3BpB,MAAAA,aAAa,CAAE;AAAEC,QAAAA,SAAS,EAAEmB;AAAb,OAAF,CAAb;AACA;AAJF,IADD,CADD,EASC,cAAC,KAAD,CAAO,GAAP;AACC,IAAA,SAAS,EAAGhC,UAAU,8CACAa,SADA,GACgBA,SADhB;AADvB,KAKGc,OALH,CATD,CADD;AAmBA","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { useEntityProp } from '@wordpress/core-data';\nimport {\n\tBlockControls,\n\tWarning,\n\t__experimentalBlock as Block,\n\tAlignmentToolbar,\n} from '@wordpress/block-editor';\nimport { useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\nexport default function PostTagsEdit( { context, attributes, setAttributes } ) {\n\tconst { textAlign } = attributes;\n\n\tconst [ tags ] = useEntityProp(\n\t\t'postType',\n\t\tcontext.postType,\n\t\t'tags',\n\t\tcontext.postId\n\t);\n\tconst tagLinks = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getEntityRecord } = select( 'core' );\n\t\t\tlet loaded = true;\n\n\t\t\tconst links = tags?.map( ( tagId ) => {\n\t\t\t\tconst tag = getEntityRecord( 'taxonomy', 'post_tag', tagId );\n\t\t\t\tif ( ! tag ) {\n\t\t\t\t\treturn ( loaded = false );\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\t<a key={ tagId } href={ tag.link }>\n\t\t\t\t\t\t{ tag.name }\n\t\t\t\t\t</a>\n\t\t\t\t);\n\t\t\t} );\n\n\t\t\treturn loaded && links;\n\t\t},\n\t\t[ tags ]\n\t);\n\n\tlet display =\n\t\ttagLinks &&\n\t\t( tagLinks.length === 0\n\t\t\t? __( 'No tags.' )\n\t\t\t: tagLinks.reduce( ( prev, curr ) => [ prev, ' | ', curr ] ) );\n\n\tif ( ! context.postType || ! context.postId ) {\n\t\tdisplay = (\n\t\t\t<Warning>\n\t\t\t\t{ __( 'Post tags block: No post found for this block.' ) }\n\t\t\t</Warning>\n\t\t);\n\t} else if ( context.postType !== 'post' ) {\n\t\t/**\n\t\t * Do not render the block when viewing a page (as opposed to a post)\n\t\t *\n\t\t * @todo By default, only posts can be grouped by tags. Therefore, without any configuration,\n\t\t * the post tags block will have no tags for pages. Plugins, however, can modify this behavior.\n\t\t * In the future, instead of only evaluating posts, we should check whether the\n\t\t * post_tag taxonomy is registered for the current post type.\n\t\t */\n\t\tdisplay = (\n\t\t\t<Warning>\n\t\t\t\t{ __(\n\t\t\t\t\t'Post tags block: Tags are not available for this post type.'\n\t\t\t\t) }\n\t\t\t</Warning>\n\t\t);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls>\n\t\t\t\t<AlignmentToolbar\n\t\t\t\t\tvalue={ textAlign }\n\t\t\t\t\tonChange={ ( nextAlign ) => {\n\t\t\t\t\t\tsetAttributes( { textAlign: nextAlign } );\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<Block.div\n\t\t\t\tclassName={ classnames( {\n\t\t\t\t\t[ `has-text-align-${ textAlign }` ]: textAlign,\n\t\t\t\t} ) }\n\t\t\t>\n\t\t\t\t{ display }\n\t\t\t</Block.div>\n\t\t</>\n\t);\n}\n"]}