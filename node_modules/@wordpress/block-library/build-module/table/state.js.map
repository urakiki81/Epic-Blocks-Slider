{"version":3,"sources":["@wordpress/block-library/src/table/state.js"],"names":["times","get","mapValues","every","pick","INHERITED_COLUMN_ATTRIBUTES","createTable","rowCount","columnCount","body","cells","content","tag","getFirstRow","state","isEmptyTableSection","head","foot","getCellAttribute","cellLocation","attributeName","sectionName","rowIndex","columnIndex","updateSelectedCell","selection","updateCell","tableSections","selectionSectionName","selectionRowIndex","section","map","row","cellAttributes","isCellSelected","type","insertRow","firstRow","cellCount","undefined","slice","index","firstCellInColumn","inheritedAttributes","deleteRow","filter","insertColumn","isEmptyRow","length","deleteColumn","cell","toggleSection"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { times, get, mapValues, every, pick } from 'lodash';\n\nconst INHERITED_COLUMN_ATTRIBUTES = [ 'align' ];\n\n/**\n * Creates a table state.\n *\n * @param {Object} options\n * @param {number} options.rowCount    Row count for the table to create.\n * @param {number} options.columnCount Column count for the table to create.\n *\n * @return {Object} New table state.\n */\nexport function createTable( { rowCount, columnCount } ) {\n\treturn {\n\t\tbody: times( rowCount, () => ( {\n\t\t\tcells: times( columnCount, () => ( {\n\t\t\t\tcontent: '',\n\t\t\t\ttag: 'td',\n\t\t\t} ) ),\n\t\t} ) ),\n\t};\n}\n\n/**\n * Returns the first row in the table.\n *\n * @param {Object} state Current table state.\n *\n * @return {Object} The first table row.\n */\nexport function getFirstRow( state ) {\n\tif ( ! isEmptyTableSection( state.head ) ) {\n\t\treturn state.head[ 0 ];\n\t}\n\tif ( ! isEmptyTableSection( state.body ) ) {\n\t\treturn state.body[ 0 ];\n\t}\n\tif ( ! isEmptyTableSection( state.foot ) ) {\n\t\treturn state.foot[ 0 ];\n\t}\n}\n\n/**\n * Gets an attribute for a cell.\n *\n * @param {Object} state \t\t Current table state.\n * @param {Object} cellLocation  The location of the cell\n * @param {string} attributeName The name of the attribute to get the value of.\n *\n * @return {*} The attribute value.\n */\nexport function getCellAttribute( state, cellLocation, attributeName ) {\n\tconst { sectionName, rowIndex, columnIndex } = cellLocation;\n\treturn get( state, [\n\t\tsectionName,\n\t\trowIndex,\n\t\t'cells',\n\t\tcolumnIndex,\n\t\tattributeName,\n\t] );\n}\n\n/**\n * Returns updated cell attributes after applying the `updateCell` function to the selection.\n *\n * @param {Object}   state      The block attributes.\n * @param {Object}   selection  The selection of cells to update.\n * @param {Function} updateCell A function to update the selected cell attributes.\n *\n * @return {Object} New table state including the updated cells.\n */\nexport function updateSelectedCell( state, selection, updateCell ) {\n\tif ( ! selection ) {\n\t\treturn state;\n\t}\n\n\tconst tableSections = pick( state, [ 'head', 'body', 'foot' ] );\n\tconst {\n\t\tsectionName: selectionSectionName,\n\t\trowIndex: selectionRowIndex,\n\t} = selection;\n\n\treturn mapValues( tableSections, ( section, sectionName ) => {\n\t\tif ( selectionSectionName && selectionSectionName !== sectionName ) {\n\t\t\treturn section;\n\t\t}\n\n\t\treturn section.map( ( row, rowIndex ) => {\n\t\t\tif ( selectionRowIndex && selectionRowIndex !== rowIndex ) {\n\t\t\t\treturn row;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcells: row.cells.map( ( cellAttributes, columnIndex ) => {\n\t\t\t\t\tconst cellLocation = {\n\t\t\t\t\t\tsectionName,\n\t\t\t\t\t\tcolumnIndex,\n\t\t\t\t\t\trowIndex,\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( ! isCellSelected( cellLocation, selection ) ) {\n\t\t\t\t\t\treturn cellAttributes;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn updateCell( cellAttributes );\n\t\t\t\t} ),\n\t\t\t};\n\t\t} );\n\t} );\n}\n\n/**\n * Returns whether the cell at `cellLocation` is included in the selection `selection`.\n *\n * @param {Object} cellLocation An object containing cell location properties.\n * @param {Object} selection    An object containing selection properties.\n *\n * @return {boolean} True if the cell is selected, false otherwise.\n */\nexport function isCellSelected( cellLocation, selection ) {\n\tif ( ! cellLocation || ! selection ) {\n\t\treturn false;\n\t}\n\n\tswitch ( selection.type ) {\n\t\tcase 'column':\n\t\t\treturn (\n\t\t\t\tselection.type === 'column' &&\n\t\t\t\tcellLocation.columnIndex === selection.columnIndex\n\t\t\t);\n\t\tcase 'cell':\n\t\t\treturn (\n\t\t\t\tselection.type === 'cell' &&\n\t\t\t\tcellLocation.sectionName === selection.sectionName &&\n\t\t\t\tcellLocation.columnIndex === selection.columnIndex &&\n\t\t\t\tcellLocation.rowIndex === selection.rowIndex\n\t\t\t);\n\t}\n}\n\n/**\n * Inserts a row in the table state.\n *\n * @param {Object} state               Current table state.\n * @param {Object} options\n * @param {string} options.sectionName Section in which to insert the row.\n * @param {number} options.rowIndex    Row index at which to insert the row.\n * @param {number} options.columnCount Column count for the table to create.\n *\n * @return {Object} New table state.\n */\nexport function insertRow( state, { sectionName, rowIndex, columnCount } ) {\n\tconst firstRow = getFirstRow( state );\n\tconst cellCount =\n\t\tcolumnCount === undefined\n\t\t\t? get( firstRow, [ 'cells', 'length' ] )\n\t\t\t: columnCount;\n\n\t// Bail early if the function cannot determine how many cells to add.\n\tif ( ! cellCount ) {\n\t\treturn state;\n\t}\n\n\treturn {\n\t\t[ sectionName ]: [\n\t\t\t...state[ sectionName ].slice( 0, rowIndex ),\n\t\t\t{\n\t\t\t\tcells: times( cellCount, ( index ) => {\n\t\t\t\t\tconst firstCellInColumn = get(\n\t\t\t\t\t\tfirstRow,\n\t\t\t\t\t\t[ 'cells', index ],\n\t\t\t\t\t\t{}\n\t\t\t\t\t);\n\t\t\t\t\tconst inheritedAttributes = pick(\n\t\t\t\t\t\tfirstCellInColumn,\n\t\t\t\t\t\tINHERITED_COLUMN_ATTRIBUTES\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...inheritedAttributes,\n\t\t\t\t\t\tcontent: '',\n\t\t\t\t\t\ttag: sectionName === 'head' ? 'th' : 'td',\n\t\t\t\t\t};\n\t\t\t\t} ),\n\t\t\t},\n\t\t\t...state[ sectionName ].slice( rowIndex ),\n\t\t],\n\t};\n}\n\n/**\n * Deletes a row from the table state.\n *\n * @param {Object} state               Current table state.\n * @param {Object} options\n * @param {string} options.sectionName Section in which to delete the row.\n * @param {number} options.rowIndex    Row index to delete.\n *\n * @return {Object} New table state.\n */\nexport function deleteRow( state, { sectionName, rowIndex } ) {\n\treturn {\n\t\t[ sectionName ]: state[ sectionName ].filter(\n\t\t\t( row, index ) => index !== rowIndex\n\t\t),\n\t};\n}\n\n/**\n * Inserts a column in the table state.\n *\n * @param {Object} state               Current table state.\n * @param {Object} options\n * @param {number} options.columnIndex Column index at which to insert the column.\n *\n * @return {Object} New table state.\n */\nexport function insertColumn( state, { columnIndex } ) {\n\tconst tableSections = pick( state, [ 'head', 'body', 'foot' ] );\n\n\treturn mapValues( tableSections, ( section, sectionName ) => {\n\t\t// Bail early if the table section is empty.\n\t\tif ( isEmptyTableSection( section ) ) {\n\t\t\treturn section;\n\t\t}\n\n\t\treturn section.map( ( row ) => {\n\t\t\t// Bail early if the row is empty or it's an attempt to insert past\n\t\t\t// the last possible index of the array.\n\t\t\tif ( isEmptyRow( row ) || row.cells.length < columnIndex ) {\n\t\t\t\treturn row;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcells: [\n\t\t\t\t\t...row.cells.slice( 0, columnIndex ),\n\t\t\t\t\t{\n\t\t\t\t\t\tcontent: '',\n\t\t\t\t\t\ttag: sectionName === 'head' ? 'th' : 'td',\n\t\t\t\t\t},\n\t\t\t\t\t...row.cells.slice( columnIndex ),\n\t\t\t\t],\n\t\t\t};\n\t\t} );\n\t} );\n}\n\n/**\n * Deletes a column from the table state.\n *\n * @param {Object} state               Current table state.\n * @param {Object} options\n * @param {number} options.columnIndex Column index to delete.\n *\n * @return {Object} New table state.\n */\nexport function deleteColumn( state, { columnIndex } ) {\n\tconst tableSections = pick( state, [ 'head', 'body', 'foot' ] );\n\n\treturn mapValues( tableSections, ( section ) => {\n\t\t// Bail early if the table section is empty.\n\t\tif ( isEmptyTableSection( section ) ) {\n\t\t\treturn section;\n\t\t}\n\n\t\treturn section\n\t\t\t.map( ( row ) => ( {\n\t\t\t\tcells:\n\t\t\t\t\trow.cells.length >= columnIndex\n\t\t\t\t\t\t? row.cells.filter(\n\t\t\t\t\t\t\t\t( cell, index ) => index !== columnIndex\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: row.cells,\n\t\t\t} ) )\n\t\t\t.filter( ( row ) => row.cells.length );\n\t} );\n}\n\n/**\n * Toggles the existance of a section.\n *\n * @param {Object} state       Current table state.\n * @param {string} sectionName Name of the section to toggle.\n *\n * @return {Object} New table state.\n */\nexport function toggleSection( state, sectionName ) {\n\t// Section exists, replace it with an empty row to remove it.\n\tif ( ! isEmptyTableSection( state[ sectionName ] ) ) {\n\t\treturn { [ sectionName ]: [] };\n\t}\n\n\t// Get the length of the first row of the body to use when creating the header.\n\tconst columnCount = get( state, [ 'body', 0, 'cells', 'length' ], 1 );\n\n\t// Section doesn't exist, insert an empty row to create the section.\n\treturn insertRow( state, { sectionName, rowIndex: 0, columnCount } );\n}\n\n/**\n * Determines whether a table section is empty.\n *\n * @param {Object} section Table section state.\n *\n * @return {boolean} True if the table section is empty, false otherwise.\n */\nexport function isEmptyTableSection( section ) {\n\treturn ! section || ! section.length || every( section, isEmptyRow );\n}\n\n/**\n * Determines whether a table row is empty.\n *\n * @param {Object} row Table row state.\n *\n * @return {boolean} True if the table section is empty, false otherwise.\n */\nexport function isEmptyRow( row ) {\n\treturn ! ( row.cells && row.cells.length );\n}\n"]}