{"version":3,"sources":["@wordpress/block-library/src/pullquote/deprecated.js"],"names":["classnames","get","includes","getColorClassName","getColorObjectByAttributeValues","RichText","select","SOLID_COLOR_CLASS","blockAttributes","value","type","source","selector","multiline","citation","default","mainColor","customMainColor","textColor","customTextColor","parseBorderColor","styleString","matches","match","deprecated","attributes","figureStyle","attribute","save","className","isSolidColorStyle","figureClasses","figureStyles","backgroundClass","backgroundColor","undefined","borderColor","blockquoteTextColorClass","blockquoteClasses","blockquoteStyles","color","isEmpty","migrate","figureClass","colors","getSettings","colorObject","blockquoteStyle","align"],"mappings":";;;;;;;;AAAA;;;AAGA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,QAA9B;AAEA;;;;AAGA,SACCC,iBADD,EAECC,+BAFD,EAGCC,QAHD,QAIO,yBAJP;AAKA,SAASC,MAAT,QAAuB,iBAAvB;AAEA;;;;AAGA,SAASC,iBAAT,QAAkC,UAAlC;AAEA,IAAMC,eAAe,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACNC,IAAAA,IAAI,EAAE,QADA;AAENC,IAAAA,MAAM,EAAE,MAFF;AAGNC,IAAAA,QAAQ,EAAE,YAHJ;AAINC,IAAAA,SAAS,EAAE;AAJL,GADgB;AAOvBC,EAAAA,QAAQ,EAAE;AACTJ,IAAAA,IAAI,EAAE,QADG;AAETC,IAAAA,MAAM,EAAE,MAFC;AAGTC,IAAAA,QAAQ,EAAE,MAHD;AAITG,IAAAA,OAAO,EAAE;AAJA,GAPa;AAavBC,EAAAA,SAAS,EAAE;AACVN,IAAAA,IAAI,EAAE;AADI,GAbY;AAgBvBO,EAAAA,eAAe,EAAE;AAChBP,IAAAA,IAAI,EAAE;AADU,GAhBM;AAmBvBQ,EAAAA,SAAS,EAAE;AACVR,IAAAA,IAAI,EAAE;AADI,GAnBY;AAsBvBS,EAAAA,eAAe,EAAE;AAChBT,IAAAA,IAAI,EAAE;AADU;AAtBM,CAAxB;;AA2BA,SAASU,gBAAT,CAA2BC,WAA3B,EAAyC;AACxC,MAAK,CAAEA,WAAP,EAAqB;AACpB;AACA;;AACD,MAAMC,OAAO,GAAGD,WAAW,CAACE,KAAZ,CAAmB,0BAAnB,CAAhB;;AACA,MAAKD,OAAO,IAAIA,OAAO,CAAE,CAAF,CAAvB,EAA+B;AAC9B,WAAOA,OAAO,CAAE,CAAF,CAAd;AACA;AACD;;AAED,IAAME,UAAU,GAAG,CAClB;AACCC,EAAAA,UAAU,oBACNjB,eADM;AAET;AACA;AACAkB,IAAAA,WAAW,EAAE;AACZf,MAAAA,MAAM,EAAE,WADI;AAEZC,MAAAA,QAAQ,EAAE,QAFE;AAGZe,MAAAA,SAAS,EAAE;AAHC;AAJJ,IADX;AAWCC,EAAAA,IAXD,sBAWwB;AAAA,QAAfH,UAAe,QAAfA,UAAe;AAAA,QAErBT,SAFqB,GAUlBS,UAVkB,CAErBT,SAFqB;AAAA,QAGrBC,eAHqB,GAUlBQ,UAVkB,CAGrBR,eAHqB;AAAA,QAIrBC,SAJqB,GAUlBO,UAVkB,CAIrBP,SAJqB;AAAA,QAKrBC,eALqB,GAUlBM,UAVkB,CAKrBN,eALqB;AAAA,QAMrBV,KANqB,GAUlBgB,UAVkB,CAMrBhB,KANqB;AAAA,QAOrBK,QAPqB,GAUlBW,UAVkB,CAOrBX,QAPqB;AAAA,QAQrBe,SARqB,GAUlBJ,UAVkB,CAQrBI,SARqB;AAAA,QASrBH,WATqB,GAUlBD,UAVkB,CASrBC,WATqB;AAYtB,QAAMI,iBAAiB,GAAG5B,QAAQ,CAAE2B,SAAF,EAAatB,iBAAb,CAAlC;AAEA,QAAIwB,aAAJ,EAAmBC,YAAnB,CAdsB,CAgBtB;;AACA,QAAKF,iBAAL,EAAyB;AACxB,UAAMG,eAAe,GAAG9B,iBAAiB,CACxC,kBADwC,EAExCa,SAFwC,CAAzC;AAKAe,MAAAA,aAAa,GAAG/B,UAAU;AACzB,0BAAkBiC,eAAe,IAAIhB;AADZ,SAEvBgB,eAFuB,EAEJA,eAFI,EAA1B;AAKAD,MAAAA,YAAY,GAAG;AACdE,QAAAA,eAAe,EAAED,eAAe,GAC7BE,SAD6B,GAE7BlB;AAHW,OAAf,CAXwB,CAgBxB;AACA,KAjBD,MAiBO,IAAKA,eAAL,EAAuB;AAC7Be,MAAAA,YAAY,GAAG;AACdI,QAAAA,WAAW,EAAEnB;AADC,OAAf,CAD6B,CAI7B;AACA;AACA,KANM,MAMA,IAAKD,SAAL,EAAiB;AACvB;AACA;AACA;AACA;AACA;AACA,UAAMoB,WAAW,GAAGhB,gBAAgB,CAAEM,WAAF,CAApC;AACAM,MAAAA,YAAY,GAAG;AACdI,QAAAA,WAAW,EAAXA;AADc,OAAf;AAGA;;AAED,QAAMC,wBAAwB,GAAGlC,iBAAiB,CACjD,OADiD,EAEjDe,SAFiD,CAAlD;AAIA,QAAMoB,iBAAiB,GACtB,CAAEpB,SAAS,IAAIC,eAAf,KACAnB,UAAU,CAAE,gBAAF,sBACPqC,wBADO,EACqBA,wBADrB,EAFX;AAMA,QAAME,gBAAgB,GAAGF,wBAAwB,GAC9CF,SAD8C,GAE9C;AAAEK,MAAAA,KAAK,EAAErB;AAAT,KAFH;AAIA,WACC;AAAQ,MAAA,SAAS,EAAGY,aAApB;AAAoC,MAAA,KAAK,EAAGC;AAA5C,OACC;AACC,MAAA,SAAS,EAAGM,iBADb;AAEC,MAAA,KAAK,EAAGC;AAFT,OAIC,cAAC,QAAD,CAAU,OAAV;AAAkB,MAAA,KAAK,EAAG9B,KAA1B;AAAkC,MAAA,SAAS;AAA3C,MAJD,EAKG,CAAEJ,QAAQ,CAACoC,OAAT,CAAkB3B,QAAlB,CAAF,IACD,cAAC,QAAD,CAAU,OAAV;AACC,MAAA,OAAO,EAAC,MADT;AAEC,MAAA,KAAK,EAAGA;AAFT,MANF,CADD,CADD;AAgBA,GA7FF;AA8FC4B,EAAAA,OA9FD,0BA8FiE;AAAA,QAArDb,SAAqD,SAArDA,SAAqD;AAAA,QAA1CH,WAA0C,SAA1CA,WAA0C;AAAA,QAA7BV,SAA6B,SAA7BA,SAA6B;AAAA,QAAfS,UAAe;;AAC/D,QAAMK,iBAAiB,GAAG5B,QAAQ,CAAE2B,SAAF,EAAatB,iBAAb,CAAlC,CAD+D,CAE/D;AACA;AACA;;AACA,QAAK,CAAEuB,iBAAF,IAAuBd,SAAvB,IAAoCU,WAAzC,EAAuD;AACtD,UAAMU,WAAW,GAAGhB,gBAAgB,CAAEM,WAAF,CAApC;;AACA,UAAKU,WAAL,EAAmB;AAClB,iCACIX,UADJ;AAECI,UAAAA,SAAS,EAATA,SAFD;AAGCZ,UAAAA,eAAe,EAAEmB;AAHlB;AAKA;AACD;;AACD;AACCP,MAAAA,SAAS,EAATA,SADD;AAECb,MAAAA,SAAS,EAATA;AAFD,OAGIS,UAHJ;AAKA;AAlHF,CADkB,EAqHlB;AACCA,EAAAA,UAAU,EAAEjB,eADb;AAECoB,EAAAA,IAFD,uBAEwB;AAAA,QAAfH,UAAe,SAAfA,UAAe;AAAA,QAErBT,SAFqB,GASlBS,UATkB,CAErBT,SAFqB;AAAA,QAGrBC,eAHqB,GASlBQ,UATkB,CAGrBR,eAHqB;AAAA,QAIrBC,SAJqB,GASlBO,UATkB,CAIrBP,SAJqB;AAAA,QAKrBC,eALqB,GASlBM,UATkB,CAKrBN,eALqB;AAAA,QAMrBV,KANqB,GASlBgB,UATkB,CAMrBhB,KANqB;AAAA,QAOrBK,QAPqB,GASlBW,UATkB,CAOrBX,QAPqB;AAAA,QAQrBe,SARqB,GASlBJ,UATkB,CAQrBI,SARqB;AAUtB,QAAMC,iBAAiB,GAAG5B,QAAQ,CAAE2B,SAAF,EAAatB,iBAAb,CAAlC;AAEA,QAAIoC,WAAJ,EAAiBX,YAAjB,CAZsB,CAatB;;AACA,QAAKF,iBAAL,EAAyB;AACxBa,MAAAA,WAAW,GAAGxC,iBAAiB,CAC9B,kBAD8B,EAE9Ba,SAF8B,CAA/B;;AAIA,UAAK,CAAE2B,WAAP,EAAqB;AACpBX,QAAAA,YAAY,GAAG;AACdE,UAAAA,eAAe,EAAEjB;AADH,SAAf;AAGA,OATuB,CAUxB;;AACA,KAXD,MAWO,IAAKA,eAAL,EAAuB;AAC7Be,MAAAA,YAAY,GAAG;AACdI,QAAAA,WAAW,EAAEnB;AADC,OAAf,CAD6B,CAI7B;AACA;AACA,KANM,MAMA,IAAKD,SAAL,EAAiB;AACvB,UAAM4B,MAAM,GAAG3C,GAAG,CACjBK,MAAM,CAAE,mBAAF,CAAN,CAA8BuC,WAA9B,EADiB,EAEjB,CAAE,QAAF,CAFiB,EAGjB,EAHiB,CAAlB;AAKA,UAAMC,WAAW,GAAG1C,+BAA+B,CAClDwC,MADkD,EAElD5B,SAFkD,CAAnD;AAIAgB,MAAAA,YAAY,GAAG;AACdI,QAAAA,WAAW,EAAEU,WAAW,CAACN;AADX,OAAf;AAGA;;AAED,QAAMH,wBAAwB,GAAGlC,iBAAiB,CACjD,OADiD,EAEjDe,SAFiD,CAAlD;AAIA,QAAMoB,iBAAiB,GACtBpB,SAAS,IAAIC,eAAb,GACGnB,UAAU,CAAE,gBAAF,sBACRqC,wBADQ,EACoBA,wBADpB,EADb,GAIGF,SALJ;AAMA,QAAMY,eAAe,GAAGV,wBAAwB,GAC7CF,SAD6C,GAE7C;AAAEK,MAAAA,KAAK,EAAErB;AAAT,KAFH;AAGA,WACC;AAAQ,MAAA,SAAS,EAAGwB,WAApB;AAAkC,MAAA,KAAK,EAAGX;AAA1C,OACC;AACC,MAAA,SAAS,EAAGM,iBADb;AAEC,MAAA,KAAK,EAAGS;AAFT,OAIC,cAAC,QAAD,CAAU,OAAV;AAAkB,MAAA,KAAK,EAAGtC,KAA1B;AAAkC,MAAA,SAAS;AAA3C,MAJD,EAKG,CAAEJ,QAAQ,CAACoC,OAAT,CAAkB3B,QAAlB,CAAF,IACD,cAAC,QAAD,CAAU,OAAV;AACC,MAAA,OAAO,EAAC,MADT;AAEC,MAAA,KAAK,EAAGA;AAFT,MANF,CADD,CADD;AAgBA;AA7EF,CArHkB,EAoMlB;AACCW,EAAAA,UAAU,oBACNjB,eADM,CADX;AAICoB,EAAAA,IAJD,uBAIwB;AAAA,QAAfH,UAAe,SAAfA,UAAe;AAAA,QACdhB,KADc,GACMgB,UADN,CACdhB,KADc;AAAA,QACPK,QADO,GACMW,UADN,CACPX,QADO;AAEtB,WACC,kCACC,cAAC,QAAD,CAAU,OAAV;AAAkB,MAAA,KAAK,EAAGL,KAA1B;AAAkC,MAAA,SAAS;AAA3C,MADD,EAEG,CAAEJ,QAAQ,CAACoC,OAAT,CAAkB3B,QAAlB,CAAF,IACD,cAAC,QAAD,CAAU,OAAV;AAAkB,MAAA,OAAO,EAAC,MAA1B;AAAiC,MAAA,KAAK,EAAGA;AAAzC,MAHF,CADD;AAQA;AAdF,CApMkB,EAoNlB;AACCW,EAAAA,UAAU,oBACNjB,eADM;AAETM,IAAAA,QAAQ,EAAE;AACTJ,MAAAA,IAAI,EAAE,QADG;AAETC,MAAAA,MAAM,EAAE,MAFC;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KAFD;AAOToC,IAAAA,KAAK,EAAE;AACNtC,MAAAA,IAAI,EAAE,QADA;AAENK,MAAAA,OAAO,EAAE;AAFH;AAPE,IADX;AAcCa,EAAAA,IAdD,uBAcwB;AAAA,QAAfH,UAAe,SAAfA,UAAe;AAAA,QACdhB,KADc,GACagB,UADb,CACdhB,KADc;AAAA,QACPK,QADO,GACaW,UADb,CACPX,QADO;AAAA,QACGkC,KADH,GACavB,UADb,CACGuB,KADH;AAGtB,WACC;AAAY,MAAA,SAAS,iBAAYA,KAAZ;AAArB,OACC,cAAC,QAAD,CAAU,OAAV;AAAkB,MAAA,KAAK,EAAGvC,KAA1B;AAAkC,MAAA,SAAS;AAA3C,MADD,EAEG,CAAEJ,QAAQ,CAACoC,OAAT,CAAkB3B,QAAlB,CAAF,IACD,cAAC,QAAD,CAAU,OAAV;AAAkB,MAAA,OAAO,EAAC,QAA1B;AAAmC,MAAA,KAAK,EAAGA;AAA3C,MAHF,CADD;AAQA;AAzBF,CApNkB,CAAnB;AAiPA,eAAeU,UAAf","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport { get, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetColorClassName,\n\tgetColorObjectByAttributeValues,\n\tRichText,\n} from '@wordpress/block-editor';\nimport { select } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { SOLID_COLOR_CLASS } from './shared';\n\nconst blockAttributes = {\n\tvalue: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'blockquote',\n\t\tmultiline: 'p',\n\t},\n\tcitation: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'cite',\n\t\tdefault: '',\n\t},\n\tmainColor: {\n\t\ttype: 'string',\n\t},\n\tcustomMainColor: {\n\t\ttype: 'string',\n\t},\n\ttextColor: {\n\t\ttype: 'string',\n\t},\n\tcustomTextColor: {\n\t\ttype: 'string',\n\t},\n};\n\nfunction parseBorderColor( styleString ) {\n\tif ( ! styleString ) {\n\t\treturn;\n\t}\n\tconst matches = styleString.match( /border-color:([^;]+)[;]?/ );\n\tif ( matches && matches[ 1 ] ) {\n\t\treturn matches[ 1 ];\n\t}\n}\n\nconst deprecated = [\n\t{\n\t\tattributes: {\n\t\t\t...blockAttributes,\n\t\t\t// figureStyle is an attribute that never existed.\n\t\t\t// We are using it as a way to access the styles previously applied to the figure.\n\t\t\tfigureStyle: {\n\t\t\t\tsource: 'attribute',\n\t\t\t\tselector: 'figure',\n\t\t\t\tattribute: 'style',\n\t\t\t},\n\t\t},\n\t\tsave( { attributes } ) {\n\t\t\tconst {\n\t\t\t\tmainColor,\n\t\t\t\tcustomMainColor,\n\t\t\t\ttextColor,\n\t\t\t\tcustomTextColor,\n\t\t\t\tvalue,\n\t\t\t\tcitation,\n\t\t\t\tclassName,\n\t\t\t\tfigureStyle,\n\t\t\t} = attributes;\n\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\n\t\t\tlet figureClasses, figureStyles;\n\n\t\t\t// Is solid color style\n\t\t\tif ( isSolidColorStyle ) {\n\t\t\t\tconst backgroundClass = getColorClassName(\n\t\t\t\t\t'background-color',\n\t\t\t\t\tmainColor\n\t\t\t\t);\n\n\t\t\t\tfigureClasses = classnames( {\n\t\t\t\t\t'has-background': backgroundClass || customMainColor,\n\t\t\t\t\t[ backgroundClass ]: backgroundClass,\n\t\t\t\t} );\n\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tbackgroundColor: backgroundClass\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: customMainColor,\n\t\t\t\t};\n\t\t\t\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t\t\t} else if ( customMainColor ) {\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor: customMainColor,\n\t\t\t\t};\n\t\t\t\t// If normal style and a named color are being used, we need to retrieve the color value to set the style,\n\t\t\t\t// as there is no expectation that themes create classes that set border colors.\n\t\t\t} else if ( mainColor ) {\n\t\t\t\t// Previously here we queried the color settings to know the color value\n\t\t\t\t// of a named color. This made the save function impure and the block was refactored,\n\t\t\t\t// because meanwhile a change in the editor made it impossible to query color settings in the save function.\n\t\t\t\t// Here instead of querying the color settings to know the color value, we retrieve the value\n\t\t\t\t// directly from the style previously serialized.\n\t\t\t\tconst borderColor = parseBorderColor( figureStyle );\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst blockquoteTextColorClass = getColorClassName(\n\t\t\t\t'color',\n\t\t\t\ttextColor\n\t\t\t);\n\t\t\tconst blockquoteClasses =\n\t\t\t\t( textColor || customTextColor ) &&\n\t\t\t\tclassnames( 'has-text-color', {\n\t\t\t\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t\t\t\t} );\n\n\t\t\tconst blockquoteStyles = blockquoteTextColorClass\n\t\t\t\t? undefined\n\t\t\t\t: { color: customTextColor };\n\n\t\t\treturn (\n\t\t\t\t<figure className={ figureClasses } style={ figureStyles }>\n\t\t\t\t\t<blockquote\n\t\t\t\t\t\tclassName={ blockquoteClasses }\n\t\t\t\t\t\tstyle={ blockquoteStyles }\n\t\t\t\t\t>\n\t\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t\t<RichText.Content\n\t\t\t\t\t\t\t\ttagName=\"cite\"\n\t\t\t\t\t\t\t\tvalue={ citation }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</blockquote>\n\t\t\t\t</figure>\n\t\t\t);\n\t\t},\n\t\tmigrate( { className, figureStyle, mainColor, ...attributes } ) {\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\t\t\t// If is the default style, and a main color is set,\n\t\t\t// migrate the main color value into a custom color.\n\t\t\t// The custom color value is retrived by parsing the figure styles.\n\t\t\tif ( ! isSolidColorStyle && mainColor && figureStyle ) {\n\t\t\t\tconst borderColor = parseBorderColor( figureStyle );\n\t\t\t\tif ( borderColor ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...attributes,\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t\tcustomMainColor: borderColor,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tclassName,\n\t\t\t\tmainColor,\n\t\t\t\t...attributes,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tattributes: blockAttributes,\n\t\tsave( { attributes } ) {\n\t\t\tconst {\n\t\t\t\tmainColor,\n\t\t\t\tcustomMainColor,\n\t\t\t\ttextColor,\n\t\t\t\tcustomTextColor,\n\t\t\t\tvalue,\n\t\t\t\tcitation,\n\t\t\t\tclassName,\n\t\t\t} = attributes;\n\t\t\tconst isSolidColorStyle = includes( className, SOLID_COLOR_CLASS );\n\n\t\t\tlet figureClass, figureStyles;\n\t\t\t// Is solid color style\n\t\t\tif ( isSolidColorStyle ) {\n\t\t\t\tfigureClass = getColorClassName(\n\t\t\t\t\t'background-color',\n\t\t\t\t\tmainColor\n\t\t\t\t);\n\t\t\t\tif ( ! figureClass ) {\n\t\t\t\t\tfigureStyles = {\n\t\t\t\t\t\tbackgroundColor: customMainColor,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// Is normal style and a custom color is being used ( we can set a style directly with its value)\n\t\t\t} else if ( customMainColor ) {\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor: customMainColor,\n\t\t\t\t};\n\t\t\t\t// Is normal style and a named color is being used, we need to retrieve the color value to set the style,\n\t\t\t\t// as there is no expectation that themes create classes that set border colors.\n\t\t\t} else if ( mainColor ) {\n\t\t\t\tconst colors = get(\n\t\t\t\t\tselect( 'core/block-editor' ).getSettings(),\n\t\t\t\t\t[ 'colors' ],\n\t\t\t\t\t[]\n\t\t\t\t);\n\t\t\t\tconst colorObject = getColorObjectByAttributeValues(\n\t\t\t\t\tcolors,\n\t\t\t\t\tmainColor\n\t\t\t\t);\n\t\t\t\tfigureStyles = {\n\t\t\t\t\tborderColor: colorObject.color,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst blockquoteTextColorClass = getColorClassName(\n\t\t\t\t'color',\n\t\t\t\ttextColor\n\t\t\t);\n\t\t\tconst blockquoteClasses =\n\t\t\t\ttextColor || customTextColor\n\t\t\t\t\t? classnames( 'has-text-color', {\n\t\t\t\t\t\t\t[ blockquoteTextColorClass ]: blockquoteTextColorClass,\n\t\t\t\t\t  } )\n\t\t\t\t\t: undefined;\n\t\t\tconst blockquoteStyle = blockquoteTextColorClass\n\t\t\t\t? undefined\n\t\t\t\t: { color: customTextColor };\n\t\t\treturn (\n\t\t\t\t<figure className={ figureClass } style={ figureStyles }>\n\t\t\t\t\t<blockquote\n\t\t\t\t\t\tclassName={ blockquoteClasses }\n\t\t\t\t\t\tstyle={ blockquoteStyle }\n\t\t\t\t\t>\n\t\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t\t<RichText.Content\n\t\t\t\t\t\t\t\ttagName=\"cite\"\n\t\t\t\t\t\t\t\tvalue={ citation }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</blockquote>\n\t\t\t\t</figure>\n\t\t\t);\n\t\t},\n\t},\n\t{\n\t\tattributes: {\n\t\t\t...blockAttributes,\n\t\t},\n\t\tsave( { attributes } ) {\n\t\t\tconst { value, citation } = attributes;\n\t\t\treturn (\n\t\t\t\t<blockquote>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t<RichText.Content tagName=\"cite\" value={ citation } />\n\t\t\t\t\t) }\n\t\t\t\t</blockquote>\n\t\t\t);\n\t\t},\n\t},\n\t{\n\t\tattributes: {\n\t\t\t...blockAttributes,\n\t\t\tcitation: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'html',\n\t\t\t\tselector: 'footer',\n\t\t\t},\n\t\t\talign: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'none',\n\t\t\t},\n\t\t},\n\n\t\tsave( { attributes } ) {\n\t\t\tconst { value, citation, align } = attributes;\n\n\t\t\treturn (\n\t\t\t\t<blockquote className={ `align${ align }` }>\n\t\t\t\t\t<RichText.Content value={ value } multiline />\n\t\t\t\t\t{ ! RichText.isEmpty( citation ) && (\n\t\t\t\t\t\t<RichText.Content tagName=\"footer\" value={ citation } />\n\t\t\t\t\t) }\n\t\t\t\t</blockquote>\n\t\t\t);\n\t\t},\n\t},\n];\n\nexport default deprecated;\n"]}