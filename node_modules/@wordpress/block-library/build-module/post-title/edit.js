import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useSelect } from '@wordpress/data';
import { AlignmentToolbar, BlockControls, __experimentalBlock as Block } from '@wordpress/block-editor';
import { ToolbarGroup } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import HeadingLevelDropdown from '../heading/heading-level-dropdown';
export default function PostTitleEdit(_ref) {
  var attributes = _ref.attributes,
      setAttributes = _ref.setAttributes,
      context = _ref.context;
  var level = attributes.level,
      textAlign = attributes.textAlign;
  var postType = context.postType,
      postId = context.postId;
  var tagName = 0 === level ? 'p' : 'h' + level;
  var post = useSelect(function (select) {
    return select('core').getEditedEntityRecord('postType', postType, postId);
  }, [postType, postId]);

  if (!post) {
    return null;
  }

  var BlockWrapper = Block[tagName];
  return createElement(Fragment, null, createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(HeadingLevelDropdown, {
    selectedLevel: level,
    onChange: function onChange(newLevel) {
      return setAttributes({
        level: newLevel
      });
    }
  })), createElement(AlignmentToolbar, {
    value: textAlign,
    onChange: function onChange(nextAlign) {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), createElement(BlockWrapper, {
    className: classnames(_defineProperty({}, "has-text-align-".concat(textAlign), textAlign))
  }, post.title || __('Post Title')));
}
//# sourceMappingURL=edit.js.map