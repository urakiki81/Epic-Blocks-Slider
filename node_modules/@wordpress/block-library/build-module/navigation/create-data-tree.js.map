{"version":3,"sources":["@wordpress/block-library/src/navigation/create-data-tree.js"],"names":["createDataTree","dataset","id","relation","hashTable","Object","create","dataTree","data","children","push"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAeA,SAASA,cAAT,CAAyBC,OAAzB,EAAmE;AAAA,MAAjCC,EAAiC,uEAA5B,IAA4B;AAAA,MAAtBC,QAAsB,uEAAX,QAAW;AAClE,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAe,IAAf,CAAlB;AACA,MAAMC,QAAQ,GAAG,EAAjB;;AAFkE,6CAI9CN,OAJ8C;AAAA;;AAAA;AAIlE,wDAA8B;AAAA,UAAlBO,IAAkB;AAC7BJ,MAAAA,SAAS,CAAEI,IAAI,CAAEN,EAAF,CAAN,CAAT,qBACIM,IADJ;AAECC,QAAAA,QAAQ,EAAE;AAFX;AAIA;AATiE;AAAA;AAAA;AAAA;AAAA;;AAAA,8CAU9CR,OAV8C;AAAA;;AAAA;AAUlE,2DAA8B;AAAA,UAAlBO,KAAkB;;AAC7B,UAAKA,KAAI,CAAEL,QAAF,CAAT,EAAwB;AACvBC,QAAAA,SAAS,CAAEI,KAAI,CAAEL,QAAF,CAAN,CAAT,CAA8BM,QAA9B,CAAuCC,IAAvC,CACCN,SAAS,CAAEI,KAAI,CAAEN,EAAF,CAAN,CADV;AAGA,OAJD,MAIO;AACNK,QAAAA,QAAQ,CAACG,IAAT,CAAeN,SAAS,CAAEI,KAAI,CAAEN,EAAF,CAAN,CAAxB;AACA;AACD;AAlBiE;AAAA;AAAA;AAAA;AAAA;;AAoBlE,SAAOK,QAAP;AACA;;AAED,eAAeP,cAAf","sourcesContent":["/**\n * Creates a nested, hierarchical tree representation from unstructured data that\n * has an inherent relationship defined between individual items.\n *\n * For example, by default, each element in the dataset should have an `id` and\n * `parent` property where the `parent` property indicates a relationship between\n * the current item and another item with a matching `id` properties.\n *\n * This is useful for building linked lists of data from flat data structures.\n *\n * @param {Array} dataset linked data to be rearranged into a hierarchical tree based on relational fields.\n * @param {string} id the property which uniquely identifies each entry within the array.\n * @param {*} relation the property which identifies how the current item is related to other items in the data (if at all).\n * @return {Array} a nested array of parent/child relationships\n */\nfunction createDataTree( dataset, id = 'id', relation = 'parent' ) {\n\tconst hashTable = Object.create( null );\n\tconst dataTree = [];\n\n\tfor ( const data of dataset ) {\n\t\thashTable[ data[ id ] ] = {\n\t\t\t...data,\n\t\t\tchildren: [],\n\t\t};\n\t}\n\tfor ( const data of dataset ) {\n\t\tif ( data[ relation ] ) {\n\t\t\thashTable[ data[ relation ] ].children.push(\n\t\t\t\thashTable[ data[ id ] ]\n\t\t\t);\n\t\t} else {\n\t\t\tdataTree.push( hashTable[ data[ id ] ] );\n\t\t}\n\t}\n\n\treturn dataTree;\n}\n\nexport default createDataTree;\n"]}