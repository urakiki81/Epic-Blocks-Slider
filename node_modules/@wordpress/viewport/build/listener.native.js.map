{"version":3,"sources":["@wordpress/viewport/src/listener.native.js"],"names":["matchWidth","operator","breakpoint","Dimensions","get","width","Error","addDimensionsEventListener","breakpoints","operators","setIsMatching","matches","result","name","condition","key","join","addEventListener"],"mappings":";;;;;;;AAGA;;AACA;;AAKA;;AATA;;;;AAMA;;;AAKA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAEC,QAAF,EAAYC,UAAZ,EAA4B;AAAA,wBAC5BC,wBAAWC,GAAX,CAAgB,QAAhB,CAD4B;AAAA,MACtCC,KADsC,mBACtCA,KADsC;;AAE9C,MAAKJ,QAAQ,KAAK,WAAlB,EAAgC;AAC/B,WAAOI,KAAK,GAAGH,UAAf;AACA,GAFD,MAEO,IAAKD,QAAQ,KAAK,WAAlB,EAAgC;AACtC,WAAOI,KAAK,IAAIH,UAAhB;AACA;;AACD,QAAM,IAAII,KAAJ,0CAA8CL,QAA9C,EAAN;AACA,CARD;;AAUA,IAAMM,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAEC,WAAF,EAAeC,SAAf,EAA8B;AAChE,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC3B,QAAMC,OAAO,GAAG,oBACfH,WADe,EAEf,UAAEI,MAAF,EAAUP,KAAV,EAAiBQ,IAAjB,EAA2B;AAC1B,2BAASJ,SAAT,EAAoB,UAAEK,SAAF,EAAab,QAAb,EAA2B;AAC9C,YAAMc,GAAG,GAAG,CAAEd,QAAF,EAAYY,IAAZ,EAAmBG,IAAnB,CAAyB,GAAzB,CAAZ;AACAJ,QAAAA,MAAM,CAAEG,GAAF,CAAN,GAAgBf,UAAU,CAAEc,SAAF,EAAaT,KAAb,CAA1B;AACA,OAHD;AAKA,aAAOO,MAAP;AACA,KATc,EAUf,EAVe,CAAhB;AAaA,wBAAU,eAAV,EAA4BF,aAA5B,CAA2CC,OAA3C;AACA,GAfD;;AAiBAR,0BAAWc,gBAAX,CAA6B,QAA7B,EAAuCP,aAAvC,EAlBgE,CAoBhE;;;AACAA,EAAAA,aAAa;AACb,CAtBD;;eAwBeH,0B","sourcesContent":["/**\n * External dependencies\n */\nimport { forEach, reduce } from 'lodash';\nimport { Dimensions } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { dispatch } from '@wordpress/data';\n\nconst matchWidth = ( operator, breakpoint ) => {\n\tconst { width } = Dimensions.get( 'window' );\n\tif ( operator === 'max-width' ) {\n\t\treturn width < breakpoint;\n\t} else if ( operator === 'min-width' ) {\n\t\treturn width >= breakpoint;\n\t}\n\tthrow new Error( `Unsupported viewport operator: ${ operator }` );\n};\n\nconst addDimensionsEventListener = ( breakpoints, operators ) => {\n\tconst setIsMatching = () => {\n\t\tconst matches = reduce(\n\t\t\tbreakpoints,\n\t\t\t( result, width, name ) => {\n\t\t\t\tforEach( operators, ( condition, operator ) => {\n\t\t\t\t\tconst key = [ operator, name ].join( ' ' );\n\t\t\t\t\tresult[ key ] = matchWidth( condition, width );\n\t\t\t\t} );\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\t{}\n\t\t);\n\n\t\tdispatch( 'core/viewport' ).setIsMatching( matches );\n\t};\n\n\tDimensions.addEventListener( 'change', setIsMatching );\n\n\t// Set initial values\n\tsetIsMatching();\n};\n\nexport default addDimensionsEventListener;\n"]}